"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@coinbase";
exports.ids = ["vendor-chunks/@coinbase"];
exports.modules = {

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/chainToNetworkMapper.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/chainToNetworkMapper.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapChainToNetwork: () => (/* binding */ mapChainToNetwork)\n/* harmony export */ });\n/**\n * Maps a viem chain to a Coinbase network identifier.\n * This function only supports the networks defined in KnownEvmNetworks.\n *\n * @param chain - The viem chain object\n * @returns The Coinbase network identifier, or undefined if the chain is not supported\n */\nfunction mapChainToNetwork(chain) {\n    // Map chain IDs to Coinbase network identifiers\n    const chainIdToNetwork = {\n        // Ethereum networks\n        1: \"ethereum\",\n        11155111: \"ethereum-sepolia\",\n        17000: \"ethereum-hoodi\", // Holesky\n        // Base networks\n        8453: \"base\",\n        84532: \"base-sepolia\",\n        // Polygon networks\n        137: \"polygon\",\n        80001: \"polygon-mumbai\",\n        // Arbitrum networks\n        42161: \"arbitrum\",\n        421614: \"arbitrum-sepolia\",\n        // Optimism networks\n        10: \"optimism\",\n        11155420: \"optimism-sepolia\",\n    };\n    return chainIdToNetwork[chain.id];\n}\n//# sourceMappingURL=chainToNetworkMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY2NvdW50cy9ldm0vY2hhaW5Ub05ldHdvcmtNYXBwZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY2NvdW50cy9ldm0vY2hhaW5Ub05ldHdvcmtNYXBwZXIuanM/ZDg4OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1hcHMgYSB2aWVtIGNoYWluIHRvIGEgQ29pbmJhc2UgbmV0d29yayBpZGVudGlmaWVyLlxuICogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIHRoZSBuZXR3b3JrcyBkZWZpbmVkIGluIEtub3duRXZtTmV0d29ya3MuXG4gKlxuICogQHBhcmFtIGNoYWluIC0gVGhlIHZpZW0gY2hhaW4gb2JqZWN0XG4gKiBAcmV0dXJucyBUaGUgQ29pbmJhc2UgbmV0d29yayBpZGVudGlmaWVyLCBvciB1bmRlZmluZWQgaWYgdGhlIGNoYWluIGlzIG5vdCBzdXBwb3J0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcENoYWluVG9OZXR3b3JrKGNoYWluKSB7XG4gICAgLy8gTWFwIGNoYWluIElEcyB0byBDb2luYmFzZSBuZXR3b3JrIGlkZW50aWZpZXJzXG4gICAgY29uc3QgY2hhaW5JZFRvTmV0d29yayA9IHtcbiAgICAgICAgLy8gRXRoZXJldW0gbmV0d29ya3NcbiAgICAgICAgMTogXCJldGhlcmV1bVwiLFxuICAgICAgICAxMTE1NTExMTogXCJldGhlcmV1bS1zZXBvbGlhXCIsXG4gICAgICAgIDE3MDAwOiBcImV0aGVyZXVtLWhvb2RpXCIsIC8vIEhvbGVza3lcbiAgICAgICAgLy8gQmFzZSBuZXR3b3Jrc1xuICAgICAgICA4NDUzOiBcImJhc2VcIixcbiAgICAgICAgODQ1MzI6IFwiYmFzZS1zZXBvbGlhXCIsXG4gICAgICAgIC8vIFBvbHlnb24gbmV0d29ya3NcbiAgICAgICAgMTM3OiBcInBvbHlnb25cIixcbiAgICAgICAgODAwMDE6IFwicG9seWdvbi1tdW1iYWlcIixcbiAgICAgICAgLy8gQXJiaXRydW0gbmV0d29ya3NcbiAgICAgICAgNDIxNjE6IFwiYXJiaXRydW1cIixcbiAgICAgICAgNDIxNjE0OiBcImFyYml0cnVtLXNlcG9saWFcIixcbiAgICAgICAgLy8gT3B0aW1pc20gbmV0d29ya3NcbiAgICAgICAgMTA6IFwib3B0aW1pc21cIixcbiAgICAgICAgMTExNTU0MjA6IFwib3B0aW1pc20tc2Vwb2xpYVwiLFxuICAgIH07XG4gICAgcmV0dXJuIGNoYWluSWRUb05ldHdvcmtbY2hhaW4uaWRdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhaW5Ub05ldHdvcmtNYXBwZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/chainToNetworkMapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/getBaseNodeRpcUrl.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/getBaseNodeRpcUrl.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBaseNodeRpcUrl: () => (/* binding */ getBaseNodeRpcUrl)\n/* harmony export */ });\n/* harmony import */ var _auth_utils_jwt_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../auth/utils/jwt.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/jwt.js\");\n/* harmony import */ var _openapi_client_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../openapi-client/cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n\n/**\n * Get the base node RPC URL for a given network. Can also be used as a Paymaster URL\n *\n * @param network - The network identifier\n * @returns The base node RPC URL or undefined if the network is not supported\n */\nasync function getBaseNodeRpcUrl(network) {\n    if (!_openapi_client_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.config) {\n        return;\n    }\n    try {\n        const basePath = _openapi_client_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.config.basePath?.replace(\"/platform\", \"\");\n        const jwt = await (0,_auth_utils_jwt_js__WEBPACK_IMPORTED_MODULE_1__.generateJwt)({\n            apiKeyId: _openapi_client_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.config.apiKeyId,\n            apiKeySecret: _openapi_client_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.config.apiKeySecret,\n            requestMethod: \"GET\",\n            requestHost: basePath.replace(\"https://\", \"\"),\n            requestPath: \"/apikeys/v1/tokens/active\",\n        });\n        const response = await fetch(`${basePath}/apikeys/v1/tokens/active`, {\n            headers: {\n                Authorization: `Bearer ${jwt}`,\n                \"Content-Type\": \"application/json\",\n            },\n        });\n        const json = await response.json();\n        return `${basePath}/rpc/v1/${network}/${json.id}`;\n    }\n    catch {\n        return;\n    }\n}\n//# sourceMappingURL=getBaseNodeRpcUrl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY2NvdW50cy9ldm0vZ2V0QmFzZU5vZGVScGNVcmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXNEO0FBQ1E7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxTQUFTLG1FQUFNO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1FQUFNO0FBQy9CLDBCQUEwQiwrREFBVztBQUNyQyxzQkFBc0IsbUVBQU07QUFDNUIsMEJBQTBCLG1FQUFNO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCx3Q0FBd0MsU0FBUztBQUNqRDtBQUNBLHlDQUF5QyxJQUFJO0FBQzdDO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLGtCQUFrQixTQUFTLFVBQVUsUUFBUSxHQUFHLFFBQVE7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2FjY291bnRzL2V2bS9nZXRCYXNlTm9kZVJwY1VybC5qcz83OTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlbmVyYXRlSnd0IH0gZnJvbSBcIi4uLy4uL2F1dGgvdXRpbHMvand0LmpzXCI7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tIFwiLi4vLi4vb3BlbmFwaS1jbGllbnQvY2RwQXBpQ2xpZW50LmpzXCI7XG4vKipcbiAqIEdldCB0aGUgYmFzZSBub2RlIFJQQyBVUkwgZm9yIGEgZ2l2ZW4gbmV0d29yay4gQ2FuIGFsc28gYmUgdXNlZCBhcyBhIFBheW1hc3RlciBVUkxcbiAqXG4gKiBAcGFyYW0gbmV0d29yayAtIFRoZSBuZXR3b3JrIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIFRoZSBiYXNlIG5vZGUgUlBDIFVSTCBvciB1bmRlZmluZWQgaWYgdGhlIG5ldHdvcmsgaXMgbm90IHN1cHBvcnRlZFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QmFzZU5vZGVScGNVcmwobmV0d29yaykge1xuICAgIGlmICghY29uZmlnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYmFzZVBhdGggPSBjb25maWcuYmFzZVBhdGg/LnJlcGxhY2UoXCIvcGxhdGZvcm1cIiwgXCJcIik7XG4gICAgICAgIGNvbnN0IGp3dCA9IGF3YWl0IGdlbmVyYXRlSnd0KHtcbiAgICAgICAgICAgIGFwaUtleUlkOiBjb25maWcuYXBpS2V5SWQsXG4gICAgICAgICAgICBhcGlLZXlTZWNyZXQ6IGNvbmZpZy5hcGlLZXlTZWNyZXQsXG4gICAgICAgICAgICByZXF1ZXN0TWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgcmVxdWVzdEhvc3Q6IGJhc2VQYXRoLnJlcGxhY2UoXCJodHRwczovL1wiLCBcIlwiKSxcbiAgICAgICAgICAgIHJlcXVlc3RQYXRoOiBcIi9hcGlrZXlzL3YxL3Rva2Vucy9hY3RpdmVcIixcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7YmFzZVBhdGh9L2FwaWtleXMvdjEvdG9rZW5zL2FjdGl2ZWAsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7and0fWAsXG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgcmV0dXJuIGAke2Jhc2VQYXRofS9ycGMvdjEvJHtuZXR3b3JrfS8ke2pzb24uaWR9YDtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0QmFzZU5vZGVScGNVcmwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/getBaseNodeRpcUrl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/networkCapabilities.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/networkCapabilities.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NETWORK_CAPABILITIES: () => (/* binding */ NETWORK_CAPABILITIES),\n/* harmony export */   getNetworksSupportingMethod: () => (/* binding */ getNetworksSupportingMethod),\n/* harmony export */   isMethodSupportedOnNetwork: () => (/* binding */ isMethodSupportedOnNetwork)\n/* harmony export */ });\n/**\n * Centralized configuration for network capabilities.\n * This defines which methods are available on which networks.\n */\n/**\n * Network capabilities configuration.\n * Each network has a set of boolean flags indicating which methods are supported.\n */\nconst NETWORK_CAPABILITIES = {\n    base: {\n        listTokenBalances: true,\n        requestFaucet: false,\n        quoteFund: true,\n        fund: true,\n        waitForFundOperationReceipt: true,\n        transfer: true,\n        sendTransaction: true,\n        quoteSwap: true,\n        swap: true,\n        useSpendPermission: true,\n    },\n    \"base-sepolia\": {\n        listTokenBalances: true,\n        requestFaucet: true,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: true,\n        sendTransaction: true,\n        quoteSwap: false,\n        swap: false,\n        useSpendPermission: true,\n    },\n    ethereum: {\n        listTokenBalances: true,\n        requestFaucet: false,\n        quoteFund: false, // Only base is supported for quoteFund\n        fund: false, // Only base is supported for fund\n        waitForFundOperationReceipt: false,\n        transfer: true,\n        sendTransaction: true,\n        quoteSwap: true,\n        swap: true,\n        useSpendPermission: true,\n    },\n    \"ethereum-sepolia\": {\n        listTokenBalances: false,\n        requestFaucet: true,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: true,\n        sendTransaction: true,\n        quoteSwap: false,\n        swap: false,\n        useSpendPermission: true,\n    },\n    \"ethereum-hoodi\": {\n        listTokenBalances: false,\n        requestFaucet: true,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: false,\n        sendTransaction: true, // Always available (uses wallet client for non-base networks)\n        quoteSwap: false,\n        swap: false,\n        useSpendPermission: false,\n    },\n    optimism: {\n        listTokenBalances: false,\n        requestFaucet: false,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: false,\n        sendTransaction: true, // Always available (uses wallet client for non-base networks)\n        quoteSwap: true,\n        swap: true,\n        useSpendPermission: true,\n    },\n    \"optimism-sepolia\": {\n        listTokenBalances: false,\n        requestFaucet: true,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: false,\n        sendTransaction: true, // Always available (uses wallet client for non-base networks)\n        quoteSwap: false,\n        swap: false,\n        useSpendPermission: true,\n    },\n    arbitrum: {\n        listTokenBalances: false,\n        requestFaucet: true,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: false,\n        sendTransaction: true, // Always available (uses wallet client for non-base networks)\n        quoteSwap: true,\n        swap: true,\n        useSpendPermission: true,\n    },\n    \"arbitrum-sepolia\": {\n        listTokenBalances: false,\n        requestFaucet: true,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: false,\n        sendTransaction: true, // Always available (uses wallet client for non-base networks)\n        quoteSwap: false,\n        swap: false,\n        useSpendPermission: true,\n    },\n    avalanche: {\n        listTokenBalances: false,\n        requestFaucet: false,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: false,\n        sendTransaction: true, // Always available (uses wallet client for non-base networks)\n        quoteSwap: false,\n        swap: false,\n        useSpendPermission: true,\n    },\n    binance: {\n        listTokenBalances: false,\n        requestFaucet: false,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: false,\n        sendTransaction: true, // Always available (uses wallet client for non-base networks)\n        quoteSwap: false,\n        swap: false,\n        useSpendPermission: true,\n    },\n    polygon: {\n        listTokenBalances: false,\n        requestFaucet: false,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: false,\n        sendTransaction: true, // Always available (uses wallet client for non-base networks)\n        quoteSwap: false,\n        swap: false,\n        useSpendPermission: true,\n    },\n    zora: {\n        listTokenBalances: false,\n        requestFaucet: false,\n        quoteFund: false,\n        fund: false,\n        waitForFundOperationReceipt: false,\n        transfer: false,\n        sendTransaction: true, // Always available (uses wallet client for non-base networks)\n        quoteSwap: false,\n        swap: false,\n        useSpendPermission: true,\n    },\n};\n/**\n * Helper to get networks that support a specific method\n *\n * @param method - The method name to check support for\n * @returns An array of network names that support the method\n */\nfunction getNetworksSupportingMethod(method) {\n    return Object.keys(NETWORK_CAPABILITIES).filter(network => NETWORK_CAPABILITIES[network][method]);\n}\n/**\n * Helper to check if a network supports a method\n *\n * @param method - The method name to check\n * @param network - The network name to check\n * @returns True if the network supports the method, false otherwise\n */\nfunction isMethodSupportedOnNetwork(method, network) {\n    const networkConfig = NETWORK_CAPABILITIES[network];\n    return networkConfig ? networkConfig[method] : false;\n}\n//# sourceMappingURL=networkCapabilities.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/networkCapabilities.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/networkToChainResolver.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/networkToChainResolver.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NETWORK_TO_CHAIN_MAP: () => (/* binding */ NETWORK_TO_CHAIN_MAP),\n/* harmony export */   resolveNetworkToChain: () => (/* binding */ resolveNetworkToChain)\n/* harmony export */ });\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/base.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/baseSepolia.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/mainnet.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/sepolia.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/polygon.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/polygonMumbai.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/arbitrum.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/arbitrumSepolia.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/optimism.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/optimismSepolia.js\");\n\n/**\n * Network identifier to viem chain mapping\n */\nconst NETWORK_TO_CHAIN_MAP = {\n    base: viem_chains__WEBPACK_IMPORTED_MODULE_0__.base,\n    \"base-sepolia\": viem_chains__WEBPACK_IMPORTED_MODULE_1__.baseSepolia,\n    ethereum: viem_chains__WEBPACK_IMPORTED_MODULE_2__.mainnet,\n    \"ethereum-sepolia\": viem_chains__WEBPACK_IMPORTED_MODULE_3__.sepolia,\n    polygon: viem_chains__WEBPACK_IMPORTED_MODULE_4__.polygon,\n    \"polygon-mumbai\": viem_chains__WEBPACK_IMPORTED_MODULE_5__.polygonMumbai,\n    arbitrum: viem_chains__WEBPACK_IMPORTED_MODULE_6__.arbitrum,\n    \"arbitrum-sepolia\": viem_chains__WEBPACK_IMPORTED_MODULE_7__.arbitrumSepolia,\n    optimism: viem_chains__WEBPACK_IMPORTED_MODULE_8__.optimism,\n    \"optimism-sepolia\": viem_chains__WEBPACK_IMPORTED_MODULE_9__.optimismSepolia,\n};\n/**\n * Resolves a network identifier to a viem chain\n *\n * @param network - The network identifier to resolve\n * @returns The resolved viem chain\n * @throws Error if the network identifier is not supported\n */\nfunction resolveNetworkToChain(network) {\n    const chain = NETWORK_TO_CHAIN_MAP[network.toLowerCase()];\n    if (!chain) {\n        throw new Error(`Unsupported network identifier: ${network}`);\n    }\n    return chain;\n}\n//# sourceMappingURL=networkToChainResolver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY2NvdW50cy9ldm0vbmV0d29ya1RvQ2hhaW5SZXNvbHZlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ087QUFDUCxVQUFVLDZDQUFXO0FBQ3JCLG9CQUFvQixvREFBa0I7QUFDdEMsY0FBYyxnREFBYztBQUM1Qix3QkFBd0IsZ0RBQWM7QUFDdEMsYUFBYSxnREFBYztBQUMzQixzQkFBc0Isc0RBQW9CO0FBQzFDLGNBQWMsaURBQWU7QUFDN0Isd0JBQXdCLHdEQUFzQjtBQUM5QyxjQUFjLGlEQUFlO0FBQzdCLHdCQUF3Qix3REFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLDJEQUEyRCxRQUFRO0FBQ25FO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2FjY291bnRzL2V2bS9uZXR3b3JrVG9DaGFpblJlc29sdmVyLmpzPzE5YTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hhaW5zIGZyb20gXCJ2aWVtL2NoYWluc1wiO1xuLyoqXG4gKiBOZXR3b3JrIGlkZW50aWZpZXIgdG8gdmllbSBjaGFpbiBtYXBwaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBORVRXT1JLX1RPX0NIQUlOX01BUCA9IHtcbiAgICBiYXNlOiBjaGFpbnMuYmFzZSxcbiAgICBcImJhc2Utc2Vwb2xpYVwiOiBjaGFpbnMuYmFzZVNlcG9saWEsXG4gICAgZXRoZXJldW06IGNoYWlucy5tYWlubmV0LFxuICAgIFwiZXRoZXJldW0tc2Vwb2xpYVwiOiBjaGFpbnMuc2Vwb2xpYSxcbiAgICBwb2x5Z29uOiBjaGFpbnMucG9seWdvbixcbiAgICBcInBvbHlnb24tbXVtYmFpXCI6IGNoYWlucy5wb2x5Z29uTXVtYmFpLFxuICAgIGFyYml0cnVtOiBjaGFpbnMuYXJiaXRydW0sXG4gICAgXCJhcmJpdHJ1bS1zZXBvbGlhXCI6IGNoYWlucy5hcmJpdHJ1bVNlcG9saWEsXG4gICAgb3B0aW1pc206IGNoYWlucy5vcHRpbWlzbSxcbiAgICBcIm9wdGltaXNtLXNlcG9saWFcIjogY2hhaW5zLm9wdGltaXNtU2Vwb2xpYSxcbn07XG4vKipcbiAqIFJlc29sdmVzIGEgbmV0d29yayBpZGVudGlmaWVyIHRvIGEgdmllbSBjaGFpblxuICpcbiAqIEBwYXJhbSBuZXR3b3JrIC0gVGhlIG5ldHdvcmsgaWRlbnRpZmllciB0byByZXNvbHZlXG4gKiBAcmV0dXJucyBUaGUgcmVzb2x2ZWQgdmllbSBjaGFpblxuICogQHRocm93cyBFcnJvciBpZiB0aGUgbmV0d29yayBpZGVudGlmaWVyIGlzIG5vdCBzdXBwb3J0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVOZXR3b3JrVG9DaGFpbihuZXR3b3JrKSB7XG4gICAgY29uc3QgY2hhaW4gPSBORVRXT1JLX1RPX0NIQUlOX01BUFtuZXR3b3JrLnRvTG93ZXJDYXNlKCldO1xuICAgIGlmICghY2hhaW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBuZXR3b3JrIGlkZW50aWZpZXI6ICR7bmV0d29ya31gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYWluO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29ya1RvQ2hhaW5SZXNvbHZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/networkToChainResolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/resolveViemClients.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/resolveViemClients.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveViemClients: () => (/* binding */ resolveViemClients)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createPublicClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/http.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var viem_accounts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem/accounts */ \"(ssr)/./node_modules/viem/_esm/accounts/toAccount.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/index.js\");\n/* harmony import */ var _getBaseNodeRpcUrl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getBaseNodeRpcUrl.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/getBaseNodeRpcUrl.js\");\n/* harmony import */ var _networkToChainResolver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./networkToChainResolver.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/networkToChainResolver.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n\n\n\n\n\n\n/**\n * Get a chain from the viem chains object\n *\n * @param id - The chain ID\n * @returns The chain\n */\nfunction getChain(id) {\n    const chainList = Object.values(viem_chains__WEBPACK_IMPORTED_MODULE_0__);\n    const found = chainList.find(chain => chain.id === id);\n    if (!found)\n        throw new Error(`Unsupported chain ID: ${id}`);\n    return found;\n}\n/**\n * Determines if the input string is a network identifier or a Node URL\n *\n * @param input - The string to check\n * @returns True if the input is a network identifier, false otherwise\n */\nfunction isNetworkIdentifier(input) {\n    const normalizedInput = input.toLowerCase();\n    return _networkToChainResolver_js__WEBPACK_IMPORTED_MODULE_1__.NETWORK_TO_CHAIN_MAP[normalizedInput] !== undefined;\n}\n/**\n * Resolves a Node URL to a viem chain by making a getChainId call\n *\n * @param nodeUrl - The Node URL to resolve\n * @returns Promise resolving to the viem chain\n */\nasync function resolveNodeUrlToChain(nodeUrl) {\n    // First validate that it's a proper URL\n    if (!isValidUrl(nodeUrl)) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UserInputValidationError(`Invalid URL format: ${nodeUrl}`);\n    }\n    // Create a temporary public client to get the chain ID\n    const tempPublicClient = (0,viem__WEBPACK_IMPORTED_MODULE_3__.createPublicClient)({\n        transport: (0,viem__WEBPACK_IMPORTED_MODULE_4__.http)(nodeUrl),\n    });\n    try {\n        const chainId = await tempPublicClient.getChainId();\n        const chain = getChain(Number(chainId));\n        return chain;\n    }\n    catch (error) {\n        throw new Error(`Failed to resolve chain ID from Node URL: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n    }\n}\n/**\n * Determines if the input string is a valid URL\n *\n * @param input - The string to validate as a URL\n * @returns True if the input is a valid URL, false otherwise\n */\nfunction isValidUrl(input) {\n    try {\n        new URL(input);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Resolves viem clients based on a network identifier or Node URL.\n *\n * @param options - Configuration options\n * @param options.networkOrNodeUrl - Either a network identifier (e.g., \"base\", \"base-sepolia\") or a full Node URL\n * @param options.account - Optional account to use for the wallet client\n * @returns Promise resolving to an object containing the chain, publicClient, and walletClient\n *\n * @example\n * ```typescript\n * // Using network identifier\n * const clients = await resolveViemClients({\n *   networkOrNodeUrl: \"base\",\n *   account: myAccount\n * });\n *\n * // Using Node URL\n * const clients = await resolveViemClients({\n *   networkOrNodeUrl: \"https://mainnet.base.org\",\n *   account: myAccount\n * });\n * ```\n */\nasync function resolveViemClients(options) {\n    const { networkOrNodeUrl } = options;\n    let chain;\n    // If it's a valid network identifier, use the mapping\n    if (isNetworkIdentifier(networkOrNodeUrl)) {\n        const rpcUrl = networkOrNodeUrl === \"base\" || networkOrNodeUrl === \"base-sepolia\"\n            ? await (0,_getBaseNodeRpcUrl_js__WEBPACK_IMPORTED_MODULE_5__.getBaseNodeRpcUrl)(networkOrNodeUrl)\n            : undefined;\n        chain = (0,_networkToChainResolver_js__WEBPACK_IMPORTED_MODULE_1__.resolveNetworkToChain)(networkOrNodeUrl);\n        const publicClient = (0,viem__WEBPACK_IMPORTED_MODULE_3__.createPublicClient)({\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_4__.http)(rpcUrl),\n        });\n        const walletClient = (0,viem__WEBPACK_IMPORTED_MODULE_6__.createWalletClient)({\n            account: (0,viem_accounts__WEBPACK_IMPORTED_MODULE_7__.toAccount)(options.account),\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_4__.http)(rpcUrl),\n        });\n        return {\n            chain,\n            publicClient,\n            walletClient,\n        };\n    }\n    // If it's not a valid network identifier, try to treat it as a Node URL\n    try {\n        chain = await resolveNodeUrlToChain(networkOrNodeUrl);\n        const publicClient = (0,viem__WEBPACK_IMPORTED_MODULE_3__.createPublicClient)({\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_4__.http)(networkOrNodeUrl),\n        });\n        const walletClient = (0,viem__WEBPACK_IMPORTED_MODULE_6__.createWalletClient)({\n            account: (0,viem_accounts__WEBPACK_IMPORTED_MODULE_7__.toAccount)(options.account),\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_4__.http)(networkOrNodeUrl),\n        });\n        return {\n            chain,\n            publicClient,\n            walletClient,\n        };\n    }\n    catch (error) {\n        // If the error is from resolveNodeUrlToChain, re-throw it as-is\n        if (error instanceof Error &&\n            (error.message.includes(\"Invalid URL format\") ||\n                error.message.includes(\"Unsupported chain ID\") ||\n                error.message.includes(\"Failed to resolve chain ID\"))) {\n            throw error;\n        }\n        // Otherwise, throw a generic error about unsupported input\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UserInputValidationError(`Unsupported network identifier or invalid Node URL: ${networkOrNodeUrl}`);\n    }\n}\n//# sourceMappingURL=resolveViemClients.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/resolveViemClients.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toEvmServerAccount.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toEvmServerAccount.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toEvmServerAccount: () => (/* binding */ toEvmServerAccount)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/transaction/serializeTransaction.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/typedData.js\");\n/* harmony import */ var _toNetworkScopedEvmServerAccount_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./toNetworkScopedEvmServerAccount.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toNetworkScopedEvmServerAccount.js\");\n/* harmony import */ var _actions_evm_fund_fund_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../actions/evm/fund/fund.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/fund.js\");\n/* harmony import */ var _actions_evm_fund_quoteFund_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../actions/evm/fund/quoteFund.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/quoteFund.js\");\n/* harmony import */ var _actions_evm_listTokenBalances_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../actions/evm/listTokenBalances.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listTokenBalances.js\");\n/* harmony import */ var _actions_evm_requestFaucet_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../actions/evm/requestFaucet.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/requestFaucet.js\");\n/* harmony import */ var _actions_evm_sendTransaction_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../actions/evm/sendTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendTransaction.js\");\n/* harmony import */ var _actions_evm_spend_permissions_account_use_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../actions/evm/spend-permissions/account.use.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/account.use.js\");\n/* harmony import */ var _actions_evm_swap_createSwapQuote_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../actions/evm/swap/createSwapQuote.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/createSwapQuote.js\");\n/* harmony import */ var _actions_evm_swap_sendSwapTransaction_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../actions/evm/swap/sendSwapTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapTransaction.js\");\n/* harmony import */ var _actions_evm_transfer_accountTransferStrategy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../actions/evm/transfer/accountTransferStrategy.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/accountTransferStrategy.js\");\n/* harmony import */ var _actions_evm_transfer_transfer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../actions/evm/transfer/transfer.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/transfer.js\");\n/* harmony import */ var _actions_waitForFundOperationReceipt_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../actions/waitForFundOperationReceipt.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/waitForFundOperationReceipt.js\");\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../analytics.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a Server-managed EvmAccount instance from an existing EvmAccount.\n * Use this to interact with previously deployed EvmAccounts, rather than creating new ones.\n *\n * @param {CdpOpenApiClientType} apiClient - The API client.\n * @param {ToEvmServerAccountOptions} options - Configuration options.\n * @param {EvmAccount} options.account - The EvmAccount that was previously created.\n * @returns {EvmServerAccount} A configured EvmAccount instance ready for signing.\n */\nfunction toEvmServerAccount(apiClient, options) {\n    const account = {\n        address: options.account.address,\n        async signMessage({ message }) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"sign_message\",\n                accountType: \"evm_server\",\n            });\n            const result = await apiClient.signEvmMessage(options.account.address, {\n                message: message.toString(),\n            });\n            return result.signature;\n        },\n        async sign(parameters) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"sign\",\n                accountType: \"evm_server\",\n            });\n            const result = await apiClient.signEvmHash(options.account.address, {\n                hash: parameters.hash,\n            });\n            return result.signature;\n        },\n        async signTransaction(transaction) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"sign_transaction\",\n                accountType: \"evm_server\",\n            });\n            const result = await apiClient.signEvmTransaction(options.account.address, {\n                transaction: (0,viem__WEBPACK_IMPORTED_MODULE_1__.serializeTransaction)(transaction),\n            });\n            return result.signedTransaction;\n        },\n        async signTypedData(parameters) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"sign_typed_data\",\n                accountType: \"evm_server\",\n            });\n            const { domain = {}, message, primaryType } = parameters;\n            const types = {\n                EIP712Domain: (0,viem__WEBPACK_IMPORTED_MODULE_2__.getTypesForEIP712Domain)({ domain }),\n                ...parameters.types,\n            };\n            const openApiMessage = {\n                domain: domain,\n                types,\n                primaryType,\n                message,\n            };\n            const result = await apiClient.signEvmTypedData(options.account.address, openApiMessage);\n            return result.signature;\n        },\n        async transfer(transferArgs) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"transfer\",\n                accountType: \"evm_server\",\n                properties: {\n                    network: transferArgs.network,\n                },\n            });\n            return (0,_actions_evm_transfer_transfer_js__WEBPACK_IMPORTED_MODULE_3__.transfer)(apiClient, account, transferArgs, _actions_evm_transfer_accountTransferStrategy_js__WEBPACK_IMPORTED_MODULE_4__.accountTransferStrategy);\n        },\n        async listTokenBalances(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"list_token_balances\",\n                accountType: \"evm_server\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_listTokenBalances_js__WEBPACK_IMPORTED_MODULE_5__.listTokenBalances)(apiClient, {\n                ...options,\n                address: this.address,\n            });\n        },\n        async requestFaucet(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"request_faucet\",\n                accountType: \"evm_server\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_requestFaucet_js__WEBPACK_IMPORTED_MODULE_6__.requestFaucet)(apiClient, {\n                ...options,\n                address: this.address,\n            });\n        },\n        async sendTransaction(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"send_transaction\",\n                accountType: \"evm_server\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_sendTransaction_js__WEBPACK_IMPORTED_MODULE_7__.sendTransaction)(apiClient, {\n                ...options,\n                address: this.address,\n            });\n        },\n        async quoteFund(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"quote_fund\",\n                accountType: \"evm_server\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_fund_quoteFund_js__WEBPACK_IMPORTED_MODULE_8__.quoteFund)(apiClient, {\n                ...options,\n                address: this.address,\n            });\n        },\n        async fund(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"fund\",\n                accountType: \"evm_server\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_fund_fund_js__WEBPACK_IMPORTED_MODULE_9__.fund)(apiClient, {\n                ...options,\n                address: this.address,\n            });\n        },\n        async waitForFundOperationReceipt(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"wait_for_fund_operation_receipt\",\n                accountType: \"evm_server\",\n            });\n            return (0,_actions_waitForFundOperationReceipt_js__WEBPACK_IMPORTED_MODULE_10__.waitForFundOperationReceipt)(apiClient, options);\n        },\n        async quoteSwap(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"quote_swap\",\n                accountType: \"evm_server\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_swap_createSwapQuote_js__WEBPACK_IMPORTED_MODULE_11__.createSwapQuote)(apiClient, {\n                ...options,\n                taker: this.address,\n            });\n        },\n        async swap(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"swap\",\n                accountType: \"evm_server\",\n                properties: {\n                    network: \"network\" in options ? options.network : undefined,\n                },\n            });\n            return (0,_actions_evm_swap_sendSwapTransaction_js__WEBPACK_IMPORTED_MODULE_12__.sendSwapTransaction)(apiClient, {\n                ...options,\n                address: this.address,\n                taker: this.address, // Always use account's address as taker\n            });\n        },\n        async useSpendPermission(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"use_spend_permission\",\n                accountType: \"evm_server\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_spend_permissions_account_use_js__WEBPACK_IMPORTED_MODULE_13__.useSpendPermission)(apiClient, this.address, options);\n        },\n        name: options.account.name,\n        type: \"evm-server\",\n        policies: options.account.policies,\n        useNetwork: async (networkOrRpcUrl) => {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"use_network\",\n                accountType: \"evm_server\",\n                properties: {\n                    network: networkOrRpcUrl,\n                },\n            });\n            return (0,_toNetworkScopedEvmServerAccount_js__WEBPACK_IMPORTED_MODULE_14__.toNetworkScopedEvmServerAccount)({\n                account,\n                network: networkOrRpcUrl,\n            });\n        },\n    };\n    return account;\n}\n//# sourceMappingURL=toEvmServerAccount.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toEvmServerAccount.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toEvmSmartAccount.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toEvmSmartAccount.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toEvmSmartAccount: () => (/* binding */ toEvmSmartAccount)\n/* harmony export */ });\n/* harmony import */ var _networkToChainResolver_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./networkToChainResolver.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/networkToChainResolver.js\");\n/* harmony import */ var _toNetworkScopedEvmSmartAccount_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./toNetworkScopedEvmSmartAccount.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toNetworkScopedEvmSmartAccount.js\");\n/* harmony import */ var _actions_evm_fund_fund_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../actions/evm/fund/fund.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/fund.js\");\n/* harmony import */ var _actions_evm_fund_quoteFund_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../actions/evm/fund/quoteFund.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/quoteFund.js\");\n/* harmony import */ var _actions_evm_getUserOperation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../actions/evm/getUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/getUserOperation.js\");\n/* harmony import */ var _actions_evm_listTokenBalances_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../actions/evm/listTokenBalances.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listTokenBalances.js\");\n/* harmony import */ var _actions_evm_requestFaucet_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../actions/evm/requestFaucet.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/requestFaucet.js\");\n/* harmony import */ var _actions_evm_sendUserOperation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../actions/evm/sendUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendUserOperation.js\");\n/* harmony import */ var _actions_evm_signAndWrapTypedDataForSmartAccount_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../actions/evm/signAndWrapTypedDataForSmartAccount.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/signAndWrapTypedDataForSmartAccount.js\");\n/* harmony import */ var _actions_evm_spend_permissions_smartAccount_use_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../actions/evm/spend-permissions/smartAccount.use.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/smartAccount.use.js\");\n/* harmony import */ var _actions_evm_swap_createSwapQuote_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../actions/evm/swap/createSwapQuote.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/createSwapQuote.js\");\n/* harmony import */ var _actions_evm_swap_sendSwapOperation_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../actions/evm/swap/sendSwapOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapOperation.js\");\n/* harmony import */ var _actions_evm_transfer_smartAccountTransferStrategy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../actions/evm/transfer/smartAccountTransferStrategy.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/smartAccountTransferStrategy.js\");\n/* harmony import */ var _actions_evm_transfer_transfer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../actions/evm/transfer/transfer.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/transfer.js\");\n/* harmony import */ var _actions_evm_waitForUserOperation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../actions/evm/waitForUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/waitForUserOperation.js\");\n/* harmony import */ var _actions_waitForFundOperationReceipt_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../actions/waitForFundOperationReceipt.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/waitForFundOperationReceipt.js\");\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../analytics.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a EvmSmartAccount instance from an existing EvmSmartAccount and owner.\n * Use this to interact with previously deployed EvmSmartAccounts, rather than creating new ones.\n *\n * The owner must be the original owner of the evm smart account.\n *\n * @param {CdpOpenApiClientType} apiClient - The API client.\n * @param {ToEvmSmartAccountOptions} options - Configuration options.\n * @param {EvmSmartAccount} options.smartAccount - The deployed evm smart account.\n * @param {EvmAccount} options.owner - The owner which signs for the smart account.\n * @returns {EvmSmartAccount} A configured EvmSmartAccount instance ready for user operation submission.\n */\nfunction toEvmSmartAccount(apiClient, options) {\n    const account = {\n        address: options.smartAccount.address,\n        owners: [options.owner],\n        policies: options.smartAccount.policies,\n        async transfer(transferArgs) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"transfer\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: transferArgs.network,\n                },\n            });\n            return (0,_actions_evm_transfer_transfer_js__WEBPACK_IMPORTED_MODULE_1__.transfer)(apiClient, account, transferArgs, _actions_evm_transfer_smartAccountTransferStrategy_js__WEBPACK_IMPORTED_MODULE_2__.smartAccountTransferStrategy);\n        },\n        async listTokenBalances(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"list_token_balances\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_listTokenBalances_js__WEBPACK_IMPORTED_MODULE_3__.listTokenBalances)(apiClient, {\n                ...options,\n                address: this.address,\n            });\n        },\n        async sendUserOperation(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"send_user_operation\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_sendUserOperation_js__WEBPACK_IMPORTED_MODULE_4__.sendUserOperation)(apiClient, {\n                ...options,\n                smartAccount: account,\n            });\n        },\n        async waitForUserOperation(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"wait_for_user_operation\",\n                accountType: \"evm_smart\",\n            });\n            return (0,_actions_evm_waitForUserOperation_js__WEBPACK_IMPORTED_MODULE_5__.waitForUserOperation)(apiClient, {\n                ...options,\n                smartAccountAddress: account.address,\n            });\n        },\n        async getUserOperation(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"get_user_operation\",\n                accountType: \"evm_smart\",\n            });\n            return (0,_actions_evm_getUserOperation_js__WEBPACK_IMPORTED_MODULE_6__.getUserOperation)(apiClient, {\n                ...options,\n                smartAccount: account,\n            });\n        },\n        async requestFaucet(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"request_faucet\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_requestFaucet_js__WEBPACK_IMPORTED_MODULE_7__.requestFaucet)(apiClient, {\n                ...options,\n                address: account.address,\n            });\n        },\n        async quoteFund(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"quote_fund\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_fund_quoteFund_js__WEBPACK_IMPORTED_MODULE_8__.quoteFund)(apiClient, {\n                ...options,\n                address: this.address,\n            });\n        },\n        async fund(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"fund\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_fund_fund_js__WEBPACK_IMPORTED_MODULE_9__.fund)(apiClient, {\n                ...options,\n                address: this.address,\n            });\n        },\n        async waitForFundOperationReceipt(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"wait_for_fund_operation_receipt\",\n                accountType: \"evm_smart\",\n            });\n            return (0,_actions_waitForFundOperationReceipt_js__WEBPACK_IMPORTED_MODULE_10__.waitForFundOperationReceipt)(apiClient, options);\n        },\n        async quoteSwap(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"quote_swap\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_swap_createSwapQuote_js__WEBPACK_IMPORTED_MODULE_11__.createSwapQuote)(apiClient, {\n                ...options,\n                taker: this.address, // Always use smart account's address as taker\n                signerAddress: this.owners[0].address, // Always use owner's address as signer\n                smartAccount: account, // Pass smart account for execute method support\n            });\n        },\n        async swap(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"swap\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: \"network\" in options ? options.network : undefined,\n                },\n            });\n            return (0,_actions_evm_swap_sendSwapOperation_js__WEBPACK_IMPORTED_MODULE_12__.sendSwapOperation)(apiClient, {\n                ...options,\n                smartAccount: account,\n                taker: this.address, // Always use smart account's address as taker\n                signerAddress: this.owners[0].address, // Always use owner's address as signer\n            });\n        },\n        async signTypedData(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"sign_typed_data\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            const result = await (0,_actions_evm_signAndWrapTypedDataForSmartAccount_js__WEBPACK_IMPORTED_MODULE_13__.signAndWrapTypedDataForSmartAccount)(apiClient, {\n                chainId: BigInt((0,_networkToChainResolver_js__WEBPACK_IMPORTED_MODULE_14__.resolveNetworkToChain)(options.network).id),\n                smartAccount: account,\n                typedData: options,\n            });\n            return result.signature;\n        },\n        async useSpendPermission(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"use_spend_permission\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_evm_spend_permissions_smartAccount_use_js__WEBPACK_IMPORTED_MODULE_15__.useSpendPermission)(apiClient, account, options);\n        },\n        name: options.smartAccount.name,\n        type: \"evm-smart\",\n        useNetwork: async (network) => {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"use_network\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network,\n                },\n            });\n            return (0,_toNetworkScopedEvmSmartAccount_js__WEBPACK_IMPORTED_MODULE_16__.toNetworkScopedEvmSmartAccount)(apiClient, {\n                smartAccount: account,\n                owner: options.owner,\n                network,\n            });\n        },\n    };\n    return account;\n}\n//# sourceMappingURL=toEvmSmartAccount.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toEvmSmartAccount.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toNetworkScopedEvmServerAccount.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toNetworkScopedEvmServerAccount.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toNetworkScopedEvmServerAccount: () => (/* binding */ toNetworkScopedEvmServerAccount)\n/* harmony export */ });\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/base.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/baseSepolia.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/mainnet.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/sepolia.js\");\n/* harmony import */ var _chainToNetworkMapper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chainToNetworkMapper.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/chainToNetworkMapper.js\");\n/* harmony import */ var _networkCapabilities_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./networkCapabilities.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/networkCapabilities.js\");\n/* harmony import */ var _resolveViemClients_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resolveViemClients.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/resolveViemClients.js\");\n/* harmony import */ var _actions_evm_transfer_transferWithViem_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../actions/evm/transfer/transferWithViem.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/transferWithViem.js\");\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../analytics.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\");\n\n\n\n\n\n\n/**\n * Creates a Network-scoped Server-managed EvmAccount instance from an existing EvmAccount.\n * Use this to interact with previously deployed EvmAccounts on a specific network.\n *\n * @param {ToNetworkScopedEvmServerAccountOptions} options - Configuration options.\n * @param {EvmServerAccount} options.account - The EvmServerAccount that was previously created.\n * @param {string} options.network - The network to scope the account to.\n * @returns {NetworkScopedEvmServerAccount} A configured NetworkScopedEvmServerAccount instance ready for signing.\n */\nasync function toNetworkScopedEvmServerAccount(options) {\n    const { publicClient, walletClient, chain } = await (0,_resolveViemClients_js__WEBPACK_IMPORTED_MODULE_0__.resolveViemClients)({\n        networkOrNodeUrl: options.network,\n        account: options.account,\n    });\n    /*\n     * Determine the actual network name from the resolved chain\n     * This handles cases where options.network is an RPC URL\n     */\n    const resolvedNetworkName = (0,_chainToNetworkMapper_js__WEBPACK_IMPORTED_MODULE_1__.mapChainToNetwork)(chain) ?? options.network;\n    const shouldUseApiForSends = chain.id === viem_chains__WEBPACK_IMPORTED_MODULE_2__.base.id ||\n        chain.id === viem_chains__WEBPACK_IMPORTED_MODULE_3__.baseSepolia.id ||\n        chain.id === viem_chains__WEBPACK_IMPORTED_MODULE_4__.mainnet.id ||\n        chain.id === viem_chains__WEBPACK_IMPORTED_MODULE_5__.sepolia.id;\n    const account = {\n        address: options.account.address,\n        network: options.network,\n        signMessage: options.account.signMessage,\n        sign: options.account.sign,\n        signTransaction: options.account.signTransaction,\n        signTypedData: options.account.signTypedData,\n        name: options.account.name,\n        type: \"evm-server\",\n        policies: options.account.policies,\n        sendTransaction: async (txOpts) => {\n            if (shouldUseApiForSends) {\n                return options.account.sendTransaction({\n                    ...txOpts,\n                    network: (0,_chainToNetworkMapper_js__WEBPACK_IMPORTED_MODULE_1__.mapChainToNetwork)(chain),\n                });\n            }\n            else {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                    action: \"send_transaction\",\n                    accountType: \"evm_server\",\n                    properties: {\n                        network: options.network,\n                        managed: true,\n                    },\n                });\n                const hash = await walletClient.sendTransaction(txOpts.transaction);\n                return { transactionHash: hash };\n            }\n        },\n        transfer: async (transferArgs) => {\n            if (shouldUseApiForSends) {\n                return options.account.transfer({\n                    ...transferArgs,\n                    network: (0,_chainToNetworkMapper_js__WEBPACK_IMPORTED_MODULE_1__.mapChainToNetwork)(chain),\n                });\n            }\n            else {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                    action: \"transfer\",\n                    accountType: \"evm_server\",\n                    properties: {\n                        network: options.network,\n                        managed: true,\n                    },\n                });\n                return (0,_actions_evm_transfer_transferWithViem_js__WEBPACK_IMPORTED_MODULE_7__.transferWithViem)(walletClient, account, transferArgs);\n            }\n        },\n        waitForTransactionReceipt: async (waitOptions) => {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                action: \"wait_for_transaction_receipt\",\n                accountType: \"evm_server\",\n                properties: {\n                    managed: true,\n                },\n            });\n            if (\"transactionHash\" in waitOptions) {\n                return publicClient.waitForTransactionReceipt({\n                    hash: waitOptions.transactionHash,\n                });\n            }\n            return publicClient.waitForTransactionReceipt(waitOptions);\n        },\n    };\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_8__.isMethodSupportedOnNetwork)(\"listTokenBalances\", resolvedNetworkName)) {\n        Object.assign(account, {\n            listTokenBalances: async (listTokenBalancesOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                    action: \"list_token_balances\",\n                    accountType: \"evm_server\",\n                    properties: {\n                        managed: true,\n                    },\n                });\n                return options.account.listTokenBalances({\n                    ...listTokenBalancesOptions,\n                    network: options.network,\n                });\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_8__.isMethodSupportedOnNetwork)(\"requestFaucet\", resolvedNetworkName)) {\n        Object.assign(account, {\n            requestFaucet: async (faucetOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                    action: \"request_faucet\",\n                    accountType: \"evm_server\",\n                    properties: {\n                        managed: true,\n                    },\n                });\n                return options.account.requestFaucet({\n                    ...faucetOptions,\n                    network: chain.id === viem_chains__WEBPACK_IMPORTED_MODULE_3__.baseSepolia.id ? \"base-sepolia\" : \"ethereum-sepolia\",\n                });\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_8__.isMethodSupportedOnNetwork)(\"quoteFund\", resolvedNetworkName)) {\n        Object.assign(account, {\n            quoteFund: async (quoteFundOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                    action: \"quote_fund\",\n                    accountType: \"evm_server\",\n                    properties: {\n                        managed: true,\n                    },\n                });\n                return options.account.quoteFund({\n                    ...quoteFundOptions,\n                });\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_8__.isMethodSupportedOnNetwork)(\"fund\", resolvedNetworkName)) {\n        Object.assign(account, {\n            fund: async (fundOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                    action: \"fund\",\n                    accountType: \"evm_server\",\n                    properties: {\n                        managed: true,\n                    },\n                });\n                return options.account.fund({\n                    ...fundOptions,\n                });\n            },\n            waitForFundOperationReceipt: async (waitOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                    action: \"wait_for_fund_operation_receipt\",\n                    accountType: \"evm_server\",\n                    properties: {\n                        managed: true,\n                    },\n                });\n                return options.account.waitForFundOperationReceipt(waitOptions);\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_8__.isMethodSupportedOnNetwork)(\"quoteSwap\", resolvedNetworkName)) {\n        Object.assign(account, {\n            quoteSwap: async (quoteSwapOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                    action: \"quote_swap\",\n                    accountType: \"evm_server\",\n                    properties: {\n                        managed: true,\n                    },\n                });\n                return options.account.quoteSwap({\n                    ...quoteSwapOptions,\n                    network: options.network,\n                });\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_8__.isMethodSupportedOnNetwork)(\"swap\", resolvedNetworkName)) {\n        Object.assign(account, {\n            swap: async (swapOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                    action: \"swap\",\n                    accountType: \"evm_server\",\n                    properties: {\n                        managed: true,\n                    },\n                });\n                /*\n                 * For network-scoped accounts, we need to add the network parameter\n                 * for inline swaps while preserving quote-based swaps as-is\n                 */\n                const swapOptionsWithNetwork = \"swapQuote\" in swapOptions\n                    ? swapOptions // Quote-based swap, pass through\n                    : { ...swapOptions, network: options.network }; // Inline swap, add network\n                return options.account.swap(swapOptionsWithNetwork);\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_8__.isMethodSupportedOnNetwork)(\"useSpendPermission\", resolvedNetworkName)) {\n        Object.assign(account, {\n            useSpendPermission: async (spendPermissionOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_6__.Analytics.trackAction({\n                    action: \"use_spend_permission\",\n                    accountType: \"evm_server\",\n                    properties: {\n                        managed: true,\n                    },\n                });\n                return options.account.useSpendPermission({\n                    ...spendPermissionOptions,\n                    network: options.network,\n                });\n            },\n        });\n    }\n    return account;\n}\n//# sourceMappingURL=toNetworkScopedEvmServerAccount.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toNetworkScopedEvmServerAccount.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toNetworkScopedEvmSmartAccount.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toNetworkScopedEvmSmartAccount.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toNetworkScopedEvmSmartAccount: () => (/* binding */ toNetworkScopedEvmSmartAccount)\n/* harmony export */ });\n/* harmony import */ var _getBaseNodeRpcUrl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBaseNodeRpcUrl.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/getBaseNodeRpcUrl.js\");\n/* harmony import */ var _networkCapabilities_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./networkCapabilities.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/networkCapabilities.js\");\n/* harmony import */ var _actions_evm_fund_fund_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../actions/evm/fund/fund.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/fund.js\");\n/* harmony import */ var _actions_evm_fund_quoteFund_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../actions/evm/fund/quoteFund.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/quoteFund.js\");\n/* harmony import */ var _actions_evm_getUserOperation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../actions/evm/getUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/getUserOperation.js\");\n/* harmony import */ var _actions_evm_listTokenBalances_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../actions/evm/listTokenBalances.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listTokenBalances.js\");\n/* harmony import */ var _actions_evm_requestFaucet_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../actions/evm/requestFaucet.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/requestFaucet.js\");\n/* harmony import */ var _actions_evm_sendUserOperation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../actions/evm/sendUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendUserOperation.js\");\n/* harmony import */ var _actions_evm_swap_createSwapQuote_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../actions/evm/swap/createSwapQuote.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/createSwapQuote.js\");\n/* harmony import */ var _actions_evm_swap_sendSwapOperation_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../actions/evm/swap/sendSwapOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapOperation.js\");\n/* harmony import */ var _actions_evm_transfer_smartAccountTransferStrategy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../actions/evm/transfer/smartAccountTransferStrategy.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/smartAccountTransferStrategy.js\");\n/* harmony import */ var _actions_evm_transfer_transfer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../actions/evm/transfer/transfer.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/transfer.js\");\n/* harmony import */ var _actions_evm_waitForUserOperation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../actions/evm/waitForUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/waitForUserOperation.js\");\n/* harmony import */ var _actions_waitForFundOperationReceipt_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../actions/waitForFundOperationReceipt.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/waitForFundOperationReceipt.js\");\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../analytics.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a NetworkScopedEvmSmartAccount instance from an existing EvmSmartAccount and owner.\n * Use this to interact with previously deployed EvmSmartAccounts, rather than creating new ones.\n *\n * The owner must be the original owner of the evm smart account.\n *\n * @param {CdpOpenApiClientType} apiClient - The API client.\n * @param {ToNetworkScopedEvmSmartAccountOptions} options - Configuration options.\n * @param {EvmSmartAccount} options.smartAccount - The deployed evm smart account.\n * @param {EvmAccount} options.owner - The owner which signs for the smart account.\n * @param {KnownEvmNetworks} options.network - The network to scope the smart account to.\n * @returns {NetworkScopedEvmSmartAccount} A configured NetworkScopedEvmSmartAccount instance ready for user operation submission.\n */\nasync function toNetworkScopedEvmSmartAccount(apiClient, options) {\n    const paymasterUrl = await (async () => {\n        if (options.network === \"base\") {\n            return (0,_getBaseNodeRpcUrl_js__WEBPACK_IMPORTED_MODULE_0__.getBaseNodeRpcUrl)(options.network);\n        }\n        return undefined;\n    })();\n    const account = {\n        address: options.smartAccount.address,\n        network: options.network,\n        owners: [options.owner],\n        name: options.smartAccount.name,\n        type: \"evm-smart\",\n        sendUserOperation: async (userOpOptions) => {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                action: \"send_user_operation\",\n                accountType: \"evm_smart\",\n                properties: {\n                    network: options.network,\n                    managed: true,\n                },\n            });\n            return (0,_actions_evm_sendUserOperation_js__WEBPACK_IMPORTED_MODULE_2__.sendUserOperation)(apiClient, {\n                ...userOpOptions,\n                smartAccount: options.smartAccount,\n                network: options.network,\n                paymasterUrl: userOpOptions.paymasterUrl ?? paymasterUrl,\n            });\n        },\n        waitForUserOperation: async (waitOptions) => {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                action: \"wait_for_user_operation\",\n                accountType: \"evm_smart\",\n                properties: {\n                    managed: true,\n                },\n            });\n            return (0,_actions_evm_waitForUserOperation_js__WEBPACK_IMPORTED_MODULE_3__.waitForUserOperation)(apiClient, {\n                ...waitOptions,\n                smartAccountAddress: options.smartAccount.address,\n            });\n        },\n        getUserOperation: async (getOptions) => {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                action: \"get_user_operation\",\n                accountType: \"evm_smart\",\n                properties: {\n                    managed: true,\n                },\n            });\n            return (0,_actions_evm_getUserOperation_js__WEBPACK_IMPORTED_MODULE_4__.getUserOperation)(apiClient, {\n                ...getOptions,\n                smartAccount: options.smartAccount,\n            });\n        },\n    };\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_5__.isMethodSupportedOnNetwork)(\"transfer\", options.network)) {\n        Object.assign(account, {\n            transfer: async (transferOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                    action: \"transfer\",\n                    accountType: \"evm_smart\",\n                    properties: {\n                        network: options.network,\n                        managed: true,\n                    },\n                });\n                return (0,_actions_evm_transfer_transfer_js__WEBPACK_IMPORTED_MODULE_6__.transfer)(apiClient, options.smartAccount, {\n                    ...transferOptions,\n                    network: options.network,\n                    paymasterUrl: transferOptions.paymasterUrl ?? paymasterUrl,\n                }, _actions_evm_transfer_smartAccountTransferStrategy_js__WEBPACK_IMPORTED_MODULE_7__.smartAccountTransferStrategy);\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_5__.isMethodSupportedOnNetwork)(\"listTokenBalances\", options.network)) {\n        Object.assign(account, {\n            listTokenBalances: async (listOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                    action: \"list_token_balances\",\n                    accountType: \"evm_smart\",\n                    properties: {\n                        network: options.network,\n                        managed: true,\n                    },\n                });\n                return (0,_actions_evm_listTokenBalances_js__WEBPACK_IMPORTED_MODULE_8__.listTokenBalances)(apiClient, {\n                    ...listOptions,\n                    address: options.smartAccount.address,\n                    network: options.network,\n                });\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_5__.isMethodSupportedOnNetwork)(\"requestFaucet\", options.network)) {\n        Object.assign(account, {\n            requestFaucet: async (faucetOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                    action: \"request_faucet\",\n                    accountType: \"evm_smart\",\n                    properties: {\n                        network: options.network,\n                        managed: true,\n                    },\n                });\n                return (0,_actions_evm_requestFaucet_js__WEBPACK_IMPORTED_MODULE_9__.requestFaucet)(apiClient, {\n                    ...faucetOptions,\n                    address: options.smartAccount.address,\n                    network: options.network,\n                });\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_5__.isMethodSupportedOnNetwork)(\"quoteFund\", options.network)) {\n        Object.assign(account, {\n            quoteFund: async (quoteOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                    action: \"quote_fund\",\n                    accountType: \"evm_smart\",\n                    properties: {\n                        network: options.network,\n                        managed: true,\n                    },\n                });\n                return (0,_actions_evm_fund_quoteFund_js__WEBPACK_IMPORTED_MODULE_10__.quoteFund)(apiClient, {\n                    ...quoteOptions,\n                    address: options.smartAccount.address,\n                });\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_5__.isMethodSupportedOnNetwork)(\"fund\", options.network)) {\n        Object.assign(account, {\n            fund: async (fundOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                    action: \"fund\",\n                    accountType: \"evm_smart\",\n                    properties: {\n                        network: options.network,\n                        managed: true,\n                    },\n                });\n                return (0,_actions_evm_fund_fund_js__WEBPACK_IMPORTED_MODULE_11__.fund)(apiClient, {\n                    ...fundOptions,\n                    address: options.smartAccount.address,\n                });\n            },\n            waitForFundOperationReceipt: async (waitOptions) => {\n                return (0,_actions_waitForFundOperationReceipt_js__WEBPACK_IMPORTED_MODULE_12__.waitForFundOperationReceipt)(apiClient, waitOptions);\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_5__.isMethodSupportedOnNetwork)(\"quoteSwap\", options.network)) {\n        Object.assign(account, {\n            quoteSwap: async (quoteSwapOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                    action: \"quote_swap\",\n                    accountType: \"evm_smart\",\n                    properties: {\n                        network: options.network,\n                        managed: true,\n                    },\n                });\n                return (0,_actions_evm_swap_createSwapQuote_js__WEBPACK_IMPORTED_MODULE_13__.createSwapQuote)(apiClient, {\n                    ...quoteSwapOptions,\n                    taker: options.smartAccount.address,\n                    signerAddress: options.owner.address,\n                    smartAccount: options.smartAccount,\n                    network: options.network,\n                });\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_5__.isMethodSupportedOnNetwork)(\"swap\", options.network)) {\n        Object.assign(account, {\n            swap: async (swapOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                    action: \"swap\",\n                    accountType: \"evm_smart\",\n                    properties: {\n                        network: options.network,\n                        managed: true,\n                    },\n                });\n                /*\n                 * For network-scoped accounts, we need to add the network parameter\n                 * for inline swaps while preserving quote-based swaps as-is\n                 */\n                const swapOptionsWithNetwork = \"swapQuote\" in swapOptions\n                    ? swapOptions // Quote-based swap, pass through\n                    : { ...swapOptions, network: options.network }; // Inline swap, add network\n                return (0,_actions_evm_swap_sendSwapOperation_js__WEBPACK_IMPORTED_MODULE_14__.sendSwapOperation)(apiClient, {\n                    ...swapOptionsWithNetwork,\n                    smartAccount: options.smartAccount,\n                    taker: options.smartAccount.address,\n                    signerAddress: options.owner.address,\n                    paymasterUrl: swapOptions.paymasterUrl ?? paymasterUrl,\n                });\n            },\n        });\n    }\n    if ((0,_networkCapabilities_js__WEBPACK_IMPORTED_MODULE_5__.isMethodSupportedOnNetwork)(\"useSpendPermission\", options.network)) {\n        Object.assign(account, {\n            useSpendPermission: async (spendPermissionOptions) => {\n                _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n                    action: \"use_spend_permission\",\n                    accountType: \"evm_smart\",\n                    properties: {\n                        managed: true,\n                    },\n                });\n                return options.smartAccount.useSpendPermission({\n                    ...spendPermissionOptions,\n                    network: options.network,\n                });\n            },\n        });\n    }\n    return account;\n}\n//# sourceMappingURL=toNetworkScopedEvmSmartAccount.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toNetworkScopedEvmSmartAccount.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/solana/toSolanaAccount.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/accounts/solana/toSolanaAccount.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toSolanaAccount: () => (/* binding */ toSolanaAccount)\n/* harmony export */ });\n/* harmony import */ var _actions_solana_fund_fund_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../actions/solana/fund/fund.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/fund/fund.js\");\n/* harmony import */ var _actions_solana_fund_quoteFund_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../actions/solana/fund/quoteFund.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/fund/quoteFund.js\");\n/* harmony import */ var _actions_solana_requestFaucet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../actions/solana/requestFaucet.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/requestFaucet.js\");\n/* harmony import */ var _actions_solana_sendTransaction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../actions/solana/sendTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/sendTransaction.js\");\n/* harmony import */ var _actions_solana_signMessage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../actions/solana/signMessage.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/signMessage.js\");\n/* harmony import */ var _actions_solana_signTransaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../actions/solana/signTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/signTransaction.js\");\n/* harmony import */ var _actions_solana_transfer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../actions/solana/transfer.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/transfer.js\");\n/* harmony import */ var _actions_waitForFundOperationReceipt_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../actions/waitForFundOperationReceipt.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/waitForFundOperationReceipt.js\");\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../analytics.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\");\n\n\n\n\n\n\n\n\n\n/**\n * Creates a Solana account instance with actions from an existing Solana account.\n * Use this to interact with previously deployed Solana accounts, rather than creating new ones.\n *\n * @param {CdpOpenApiClientType} apiClient - The API client.\n * @param {ToSolanaAccountOptions} options - Configuration options.\n * @param {Account} options.account - The Solana account that was previously created.\n * @returns {SolanaAccount} A configured SolanaAccount instance ready for signing.\n */\nfunction toSolanaAccount(apiClient, options) {\n    const account = {\n        address: options.account.address,\n        name: options.account.name,\n        policies: options.account.policies,\n        async requestFaucet(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"request_faucet\",\n                accountType: \"solana\",\n            });\n            return (0,_actions_solana_requestFaucet_js__WEBPACK_IMPORTED_MODULE_1__.requestFaucet)(apiClient, {\n                ...options,\n                address: account.address,\n            });\n        },\n        async signMessage(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"sign_message\",\n                accountType: \"solana\",\n            });\n            return (0,_actions_solana_signMessage_js__WEBPACK_IMPORTED_MODULE_2__.signMessage)(apiClient, {\n                ...options,\n                address: account.address,\n            });\n        },\n        async signTransaction(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"sign_transaction\",\n                accountType: \"solana\",\n            });\n            return (0,_actions_solana_signTransaction_js__WEBPACK_IMPORTED_MODULE_3__.signTransaction)(apiClient, {\n                ...options,\n                address: account.address,\n            });\n        },\n        async sendTransaction(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"send_transaction\",\n                accountType: \"solana\",\n            });\n            return (0,_actions_solana_sendTransaction_js__WEBPACK_IMPORTED_MODULE_4__.sendTransaction)(apiClient, {\n                ...options,\n            });\n        },\n        async transfer(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"transfer\",\n                accountType: \"solana\",\n                properties: {\n                    network: options.network,\n                },\n            });\n            return (0,_actions_solana_transfer_js__WEBPACK_IMPORTED_MODULE_5__.transfer)(apiClient, {\n                ...options,\n                from: account.address,\n            });\n        },\n        async quoteFund(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"quote_fund\",\n                accountType: \"solana\",\n            });\n            return (0,_actions_solana_fund_quoteFund_js__WEBPACK_IMPORTED_MODULE_6__.quoteFund)(apiClient, {\n                ...options,\n                address: account.address,\n            });\n        },\n        async fund(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"fund\",\n                accountType: \"solana\",\n            });\n            return (0,_actions_solana_fund_fund_js__WEBPACK_IMPORTED_MODULE_7__.fund)(apiClient, {\n                ...options,\n                address: account.address,\n            });\n        },\n        async waitForFundOperationReceipt(options) {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n                action: \"wait_for_fund_operation_receipt\",\n                accountType: \"solana\",\n            });\n            return (0,_actions_waitForFundOperationReceipt_js__WEBPACK_IMPORTED_MODULE_8__.waitForFundOperationReceipt)(apiClient, options);\n        },\n    };\n    return account;\n}\n//# sourceMappingURL=toSolanaAccount.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY2NvdW50cy9zb2xhbmEvdG9Tb2xhbmFBY2NvdW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBeUQ7QUFDVTtBQUNHO0FBQ0k7QUFDUjtBQUNRO0FBQ2Q7QUFDZ0M7QUFDN0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQyxXQUFXLHdCQUF3QjtBQUNuQyxXQUFXLFNBQVM7QUFDcEIsYUFBYSxlQUFlO0FBQzVCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvREFBUztBQUNyQjtBQUNBO0FBQ0EsYUFBYTtBQUNiLG1CQUFtQiwrRUFBYTtBQUNoQztBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLFlBQVksb0RBQVM7QUFDckI7QUFDQTtBQUNBLGFBQWE7QUFDYixtQkFBbUIsMkVBQVc7QUFDOUI7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQSxZQUFZLG9EQUFTO0FBQ3JCO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsbUJBQW1CLG1GQUFlO0FBQ2xDO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0EsWUFBWSxvREFBUztBQUNyQjtBQUNBO0FBQ0EsYUFBYTtBQUNiLG1CQUFtQixtRkFBZTtBQUNsQztBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQSxZQUFZLG9EQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixtQkFBbUIscUVBQVE7QUFDM0I7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQSxZQUFZLG9EQUFTO0FBQ3JCO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsbUJBQW1CLDRFQUFTO0FBQzVCO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0EsWUFBWSxvREFBUztBQUNyQjtBQUNBO0FBQ0EsYUFBYTtBQUNiLG1CQUFtQixrRUFBSTtBQUN2QjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLFlBQVksb0RBQVM7QUFDckI7QUFDQTtBQUNBLGFBQWE7QUFDYixtQkFBbUIsb0dBQTJCO0FBQzlDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY2NvdW50cy9zb2xhbmEvdG9Tb2xhbmFBY2NvdW50LmpzPzBmOTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnVuZCB9IGZyb20gXCIuLi8uLi9hY3Rpb25zL3NvbGFuYS9mdW5kL2Z1bmQuanNcIjtcbmltcG9ydCB7IHF1b3RlRnVuZCB9IGZyb20gXCIuLi8uLi9hY3Rpb25zL3NvbGFuYS9mdW5kL3F1b3RlRnVuZC5qc1wiO1xuaW1wb3J0IHsgcmVxdWVzdEZhdWNldCB9IGZyb20gXCIuLi8uLi9hY3Rpb25zL3NvbGFuYS9yZXF1ZXN0RmF1Y2V0LmpzXCI7XG5pbXBvcnQgeyBzZW5kVHJhbnNhY3Rpb24gfSBmcm9tIFwiLi4vLi4vYWN0aW9ucy9zb2xhbmEvc2VuZFRyYW5zYWN0aW9uLmpzXCI7XG5pbXBvcnQgeyBzaWduTWVzc2FnZSB9IGZyb20gXCIuLi8uLi9hY3Rpb25zL3NvbGFuYS9zaWduTWVzc2FnZS5qc1wiO1xuaW1wb3J0IHsgc2lnblRyYW5zYWN0aW9uIH0gZnJvbSBcIi4uLy4uL2FjdGlvbnMvc29sYW5hL3NpZ25UcmFuc2FjdGlvbi5qc1wiO1xuaW1wb3J0IHsgdHJhbnNmZXIgfSBmcm9tIFwiLi4vLi4vYWN0aW9ucy9zb2xhbmEvdHJhbnNmZXIuanNcIjtcbmltcG9ydCB7IHdhaXRGb3JGdW5kT3BlcmF0aW9uUmVjZWlwdCwgfSBmcm9tIFwiLi4vLi4vYWN0aW9ucy93YWl0Rm9yRnVuZE9wZXJhdGlvblJlY2VpcHQuanNcIjtcbmltcG9ydCB7IEFuYWx5dGljcyB9IGZyb20gXCIuLi8uLi9hbmFseXRpY3MuanNcIjtcbi8qKlxuICogQ3JlYXRlcyBhIFNvbGFuYSBhY2NvdW50IGluc3RhbmNlIHdpdGggYWN0aW9ucyBmcm9tIGFuIGV4aXN0aW5nIFNvbGFuYSBhY2NvdW50LlxuICogVXNlIHRoaXMgdG8gaW50ZXJhY3Qgd2l0aCBwcmV2aW91c2x5IGRlcGxveWVkIFNvbGFuYSBhY2NvdW50cywgcmF0aGVyIHRoYW4gY3JlYXRpbmcgbmV3IG9uZXMuXG4gKlxuICogQHBhcmFtIHtDZHBPcGVuQXBpQ2xpZW50VHlwZX0gYXBpQ2xpZW50IC0gVGhlIEFQSSBjbGllbnQuXG4gKiBAcGFyYW0ge1RvU29sYW5hQWNjb3VudE9wdGlvbnN9IG9wdGlvbnMgLSBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0FjY291bnR9IG9wdGlvbnMuYWNjb3VudCAtIFRoZSBTb2xhbmEgYWNjb3VudCB0aGF0IHdhcyBwcmV2aW91c2x5IGNyZWF0ZWQuXG4gKiBAcmV0dXJucyB7U29sYW5hQWNjb3VudH0gQSBjb25maWd1cmVkIFNvbGFuYUFjY291bnQgaW5zdGFuY2UgcmVhZHkgZm9yIHNpZ25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1NvbGFuYUFjY291bnQoYXBpQ2xpZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgYWNjb3VudCA9IHtcbiAgICAgICAgYWRkcmVzczogb3B0aW9ucy5hY2NvdW50LmFkZHJlc3MsXG4gICAgICAgIG5hbWU6IG9wdGlvbnMuYWNjb3VudC5uYW1lLFxuICAgICAgICBwb2xpY2llczogb3B0aW9ucy5hY2NvdW50LnBvbGljaWVzLFxuICAgICAgICBhc3luYyByZXF1ZXN0RmF1Y2V0KG9wdGlvbnMpIHtcbiAgICAgICAgICAgIEFuYWx5dGljcy50cmFja0FjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlcXVlc3RfZmF1Y2V0XCIsXG4gICAgICAgICAgICAgICAgYWNjb3VudFR5cGU6IFwic29sYW5hXCIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0RmF1Y2V0KGFwaUNsaWVudCwge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgYWRkcmVzczogYWNjb3VudC5hZGRyZXNzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHNpZ25NZXNzYWdlKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIEFuYWx5dGljcy50cmFja0FjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInNpZ25fbWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgIGFjY291bnRUeXBlOiBcInNvbGFuYVwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc2lnbk1lc3NhZ2UoYXBpQ2xpZW50LCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiBhY2NvdW50LmFkZHJlc3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgc2lnblRyYW5zYWN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIEFuYWx5dGljcy50cmFja0FjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInNpZ25fdHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgICAgICBhY2NvdW50VHlwZTogXCJzb2xhbmFcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHNpZ25UcmFuc2FjdGlvbihhcGlDbGllbnQsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIGFkZHJlc3M6IGFjY291bnQuYWRkcmVzcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBzZW5kVHJhbnNhY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgQW5hbHl0aWNzLnRyYWNrQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwic2VuZF90cmFuc2FjdGlvblwiLFxuICAgICAgICAgICAgICAgIGFjY291bnRUeXBlOiBcInNvbGFuYVwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc2VuZFRyYW5zYWN0aW9uKGFwaUNsaWVudCwge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgdHJhbnNmZXIob3B0aW9ucykge1xuICAgICAgICAgICAgQW5hbHl0aWNzLnRyYWNrQWN0aW9uKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwidHJhbnNmZXJcIixcbiAgICAgICAgICAgICAgICBhY2NvdW50VHlwZTogXCJzb2xhbmFcIixcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcms6IG9wdGlvbnMubmV0d29yayxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmZXIoYXBpQ2xpZW50LCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBmcm9tOiBhY2NvdW50LmFkZHJlc3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgcXVvdGVGdW5kKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIEFuYWx5dGljcy50cmFja0FjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInF1b3RlX2Z1bmRcIixcbiAgICAgICAgICAgICAgICBhY2NvdW50VHlwZTogXCJzb2xhbmFcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHF1b3RlRnVuZChhcGlDbGllbnQsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIGFkZHJlc3M6IGFjY291bnQuYWRkcmVzcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBmdW5kKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIEFuYWx5dGljcy50cmFja0FjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImZ1bmRcIixcbiAgICAgICAgICAgICAgICBhY2NvdW50VHlwZTogXCJzb2xhbmFcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmQoYXBpQ2xpZW50LCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiBhY2NvdW50LmFkZHJlc3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgd2FpdEZvckZ1bmRPcGVyYXRpb25SZWNlaXB0KG9wdGlvbnMpIHtcbiAgICAgICAgICAgIEFuYWx5dGljcy50cmFja0FjdGlvbih7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcIndhaXRfZm9yX2Z1bmRfb3BlcmF0aW9uX3JlY2VpcHRcIixcbiAgICAgICAgICAgICAgICBhY2NvdW50VHlwZTogXCJzb2xhbmFcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHdhaXRGb3JGdW5kT3BlcmF0aW9uUmVjZWlwdChhcGlDbGllbnQsIG9wdGlvbnMpO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGFjY291bnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b1NvbGFuYUFjY291bnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/solana/toSolanaAccount.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/Quote.js":
/*!**************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/Quote.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EvmQuote: () => (/* binding */ EvmQuote),\n/* harmony export */   SolanaQuote: () => (/* binding */ SolanaQuote)\n/* harmony export */ });\n/**\n * Base class representing a funding quote that can be executed.\n */\nclass BaseQuote {\n    /** Quote for the transfer. */\n    quoteId;\n    /** The amount in fiat currency. */\n    fiatAmount;\n    /** The fiat currency. */\n    fiatCurrency;\n    /** The amount in the token to transfer. */\n    tokenAmount;\n    /** The token to transfer. */\n    token;\n    /** Fees in the token to transfer. */\n    fees;\n    apiClient;\n    /**\n     * Creates a new BaseQuote instance.\n     *\n     * @param apiClient - The API client.\n     * @param quoteId - The quote ID.\n     * @param fiatAmount - The amount in fiat currency.\n     * @param fiatCurrency - The fiat currency.\n     * @param tokenAmount - The amount in the token to transfer.\n     * @param token - The token to transfer.\n     * @param fees - Fees for the transfer.\n     */\n    constructor(apiClient, quoteId, fiatAmount, fiatCurrency, tokenAmount, token, fees) {\n        this.apiClient = apiClient;\n        this.quoteId = quoteId;\n        this.fiatAmount = fiatAmount;\n        this.fiatCurrency = fiatCurrency;\n        this.tokenAmount = tokenAmount;\n        this.token = token;\n        this.fees = fees;\n    }\n    /**\n     * Executes the quote to perform the actual fund transfer.\n     *\n     * @returns A promise that resolves to the result of the executed quote.\n     */\n    async execute() {\n        const transfer = await this.apiClient.executePaymentTransferQuote(this.quoteId);\n        return {\n            id: transfer.id,\n            network: transfer.target.network,\n            targetAmount: transfer.targetAmount,\n            targetCurrency: transfer.targetCurrency,\n            status: transfer.status,\n            transactionHash: transfer.transactionHash,\n        };\n    }\n}\n/**\n * A class representing an EVM funding quote that can be executed.\n */\nclass EvmQuote extends BaseQuote {\n    /** Network to transfer the funds to (EVM networks). */\n    network;\n    /**\n     * Creates a new EvmQuote instance.\n     *\n     * @param apiClient - The API client.\n     * @param quoteId - The quote ID.\n     * @param network - The EVM network to transfer funds to.\n     * @param fiatAmount - The amount in fiat currency.\n     * @param fiatCurrency - The fiat currency.\n     * @param tokenAmount - The amount in the token to transfer.\n     * @param token - The token to transfer.\n     * @param fees - Fees for the transfer.\n     */\n    constructor(apiClient, quoteId, network, fiatAmount, fiatCurrency, tokenAmount, token, fees) {\n        super(apiClient, quoteId, fiatAmount, fiatCurrency, tokenAmount, token, fees);\n        this.network = network;\n    }\n}\n/**\n * A class representing a Solana funding quote that can be executed.\n */\nclass SolanaQuote extends BaseQuote {\n    /** Network to transfer the funds to (Solana). */\n    network;\n    /**\n     * Creates a new SolanaQuote instance.\n     *\n     * @param apiClient - The API client.\n     * @param quoteId - The quote ID.\n     * @param network - The Solana network to transfer funds to.\n     * @param fiatAmount - The amount in fiat currency.\n     * @param fiatCurrency - The fiat currency.\n     * @param tokenAmount - The amount in the token to transfer.\n     * @param token - The token to transfer.\n     * @param fees - Fees for the transfer.\n     */\n    constructor(apiClient, quoteId, network, fiatAmount, fiatCurrency, tokenAmount, token, fees) {\n        super(apiClient, quoteId, fiatAmount, fiatCurrency, tokenAmount, token, fees);\n        this.network = network;\n    }\n}\n//# sourceMappingURL=Quote.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL1F1b3RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL1F1b3RlLmpzP2ZlMGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCYXNlIGNsYXNzIHJlcHJlc2VudGluZyBhIGZ1bmRpbmcgcXVvdGUgdGhhdCBjYW4gYmUgZXhlY3V0ZWQuXG4gKi9cbmNsYXNzIEJhc2VRdW90ZSB7XG4gICAgLyoqIFF1b3RlIGZvciB0aGUgdHJhbnNmZXIuICovXG4gICAgcXVvdGVJZDtcbiAgICAvKiogVGhlIGFtb3VudCBpbiBmaWF0IGN1cnJlbmN5LiAqL1xuICAgIGZpYXRBbW91bnQ7XG4gICAgLyoqIFRoZSBmaWF0IGN1cnJlbmN5LiAqL1xuICAgIGZpYXRDdXJyZW5jeTtcbiAgICAvKiogVGhlIGFtb3VudCBpbiB0aGUgdG9rZW4gdG8gdHJhbnNmZXIuICovXG4gICAgdG9rZW5BbW91bnQ7XG4gICAgLyoqIFRoZSB0b2tlbiB0byB0cmFuc2Zlci4gKi9cbiAgICB0b2tlbjtcbiAgICAvKiogRmVlcyBpbiB0aGUgdG9rZW4gdG8gdHJhbnNmZXIuICovXG4gICAgZmVlcztcbiAgICBhcGlDbGllbnQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBCYXNlUXVvdGUgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXBpQ2xpZW50IC0gVGhlIEFQSSBjbGllbnQuXG4gICAgICogQHBhcmFtIHF1b3RlSWQgLSBUaGUgcXVvdGUgSUQuXG4gICAgICogQHBhcmFtIGZpYXRBbW91bnQgLSBUaGUgYW1vdW50IGluIGZpYXQgY3VycmVuY3kuXG4gICAgICogQHBhcmFtIGZpYXRDdXJyZW5jeSAtIFRoZSBmaWF0IGN1cnJlbmN5LlxuICAgICAqIEBwYXJhbSB0b2tlbkFtb3VudCAtIFRoZSBhbW91bnQgaW4gdGhlIHRva2VuIHRvIHRyYW5zZmVyLlxuICAgICAqIEBwYXJhbSB0b2tlbiAtIFRoZSB0b2tlbiB0byB0cmFuc2Zlci5cbiAgICAgKiBAcGFyYW0gZmVlcyAtIEZlZXMgZm9yIHRoZSB0cmFuc2Zlci5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhcGlDbGllbnQsIHF1b3RlSWQsIGZpYXRBbW91bnQsIGZpYXRDdXJyZW5jeSwgdG9rZW5BbW91bnQsIHRva2VuLCBmZWVzKSB7XG4gICAgICAgIHRoaXMuYXBpQ2xpZW50ID0gYXBpQ2xpZW50O1xuICAgICAgICB0aGlzLnF1b3RlSWQgPSBxdW90ZUlkO1xuICAgICAgICB0aGlzLmZpYXRBbW91bnQgPSBmaWF0QW1vdW50O1xuICAgICAgICB0aGlzLmZpYXRDdXJyZW5jeSA9IGZpYXRDdXJyZW5jeTtcbiAgICAgICAgdGhpcy50b2tlbkFtb3VudCA9IHRva2VuQW1vdW50O1xuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgICAgIHRoaXMuZmVlcyA9IGZlZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBxdW90ZSB0byBwZXJmb3JtIHRoZSBhY3R1YWwgZnVuZCB0cmFuc2Zlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSByZXN1bHQgb2YgdGhlIGV4ZWN1dGVkIHF1b3RlLlxuICAgICAqL1xuICAgIGFzeW5jIGV4ZWN1dGUoKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zZmVyID0gYXdhaXQgdGhpcy5hcGlDbGllbnQuZXhlY3V0ZVBheW1lbnRUcmFuc2ZlclF1b3RlKHRoaXMucXVvdGVJZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdHJhbnNmZXIuaWQsXG4gICAgICAgICAgICBuZXR3b3JrOiB0cmFuc2Zlci50YXJnZXQubmV0d29yayxcbiAgICAgICAgICAgIHRhcmdldEFtb3VudDogdHJhbnNmZXIudGFyZ2V0QW1vdW50LFxuICAgICAgICAgICAgdGFyZ2V0Q3VycmVuY3k6IHRyYW5zZmVyLnRhcmdldEN1cnJlbmN5LFxuICAgICAgICAgICAgc3RhdHVzOiB0cmFuc2Zlci5zdGF0dXMsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2g6IHRyYW5zZmVyLnRyYW5zYWN0aW9uSGFzaCxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50aW5nIGFuIEVWTSBmdW5kaW5nIHF1b3RlIHRoYXQgY2FuIGJlIGV4ZWN1dGVkLlxuICovXG5leHBvcnQgY2xhc3MgRXZtUXVvdGUgZXh0ZW5kcyBCYXNlUXVvdGUge1xuICAgIC8qKiBOZXR3b3JrIHRvIHRyYW5zZmVyIHRoZSBmdW5kcyB0byAoRVZNIG5ldHdvcmtzKS4gKi9cbiAgICBuZXR3b3JrO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRXZtUXVvdGUgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXBpQ2xpZW50IC0gVGhlIEFQSSBjbGllbnQuXG4gICAgICogQHBhcmFtIHF1b3RlSWQgLSBUaGUgcXVvdGUgSUQuXG4gICAgICogQHBhcmFtIG5ldHdvcmsgLSBUaGUgRVZNIG5ldHdvcmsgdG8gdHJhbnNmZXIgZnVuZHMgdG8uXG4gICAgICogQHBhcmFtIGZpYXRBbW91bnQgLSBUaGUgYW1vdW50IGluIGZpYXQgY3VycmVuY3kuXG4gICAgICogQHBhcmFtIGZpYXRDdXJyZW5jeSAtIFRoZSBmaWF0IGN1cnJlbmN5LlxuICAgICAqIEBwYXJhbSB0b2tlbkFtb3VudCAtIFRoZSBhbW91bnQgaW4gdGhlIHRva2VuIHRvIHRyYW5zZmVyLlxuICAgICAqIEBwYXJhbSB0b2tlbiAtIFRoZSB0b2tlbiB0byB0cmFuc2Zlci5cbiAgICAgKiBAcGFyYW0gZmVlcyAtIEZlZXMgZm9yIHRoZSB0cmFuc2Zlci5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhcGlDbGllbnQsIHF1b3RlSWQsIG5ldHdvcmssIGZpYXRBbW91bnQsIGZpYXRDdXJyZW5jeSwgdG9rZW5BbW91bnQsIHRva2VuLCBmZWVzKSB7XG4gICAgICAgIHN1cGVyKGFwaUNsaWVudCwgcXVvdGVJZCwgZmlhdEFtb3VudCwgZmlhdEN1cnJlbmN5LCB0b2tlbkFtb3VudCwgdG9rZW4sIGZlZXMpO1xuICAgICAgICB0aGlzLm5ldHdvcmsgPSBuZXR3b3JrO1xuICAgIH1cbn1cbi8qKlxuICogQSBjbGFzcyByZXByZXNlbnRpbmcgYSBTb2xhbmEgZnVuZGluZyBxdW90ZSB0aGF0IGNhbiBiZSBleGVjdXRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNvbGFuYVF1b3RlIGV4dGVuZHMgQmFzZVF1b3RlIHtcbiAgICAvKiogTmV0d29yayB0byB0cmFuc2ZlciB0aGUgZnVuZHMgdG8gKFNvbGFuYSkuICovXG4gICAgbmV0d29yaztcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFNvbGFuYVF1b3RlIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFwaUNsaWVudCAtIFRoZSBBUEkgY2xpZW50LlxuICAgICAqIEBwYXJhbSBxdW90ZUlkIC0gVGhlIHF1b3RlIElELlxuICAgICAqIEBwYXJhbSBuZXR3b3JrIC0gVGhlIFNvbGFuYSBuZXR3b3JrIHRvIHRyYW5zZmVyIGZ1bmRzIHRvLlxuICAgICAqIEBwYXJhbSBmaWF0QW1vdW50IC0gVGhlIGFtb3VudCBpbiBmaWF0IGN1cnJlbmN5LlxuICAgICAqIEBwYXJhbSBmaWF0Q3VycmVuY3kgLSBUaGUgZmlhdCBjdXJyZW5jeS5cbiAgICAgKiBAcGFyYW0gdG9rZW5BbW91bnQgLSBUaGUgYW1vdW50IGluIHRoZSB0b2tlbiB0byB0cmFuc2Zlci5cbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBUaGUgdG9rZW4gdG8gdHJhbnNmZXIuXG4gICAgICogQHBhcmFtIGZlZXMgLSBGZWVzIGZvciB0aGUgdHJhbnNmZXIuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXBpQ2xpZW50LCBxdW90ZUlkLCBuZXR3b3JrLCBmaWF0QW1vdW50LCBmaWF0Q3VycmVuY3ksIHRva2VuQW1vdW50LCB0b2tlbiwgZmVlcykge1xuICAgICAgICBzdXBlcihhcGlDbGllbnQsIHF1b3RlSWQsIGZpYXRBbW91bnQsIGZpYXRDdXJyZW5jeSwgdG9rZW5BbW91bnQsIHRva2VuLCBmZWVzKTtcbiAgICAgICAgdGhpcy5uZXR3b3JrID0gbmV0d29yaztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdW90ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/Quote.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/fund.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/fund.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fund: () => (/* binding */ fund)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/unit/formatUnits.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js\");\n\n\n\n/**\n * Funds an EVM account.\n *\n * @deprecated This method will be removed in a future version. Consider using our Onramp API instead. See https://docs.cdp.coinbase.com/api-reference/v2/rest-api/onramp/create-an-onramp-order.\n * @param apiClient - The API client.\n * @param options - The options for funding an EVM account.\n *\n * @returns A promise that resolves to the fund operation result.\n */\nasync function fund(apiClient, options) {\n    if (options.token !== \"eth\" && options.token !== \"usdc\") {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.UserInputValidationError(\"Invalid token, must be eth or usdc\");\n    }\n    const decimals = options.token === \"eth\" ? 18 : 6;\n    const amount = (0,viem__WEBPACK_IMPORTED_MODULE_1__.formatUnits)(options.amount, decimals);\n    const paymentMethods = await apiClient.getPaymentMethods();\n    const cardPaymentMethod = paymentMethods.find(method => method.type === \"card\" && method.actions.includes(\"source\"));\n    if (!cardPaymentMethod) {\n        throw new Error(\"No card found to fund account\");\n    }\n    const response = await apiClient.createPaymentTransferQuote({\n        sourceType: _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__.CreatePaymentTransferQuoteBodySourceType.payment_method,\n        source: {\n            id: cardPaymentMethod.id,\n        },\n        targetType: _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__.CreatePaymentTransferQuoteBodyTargetType.crypto_rail,\n        target: {\n            currency: options.token,\n            network: options.network,\n            address: options.address,\n        },\n        amount,\n        currency: options.token,\n        execute: true,\n    });\n    return {\n        id: response.transfer.id,\n        network: response.transfer.target.network,\n        status: response.transfer.status,\n        targetAmount: response.transfer.targetAmount,\n        targetCurrency: response.transfer.targetCurrency,\n        transactionHash: response.transfer.transactionHash,\n    };\n}\n//# sourceMappingURL=fund.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9mdW5kL2Z1bmQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtQztBQUMyQjtBQUN5RTtBQUN2STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esa0JBQWtCLGdFQUF3QjtBQUMxQztBQUNBO0FBQ0EsbUJBQW1CLGlEQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4RkFBd0M7QUFDNUQ7QUFDQTtBQUNBLFNBQVM7QUFDVCxvQkFBb0IsOEZBQXdDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9mdW5kL2Z1bmQuanM/MTUzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JtYXRVbml0cyB9IGZyb20gXCJ2aWVtXCI7XG5pbXBvcnQgeyBVc2VySW5wdXRWYWxpZGF0aW9uRXJyb3IgfSBmcm9tIFwiLi4vLi4vLi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyBDcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZUJvZHlTb3VyY2VUeXBlLCBDcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZUJvZHlUYXJnZXRUeXBlLCB9IGZyb20gXCIuLi8uLi8uLi9vcGVuYXBpLWNsaWVudC9pbmRleC5qc1wiO1xuLyoqXG4gKiBGdW5kcyBhbiBFVk0gYWNjb3VudC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIG1ldGhvZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi4gQ29uc2lkZXIgdXNpbmcgb3VyIE9ucmFtcCBBUEkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZG9jcy5jZHAuY29pbmJhc2UuY29tL2FwaS1yZWZlcmVuY2UvdjIvcmVzdC1hcGkvb25yYW1wL2NyZWF0ZS1hbi1vbnJhbXAtb3JkZXIuXG4gKiBAcGFyYW0gYXBpQ2xpZW50IC0gVGhlIEFQSSBjbGllbnQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBmdW5kaW5nIGFuIEVWTSBhY2NvdW50LlxuICpcbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBmdW5kIG9wZXJhdGlvbiByZXN1bHQuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmdW5kKGFwaUNsaWVudCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnRva2VuICE9PSBcImV0aFwiICYmIG9wdGlvbnMudG9rZW4gIT09IFwidXNkY1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBVc2VySW5wdXRWYWxpZGF0aW9uRXJyb3IoXCJJbnZhbGlkIHRva2VuLCBtdXN0IGJlIGV0aCBvciB1c2RjXCIpO1xuICAgIH1cbiAgICBjb25zdCBkZWNpbWFscyA9IG9wdGlvbnMudG9rZW4gPT09IFwiZXRoXCIgPyAxOCA6IDY7XG4gICAgY29uc3QgYW1vdW50ID0gZm9ybWF0VW5pdHMob3B0aW9ucy5hbW91bnQsIGRlY2ltYWxzKTtcbiAgICBjb25zdCBwYXltZW50TWV0aG9kcyA9IGF3YWl0IGFwaUNsaWVudC5nZXRQYXltZW50TWV0aG9kcygpO1xuICAgIGNvbnN0IGNhcmRQYXltZW50TWV0aG9kID0gcGF5bWVudE1ldGhvZHMuZmluZChtZXRob2QgPT4gbWV0aG9kLnR5cGUgPT09IFwiY2FyZFwiICYmIG1ldGhvZC5hY3Rpb25zLmluY2x1ZGVzKFwic291cmNlXCIpKTtcbiAgICBpZiAoIWNhcmRQYXltZW50TWV0aG9kKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGNhcmQgZm91bmQgdG8gZnVuZCBhY2NvdW50XCIpO1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5jcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZSh7XG4gICAgICAgIHNvdXJjZVR5cGU6IENyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlQm9keVNvdXJjZVR5cGUucGF5bWVudF9tZXRob2QsXG4gICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgaWQ6IGNhcmRQYXltZW50TWV0aG9kLmlkLFxuICAgICAgICB9LFxuICAgICAgICB0YXJnZXRUeXBlOiBDcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZUJvZHlUYXJnZXRUeXBlLmNyeXB0b19yYWlsLFxuICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICAgIGN1cnJlbmN5OiBvcHRpb25zLnRva2VuLFxuICAgICAgICAgICAgbmV0d29yazogb3B0aW9ucy5uZXR3b3JrLFxuICAgICAgICAgICAgYWRkcmVzczogb3B0aW9ucy5hZGRyZXNzLFxuICAgICAgICB9LFxuICAgICAgICBhbW91bnQsXG4gICAgICAgIGN1cnJlbmN5OiBvcHRpb25zLnRva2VuLFxuICAgICAgICBleGVjdXRlOiB0cnVlLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiByZXNwb25zZS50cmFuc2Zlci5pZCxcbiAgICAgICAgbmV0d29yazogcmVzcG9uc2UudHJhbnNmZXIudGFyZ2V0Lm5ldHdvcmssXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2UudHJhbnNmZXIuc3RhdHVzLFxuICAgICAgICB0YXJnZXRBbW91bnQ6IHJlc3BvbnNlLnRyYW5zZmVyLnRhcmdldEFtb3VudCxcbiAgICAgICAgdGFyZ2V0Q3VycmVuY3k6IHJlc3BvbnNlLnRyYW5zZmVyLnRhcmdldEN1cnJlbmN5LFxuICAgICAgICB0cmFuc2FjdGlvbkhhc2g6IHJlc3BvbnNlLnRyYW5zZmVyLnRyYW5zYWN0aW9uSGFzaCxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnVuZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/fund.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/quoteFund.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/quoteFund.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   quoteFund: () => (/* binding */ quoteFund)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/unit/formatUnits.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js\");\n/* harmony import */ var _Quote_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Quote.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/Quote.js\");\n\n\n\n\n/**\n * Gets a quote to fund an EVM account.\n *\n * @deprecated This method will be removed in a future version. Consider using our Onramp API instead. See https://docs.cdp.coinbase.com/api-reference/v2/rest-api/onramp/create-an-onramp-order.\n * @param apiClient - The API client.\n * @param options - The options for getting a quote to fund an EVM account.\n *\n * @returns A promise that resolves to the quote.\n */\nasync function quoteFund(apiClient, options) {\n    if (options.token !== \"eth\" && options.token !== \"usdc\") {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.UserInputValidationError(\"Invalid token, must be eth or usdc\");\n    }\n    const decimals = options.token === \"eth\" ? 18 : 6;\n    const amount = (0,viem__WEBPACK_IMPORTED_MODULE_1__.formatUnits)(options.amount, decimals);\n    const paymentMethods = await apiClient.getPaymentMethods();\n    const cardPaymentMethod = paymentMethods.find(method => method.type === \"card\" && method.actions.includes(\"source\"));\n    if (!cardPaymentMethod) {\n        throw new Error(\"No card found to fund account\");\n    }\n    const response = await apiClient.createPaymentTransferQuote({\n        sourceType: _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__.CreatePaymentTransferQuoteBodySourceType.payment_method,\n        source: {\n            id: cardPaymentMethod.id,\n        },\n        targetType: _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__.CreatePaymentTransferQuoteBodyTargetType.crypto_rail,\n        target: {\n            currency: options.token,\n            network: options.network,\n            address: options.address,\n        },\n        amount,\n        currency: options.token,\n    });\n    return new _Quote_js__WEBPACK_IMPORTED_MODULE_3__.EvmQuote(apiClient, response.transfer.id, options.network, response.transfer.sourceAmount, response.transfer.sourceCurrency, response.transfer.targetAmount, response.transfer.targetCurrency, response.transfer.fees.map(fee => ({\n        type: fee.type,\n        amount: fee.amount,\n        currency: fee.currency,\n    })));\n}\n//# sourceMappingURL=quoteFund.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9mdW5kL3F1b3RlRnVuZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtQztBQUMyQjtBQUN5RTtBQUM3RjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esa0JBQWtCLGdFQUF3QjtBQUMxQztBQUNBO0FBQ0EsbUJBQW1CLGlEQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4RkFBd0M7QUFDNUQ7QUFDQTtBQUNBLFNBQVM7QUFDVCxvQkFBb0IsOEZBQXdDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsZUFBZSwrQ0FBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9mdW5kL3F1b3RlRnVuZC5qcz82MDQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdFVuaXRzIH0gZnJvbSBcInZpZW1cIjtcbmltcG9ydCB7IFVzZXJJbnB1dFZhbGlkYXRpb25FcnJvciB9IGZyb20gXCIuLi8uLi8uLi9lcnJvcnMuanNcIjtcbmltcG9ydCB7IENyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlQm9keVNvdXJjZVR5cGUsIENyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlQm9keVRhcmdldFR5cGUsIH0gZnJvbSBcIi4uLy4uLy4uL29wZW5hcGktY2xpZW50L2luZGV4LmpzXCI7XG5pbXBvcnQgeyBFdm1RdW90ZSB9IGZyb20gXCIuLi8uLi9RdW90ZS5qc1wiO1xuLyoqXG4gKiBHZXRzIGEgcXVvdGUgdG8gZnVuZCBhbiBFVk0gYWNjb3VudC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIG1ldGhvZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi4gQ29uc2lkZXIgdXNpbmcgb3VyIE9ucmFtcCBBUEkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZG9jcy5jZHAuY29pbmJhc2UuY29tL2FwaS1yZWZlcmVuY2UvdjIvcmVzdC1hcGkvb25yYW1wL2NyZWF0ZS1hbi1vbnJhbXAtb3JkZXIuXG4gKiBAcGFyYW0gYXBpQ2xpZW50IC0gVGhlIEFQSSBjbGllbnQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBnZXR0aW5nIGEgcXVvdGUgdG8gZnVuZCBhbiBFVk0gYWNjb3VudC5cbiAqXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgcXVvdGUuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBxdW90ZUZ1bmQoYXBpQ2xpZW50LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMudG9rZW4gIT09IFwiZXRoXCIgJiYgb3B0aW9ucy50b2tlbiAhPT0gXCJ1c2RjXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJJbnB1dFZhbGlkYXRpb25FcnJvcihcIkludmFsaWQgdG9rZW4sIG11c3QgYmUgZXRoIG9yIHVzZGNcIik7XG4gICAgfVxuICAgIGNvbnN0IGRlY2ltYWxzID0gb3B0aW9ucy50b2tlbiA9PT0gXCJldGhcIiA/IDE4IDogNjtcbiAgICBjb25zdCBhbW91bnQgPSBmb3JtYXRVbml0cyhvcHRpb25zLmFtb3VudCwgZGVjaW1hbHMpO1xuICAgIGNvbnN0IHBheW1lbnRNZXRob2RzID0gYXdhaXQgYXBpQ2xpZW50LmdldFBheW1lbnRNZXRob2RzKCk7XG4gICAgY29uc3QgY2FyZFBheW1lbnRNZXRob2QgPSBwYXltZW50TWV0aG9kcy5maW5kKG1ldGhvZCA9PiBtZXRob2QudHlwZSA9PT0gXCJjYXJkXCIgJiYgbWV0aG9kLmFjdGlvbnMuaW5jbHVkZXMoXCJzb3VyY2VcIikpO1xuICAgIGlmICghY2FyZFBheW1lbnRNZXRob2QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gY2FyZCBmb3VuZCB0byBmdW5kIGFjY291bnRcIik7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LmNyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlKHtcbiAgICAgICAgc291cmNlVHlwZTogQ3JlYXRlUGF5bWVudFRyYW5zZmVyUXVvdGVCb2R5U291cmNlVHlwZS5wYXltZW50X21ldGhvZCxcbiAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgICBpZDogY2FyZFBheW1lbnRNZXRob2QuaWQsXG4gICAgICAgIH0sXG4gICAgICAgIHRhcmdldFR5cGU6IENyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlQm9keVRhcmdldFR5cGUuY3J5cHRvX3JhaWwsXG4gICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgY3VycmVuY3k6IG9wdGlvbnMudG9rZW4sXG4gICAgICAgICAgICBuZXR3b3JrOiBvcHRpb25zLm5ldHdvcmssXG4gICAgICAgICAgICBhZGRyZXNzOiBvcHRpb25zLmFkZHJlc3MsXG4gICAgICAgIH0sXG4gICAgICAgIGFtb3VudCxcbiAgICAgICAgY3VycmVuY3k6IG9wdGlvbnMudG9rZW4sXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBFdm1RdW90ZShhcGlDbGllbnQsIHJlc3BvbnNlLnRyYW5zZmVyLmlkLCBvcHRpb25zLm5ldHdvcmssIHJlc3BvbnNlLnRyYW5zZmVyLnNvdXJjZUFtb3VudCwgcmVzcG9uc2UudHJhbnNmZXIuc291cmNlQ3VycmVuY3ksIHJlc3BvbnNlLnRyYW5zZmVyLnRhcmdldEFtb3VudCwgcmVzcG9uc2UudHJhbnNmZXIudGFyZ2V0Q3VycmVuY3ksIHJlc3BvbnNlLnRyYW5zZmVyLmZlZXMubWFwKGZlZSA9PiAoe1xuICAgICAgICB0eXBlOiBmZWUudHlwZSxcbiAgICAgICAgYW1vdW50OiBmZWUuYW1vdW50LFxuICAgICAgICBjdXJyZW5jeTogZmVlLmN1cnJlbmN5LFxuICAgIH0pKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdW90ZUZ1bmQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/fund/quoteFund.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/getUserOperation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/getUserOperation.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUserOperation: () => (/* binding */ getUserOperation)\n/* harmony export */ });\n/**\n * Gets a user operation for a smart account by user operation hash.\n *\n * @param {CdpOpenApiClientType} client - The client to use to get the user operation.\n * @param {GetUserOperationOptions} options - Parameters for getting the user operation.\n * @param {SmartAccount} options.smartAccount - The smart account signing the user operation.\n * @param {string} options.userOpHash - The user operation hash.\n *\n * @returns A promise that resolves to the user operation.\n *\n * @example\n * ```ts\n * const userOp = await getUserOperation(client, {\n *   smartAccount,\n *   userOpHash: \"0x1234567890123456789012345678901234567890123456789012345678901234\",\n * });\n * ```\n */\nasync function getUserOperation(client, options) {\n    const address = typeof options.smartAccount === \"string\" ? options.smartAccount : options.smartAccount.address;\n    const userOp = await client.getUserOperation(address, options.userOpHash);\n    return {\n        calls: userOp.calls.map(call => ({\n            to: call.to,\n            value: BigInt(call.value),\n            data: call.data,\n        })),\n        network: userOp.network,\n        status: userOp.status,\n        transactionHash: userOp.transactionHash,\n        userOpHash: userOp.userOpHash,\n        receipts: userOp.receipts,\n    };\n}\n//# sourceMappingURL=getUserOperation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9nZXRVc2VyT3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQyxXQUFXLHlCQUF5QjtBQUNwQyxXQUFXLGNBQWM7QUFDekIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9nZXRVc2VyT3BlcmF0aW9uLmpzP2I0MmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXRzIGEgdXNlciBvcGVyYXRpb24gZm9yIGEgc21hcnQgYWNjb3VudCBieSB1c2VyIG9wZXJhdGlvbiBoYXNoLlxuICpcbiAqIEBwYXJhbSB7Q2RwT3BlbkFwaUNsaWVudFR5cGV9IGNsaWVudCAtIFRoZSBjbGllbnQgdG8gdXNlIHRvIGdldCB0aGUgdXNlciBvcGVyYXRpb24uXG4gKiBAcGFyYW0ge0dldFVzZXJPcGVyYXRpb25PcHRpb25zfSBvcHRpb25zIC0gUGFyYW1ldGVycyBmb3IgZ2V0dGluZyB0aGUgdXNlciBvcGVyYXRpb24uXG4gKiBAcGFyYW0ge1NtYXJ0QWNjb3VudH0gb3B0aW9ucy5zbWFydEFjY291bnQgLSBUaGUgc21hcnQgYWNjb3VudCBzaWduaW5nIHRoZSB1c2VyIG9wZXJhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnVzZXJPcEhhc2ggLSBUaGUgdXNlciBvcGVyYXRpb24gaGFzaC5cbiAqXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgdXNlciBvcGVyYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCB1c2VyT3AgPSBhd2FpdCBnZXRVc2VyT3BlcmF0aW9uKGNsaWVudCwge1xuICogICBzbWFydEFjY291bnQsXG4gKiAgIHVzZXJPcEhhc2g6IFwiMHgxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0XCIsXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlck9wZXJhdGlvbihjbGllbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBhZGRyZXNzID0gdHlwZW9mIG9wdGlvbnMuc21hcnRBY2NvdW50ID09PSBcInN0cmluZ1wiID8gb3B0aW9ucy5zbWFydEFjY291bnQgOiBvcHRpb25zLnNtYXJ0QWNjb3VudC5hZGRyZXNzO1xuICAgIGNvbnN0IHVzZXJPcCA9IGF3YWl0IGNsaWVudC5nZXRVc2VyT3BlcmF0aW9uKGFkZHJlc3MsIG9wdGlvbnMudXNlck9wSGFzaCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2FsbHM6IHVzZXJPcC5jYWxscy5tYXAoY2FsbCA9PiAoe1xuICAgICAgICAgICAgdG86IGNhbGwudG8sXG4gICAgICAgICAgICB2YWx1ZTogQmlnSW50KGNhbGwudmFsdWUpLFxuICAgICAgICAgICAgZGF0YTogY2FsbC5kYXRhLFxuICAgICAgICB9KSksXG4gICAgICAgIG5ldHdvcms6IHVzZXJPcC5uZXR3b3JrLFxuICAgICAgICBzdGF0dXM6IHVzZXJPcC5zdGF0dXMsXG4gICAgICAgIHRyYW5zYWN0aW9uSGFzaDogdXNlck9wLnRyYW5zYWN0aW9uSGFzaCxcbiAgICAgICAgdXNlck9wSGFzaDogdXNlck9wLnVzZXJPcEhhc2gsXG4gICAgICAgIHJlY2VpcHRzOiB1c2VyT3AucmVjZWlwdHMsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFVzZXJPcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/getUserOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listSpendPermissions.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listSpendPermissions.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listSpendPermissions: () => (/* binding */ listSpendPermissions)\n/* harmony export */ });\n/**\n * Lists the spend permissions for a smart account.\n *\n * @param client - The OpenApiClient instance.\n * @param options - The options for listing the spend permissions.\n *\n * @returns A promise that resolves to the spend permissions.\n */\nasync function listSpendPermissions(client, options) {\n    const result = await client.listSpendPermissions(options.address, {\n        pageSize: options.pageSize,\n        pageToken: options.pageToken,\n    });\n    return {\n        spendPermissions: result.spendPermissions.map(permission => ({\n            ...permission,\n            permissionHash: permission.permissionHash,\n            permission: {\n                ...permission.permission,\n                account: permission.permission.account,\n                spender: permission.permission.spender,\n                token: permission.permission.token,\n                allowance: BigInt(permission.permission.allowance),\n                period: Number(permission.permission.period),\n                start: Number(permission.permission.start),\n                end: Number(permission.permission.end),\n                salt: BigInt(permission.permission.salt),\n                extraData: permission.permission.extraData,\n            },\n        })),\n    };\n}\n//# sourceMappingURL=listSpendPermissions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9saXN0U3BlbmRQZXJtaXNzaW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2FjdGlvbnMvZXZtL2xpc3RTcGVuZFBlcm1pc3Npb25zLmpzPzdkZjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaXN0cyB0aGUgc3BlbmQgcGVybWlzc2lvbnMgZm9yIGEgc21hcnQgYWNjb3VudC5cbiAqXG4gKiBAcGFyYW0gY2xpZW50IC0gVGhlIE9wZW5BcGlDbGllbnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBsaXN0aW5nIHRoZSBzcGVuZCBwZXJtaXNzaW9ucy5cbiAqXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgc3BlbmQgcGVybWlzc2lvbnMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsaXN0U3BlbmRQZXJtaXNzaW9ucyhjbGllbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjbGllbnQubGlzdFNwZW5kUGVybWlzc2lvbnMob3B0aW9ucy5hZGRyZXNzLCB7XG4gICAgICAgIHBhZ2VTaXplOiBvcHRpb25zLnBhZ2VTaXplLFxuICAgICAgICBwYWdlVG9rZW46IG9wdGlvbnMucGFnZVRva2VuLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHNwZW5kUGVybWlzc2lvbnM6IHJlc3VsdC5zcGVuZFBlcm1pc3Npb25zLm1hcChwZXJtaXNzaW9uID0+ICh7XG4gICAgICAgICAgICAuLi5wZXJtaXNzaW9uLFxuICAgICAgICAgICAgcGVybWlzc2lvbkhhc2g6IHBlcm1pc3Npb24ucGVybWlzc2lvbkhhc2gsXG4gICAgICAgICAgICBwZXJtaXNzaW9uOiB7XG4gICAgICAgICAgICAgICAgLi4ucGVybWlzc2lvbi5wZXJtaXNzaW9uLFxuICAgICAgICAgICAgICAgIGFjY291bnQ6IHBlcm1pc3Npb24ucGVybWlzc2lvbi5hY2NvdW50LFxuICAgICAgICAgICAgICAgIHNwZW5kZXI6IHBlcm1pc3Npb24ucGVybWlzc2lvbi5zcGVuZGVyLFxuICAgICAgICAgICAgICAgIHRva2VuOiBwZXJtaXNzaW9uLnBlcm1pc3Npb24udG9rZW4sXG4gICAgICAgICAgICAgICAgYWxsb3dhbmNlOiBCaWdJbnQocGVybWlzc2lvbi5wZXJtaXNzaW9uLmFsbG93YW5jZSksXG4gICAgICAgICAgICAgICAgcGVyaW9kOiBOdW1iZXIocGVybWlzc2lvbi5wZXJtaXNzaW9uLnBlcmlvZCksXG4gICAgICAgICAgICAgICAgc3RhcnQ6IE51bWJlcihwZXJtaXNzaW9uLnBlcm1pc3Npb24uc3RhcnQpLFxuICAgICAgICAgICAgICAgIGVuZDogTnVtYmVyKHBlcm1pc3Npb24ucGVybWlzc2lvbi5lbmQpLFxuICAgICAgICAgICAgICAgIHNhbHQ6IEJpZ0ludChwZXJtaXNzaW9uLnBlcm1pc3Npb24uc2FsdCksXG4gICAgICAgICAgICAgICAgZXh0cmFEYXRhOiBwZXJtaXNzaW9uLnBlcm1pc3Npb24uZXh0cmFEYXRhLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0U3BlbmRQZXJtaXNzaW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listSpendPermissions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listTokenBalances.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listTokenBalances.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listTokenBalances: () => (/* binding */ listTokenBalances)\n/* harmony export */ });\n/**\n * List the token balances for an EVM account.\n *\n * @param client - The client to use to list the token balances.\n * @param options - The options for listing the token balances.\n * @returns The result of listing the token balances.\n */\nasync function listTokenBalances(client, options) {\n    const response = await client.listDataTokenBalances(options.network, options.address, {\n        pageSize: options.pageSize,\n        pageToken: options.pageToken,\n    });\n    const balances = response.balances.map(balance => {\n        return {\n            token: {\n                network: balance.token.network,\n                contractAddress: balance.token.contractAddress,\n                symbol: balance.token.symbol,\n                name: balance.token.name,\n            },\n            amount: {\n                amount: BigInt(balance.amount.amount),\n                decimals: balance.amount.decimals,\n            },\n        };\n    });\n    return {\n        balances,\n        nextPageToken: response.nextPageToken,\n    };\n}\n//# sourceMappingURL=listTokenBalances.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9saXN0VG9rZW5CYWxhbmNlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2FjdGlvbnMvZXZtL2xpc3RUb2tlbkJhbGFuY2VzLmpzPzZlYjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaXN0IHRoZSB0b2tlbiBiYWxhbmNlcyBmb3IgYW4gRVZNIGFjY291bnQuXG4gKlxuICogQHBhcmFtIGNsaWVudCAtIFRoZSBjbGllbnQgdG8gdXNlIHRvIGxpc3QgdGhlIHRva2VuIGJhbGFuY2VzLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgbGlzdGluZyB0aGUgdG9rZW4gYmFsYW5jZXMuXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIGxpc3RpbmcgdGhlIHRva2VuIGJhbGFuY2VzLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGlzdFRva2VuQmFsYW5jZXMoY2xpZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQubGlzdERhdGFUb2tlbkJhbGFuY2VzKG9wdGlvbnMubmV0d29yaywgb3B0aW9ucy5hZGRyZXNzLCB7XG4gICAgICAgIHBhZ2VTaXplOiBvcHRpb25zLnBhZ2VTaXplLFxuICAgICAgICBwYWdlVG9rZW46IG9wdGlvbnMucGFnZVRva2VuLFxuICAgIH0pO1xuICAgIGNvbnN0IGJhbGFuY2VzID0gcmVzcG9uc2UuYmFsYW5jZXMubWFwKGJhbGFuY2UgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9rZW46IHtcbiAgICAgICAgICAgICAgICBuZXR3b3JrOiBiYWxhbmNlLnRva2VuLm5ldHdvcmssXG4gICAgICAgICAgICAgICAgY29udHJhY3RBZGRyZXNzOiBiYWxhbmNlLnRva2VuLmNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgICAgICAgICBzeW1ib2w6IGJhbGFuY2UudG9rZW4uc3ltYm9sLFxuICAgICAgICAgICAgICAgIG5hbWU6IGJhbGFuY2UudG9rZW4ubmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbW91bnQ6IHtcbiAgICAgICAgICAgICAgICBhbW91bnQ6IEJpZ0ludChiYWxhbmNlLmFtb3VudC5hbW91bnQpLFxuICAgICAgICAgICAgICAgIGRlY2ltYWxzOiBiYWxhbmNlLmFtb3VudC5kZWNpbWFscyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFsYW5jZXMsXG4gICAgICAgIG5leHRQYWdlVG9rZW46IHJlc3BvbnNlLm5leHRQYWdlVG9rZW4sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3RUb2tlbkJhbGFuY2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listTokenBalances.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/requestFaucet.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/requestFaucet.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestFaucet: () => (/* binding */ requestFaucet)\n/* harmony export */ });\n/**\n * Requests funds from an EVM faucet.\n *\n * @param apiClient - The API client.\n * @param options - The options for requesting funds from the EVM faucet.\n *\n * @returns A promise that resolves to the transaction hash.\n */\nasync function requestFaucet(apiClient, options) {\n    const { transactionHash } = await apiClient.requestEvmFaucet({ address: options.address, network: options.network, token: options.token }, options.idempotencyKey);\n    return {\n        transactionHash: transactionHash,\n    };\n}\n//# sourceMappingURL=requestFaucet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9yZXF1ZXN0RmF1Y2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLGtCQUFrQixxQ0FBcUMsMEVBQTBFO0FBQzdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYWN0aW9ucy9ldm0vcmVxdWVzdEZhdWNldC5qcz85ZGQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVxdWVzdHMgZnVuZHMgZnJvbSBhbiBFVk0gZmF1Y2V0LlxuICpcbiAqIEBwYXJhbSBhcGlDbGllbnQgLSBUaGUgQVBJIGNsaWVudC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHJlcXVlc3RpbmcgZnVuZHMgZnJvbSB0aGUgRVZNIGZhdWNldC5cbiAqXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgdHJhbnNhY3Rpb24gaGFzaC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3RGYXVjZXQoYXBpQ2xpZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyB0cmFuc2FjdGlvbkhhc2ggfSA9IGF3YWl0IGFwaUNsaWVudC5yZXF1ZXN0RXZtRmF1Y2V0KHsgYWRkcmVzczogb3B0aW9ucy5hZGRyZXNzLCBuZXR3b3JrOiBvcHRpb25zLm5ldHdvcmssIHRva2VuOiBvcHRpb25zLnRva2VuIH0sIG9wdGlvbnMuaWRlbXBvdGVuY3lLZXkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRyYW5zYWN0aW9uSGFzaDogdHJhbnNhY3Rpb25IYXNoLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0RmF1Y2V0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/requestFaucet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendTransaction.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendTransaction.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendTransaction: () => (/* binding */ sendTransaction)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/transaction/serializeTransaction.js\");\n\n/**\n * Sends an EVM transaction.\n *\n * @param apiClient - The API client.\n * @param options - The options for sending the transaction.\n *\n * @returns The result of the transaction.\n */\nasync function sendTransaction(apiClient, options) {\n    const { address, network, idempotencyKey } = options;\n    let transaction = options.transaction;\n    if (typeof transaction !== \"string\") {\n        transaction = (0,viem__WEBPACK_IMPORTED_MODULE_0__.serializeTransaction)({\n            ...transaction,\n            // chainId is ignored in favor of network\n            chainId: 1,\n            type: \"eip1559\",\n        });\n    }\n    const result = await apiClient.sendEvmTransaction(address, { transaction, network }, idempotencyKey);\n    return {\n        transactionHash: result.transactionHash,\n    };\n}\n//# sourceMappingURL=sendTransaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9zZW5kVHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxtQ0FBbUM7QUFDL0M7QUFDQTtBQUNBLHNCQUFzQiwwREFBb0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxpRUFBaUUsc0JBQXNCO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYWN0aW9ucy9ldm0vc2VuZFRyYW5zYWN0aW9uLmpzPzU1OGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VyaWFsaXplVHJhbnNhY3Rpb24gfSBmcm9tIFwidmllbVwiO1xuLyoqXG4gKiBTZW5kcyBhbiBFVk0gdHJhbnNhY3Rpb24uXG4gKlxuICogQHBhcmFtIGFwaUNsaWVudCAtIFRoZSBBUEkgY2xpZW50LlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3Igc2VuZGluZyB0aGUgdHJhbnNhY3Rpb24uXG4gKlxuICogQHJldHVybnMgVGhlIHJlc3VsdCBvZiB0aGUgdHJhbnNhY3Rpb24uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kVHJhbnNhY3Rpb24oYXBpQ2xpZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBhZGRyZXNzLCBuZXR3b3JrLCBpZGVtcG90ZW5jeUtleSB9ID0gb3B0aW9ucztcbiAgICBsZXQgdHJhbnNhY3Rpb24gPSBvcHRpb25zLnRyYW5zYWN0aW9uO1xuICAgIGlmICh0eXBlb2YgdHJhbnNhY3Rpb24gIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24gPSBzZXJpYWxpemVUcmFuc2FjdGlvbih7XG4gICAgICAgICAgICAuLi50cmFuc2FjdGlvbixcbiAgICAgICAgICAgIC8vIGNoYWluSWQgaXMgaWdub3JlZCBpbiBmYXZvciBvZiBuZXR3b3JrXG4gICAgICAgICAgICBjaGFpbklkOiAxLFxuICAgICAgICAgICAgdHlwZTogXCJlaXAxNTU5XCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcGlDbGllbnQuc2VuZEV2bVRyYW5zYWN0aW9uKGFkZHJlc3MsIHsgdHJhbnNhY3Rpb24sIG5ldHdvcmsgfSwgaWRlbXBvdGVuY3lLZXkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRyYW5zYWN0aW9uSGFzaDogcmVzdWx0LnRyYW5zYWN0aW9uSGFzaCxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VuZFRyYW5zYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendUserOperation.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendUserOperation.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendUserOperation: () => (/* binding */ sendUserOperation)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/abi/encodeFunctionData.js\");\n/* harmony import */ var _accounts_evm_getBaseNodeRpcUrl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../accounts/evm/getBaseNodeRpcUrl.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/getBaseNodeRpcUrl.js\");\n\n\n/**\n * Sends a user operation to the network.\n *\n * @example\n * ```ts\n * import { sendUserOperation } from \"@coinbase/cdp-sdk\";\n * import { parseEther } from \"viem\";\n * import { CdpClient } from \"@coinbase/cdp-sdk\";\n *\n * const client = new CdpClient({\n *   apiKeyId: \"your-api-key-id\",\n *   apiKeySecret: \"your-api-key-secret\",\n *   walletSecret: \"your-wallet-secret\",\n * });\n *\n * const ethAccount = await client.createEvmServerAccount()\n * const smartAccount = await client.createEvmSmartAccount({ owner: ethAccount })\n *\n * const result = await sendUserOperation(client, smartAccount, {\n *   calls: [\n *     {\n *       abi: erc20Abi,\n *       functionName: \"transfer\",\n *       args: [to, amount],\n *     },\n *     {\n *       to: \"0x1234567890123456789012345678901234567890\",\n *       data: \"0x\",\n *       value: parseEther(\"0.0000005\"),\n *     },\n *   ],\n *   network: \"base-sepolia\",\n *   paymasterUrl: \"https://api.developer.coinbase.com/rpc/v1/base/someapikey\",\n * });\n * ```\n *\n * @param {CdpOpenApiClientType} client - The client to use to send the user operation.\n * @param {SendUserOperationOptions<T>} options - The options for the user operation.\n * @returns {Promise<SendUserOperationReturnType>} The result of the user operation.\n */\nasync function sendUserOperation(client, options) {\n    const { calls, network, paymasterUrl: _paymasterUrl } = options;\n    const paymasterUrl = await (async () => {\n        if (!_paymasterUrl && network === \"base\") {\n            return (0,_accounts_evm_getBaseNodeRpcUrl_js__WEBPACK_IMPORTED_MODULE_0__.getBaseNodeRpcUrl)(\"base\");\n        }\n        return _paymasterUrl;\n    })();\n    if (calls.length === 0) {\n        throw new Error(\"Calls array is empty\");\n    }\n    const encodedCalls = calls.map(call => {\n        const value = (call.value ?? BigInt(0)).toString();\n        if (\"abi\" in call && call.abi && \"functionName\" in call) {\n            return {\n                to: call.to,\n                data: (0,viem__WEBPACK_IMPORTED_MODULE_1__.encodeFunctionData)({\n                    abi: call.abi,\n                    functionName: call.functionName,\n                    args: call.args,\n                }),\n                value,\n            };\n        }\n        return {\n            to: call.to,\n            data: call.data ?? \"0x\",\n            value,\n        };\n    });\n    const createOpResponse = await client.prepareUserOperation(options.smartAccount.address, {\n        network,\n        calls: encodedCalls,\n        paymasterUrl,\n    });\n    const owner = options.smartAccount.owners[0];\n    const signature = await owner.sign({\n        hash: createOpResponse.userOpHash,\n    });\n    const broadcastResponse = await client.sendUserOperation(options.smartAccount.address, createOpResponse.userOpHash, {\n        signature,\n    }, options.idempotencyKey);\n    return {\n        smartAccountAddress: options.smartAccount.address,\n        status: broadcastResponse.status,\n        userOpHash: createOpResponse.userOpHash,\n    };\n}\n//# sourceMappingURL=sendUserOperation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9zZW5kVXNlck9wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEM7QUFDa0M7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDLFlBQVksYUFBYTtBQUN6QixZQUFZLFlBQVk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsNkRBQTZELG1CQUFtQjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDLFdBQVcsNkJBQTZCO0FBQ3hDLGFBQWEsc0NBQXNDO0FBQ25EO0FBQ087QUFDUCxZQUFZLDhDQUE4QztBQUMxRDtBQUNBO0FBQ0EsbUJBQW1CLHFGQUFpQjtBQUNwQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0RBQWtCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2FjdGlvbnMvZXZtL3NlbmRVc2VyT3BlcmF0aW9uLmpzP2U5ZTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5jb2RlRnVuY3Rpb25EYXRhIH0gZnJvbSBcInZpZW1cIjtcbmltcG9ydCB7IGdldEJhc2VOb2RlUnBjVXJsIH0gZnJvbSBcIi4uLy4uL2FjY291bnRzL2V2bS9nZXRCYXNlTm9kZVJwY1VybC5qc1wiO1xuLyoqXG4gKiBTZW5kcyBhIHVzZXIgb3BlcmF0aW9uIHRvIHRoZSBuZXR3b3JrLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgc2VuZFVzZXJPcGVyYXRpb24gfSBmcm9tIFwiQGNvaW5iYXNlL2NkcC1zZGtcIjtcbiAqIGltcG9ydCB7IHBhcnNlRXRoZXIgfSBmcm9tIFwidmllbVwiO1xuICogaW1wb3J0IHsgQ2RwQ2xpZW50IH0gZnJvbSBcIkBjb2luYmFzZS9jZHAtc2RrXCI7XG4gKlxuICogY29uc3QgY2xpZW50ID0gbmV3IENkcENsaWVudCh7XG4gKiAgIGFwaUtleUlkOiBcInlvdXItYXBpLWtleS1pZFwiLFxuICogICBhcGlLZXlTZWNyZXQ6IFwieW91ci1hcGkta2V5LXNlY3JldFwiLFxuICogICB3YWxsZXRTZWNyZXQ6IFwieW91ci13YWxsZXQtc2VjcmV0XCIsXG4gKiB9KTtcbiAqXG4gKiBjb25zdCBldGhBY2NvdW50ID0gYXdhaXQgY2xpZW50LmNyZWF0ZUV2bVNlcnZlckFjY291bnQoKVxuICogY29uc3Qgc21hcnRBY2NvdW50ID0gYXdhaXQgY2xpZW50LmNyZWF0ZUV2bVNtYXJ0QWNjb3VudCh7IG93bmVyOiBldGhBY2NvdW50IH0pXG4gKlxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VuZFVzZXJPcGVyYXRpb24oY2xpZW50LCBzbWFydEFjY291bnQsIHtcbiAqICAgY2FsbHM6IFtcbiAqICAgICB7XG4gKiAgICAgICBhYmk6IGVyYzIwQWJpLFxuICogICAgICAgZnVuY3Rpb25OYW1lOiBcInRyYW5zZmVyXCIsXG4gKiAgICAgICBhcmdzOiBbdG8sIGFtb3VudF0sXG4gKiAgICAgfSxcbiAqICAgICB7XG4gKiAgICAgICB0bzogXCIweDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBcIixcbiAqICAgICAgIGRhdGE6IFwiMHhcIixcbiAqICAgICAgIHZhbHVlOiBwYXJzZUV0aGVyKFwiMC4wMDAwMDA1XCIpLFxuICogICAgIH0sXG4gKiAgIF0sXG4gKiAgIG5ldHdvcms6IFwiYmFzZS1zZXBvbGlhXCIsXG4gKiAgIHBheW1hc3RlclVybDogXCJodHRwczovL2FwaS5kZXZlbG9wZXIuY29pbmJhc2UuY29tL3JwYy92MS9iYXNlL3NvbWVhcGlrZXlcIixcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtDZHBPcGVuQXBpQ2xpZW50VHlwZX0gY2xpZW50IC0gVGhlIGNsaWVudCB0byB1c2UgdG8gc2VuZCB0aGUgdXNlciBvcGVyYXRpb24uXG4gKiBAcGFyYW0ge1NlbmRVc2VyT3BlcmF0aW9uT3B0aW9uczxUPn0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgdXNlciBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxTZW5kVXNlck9wZXJhdGlvblJldHVyblR5cGU+fSBUaGUgcmVzdWx0IG9mIHRoZSB1c2VyIG9wZXJhdGlvbi5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRVc2VyT3BlcmF0aW9uKGNsaWVudCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgY2FsbHMsIG5ldHdvcmssIHBheW1hc3RlclVybDogX3BheW1hc3RlclVybCB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBwYXltYXN0ZXJVcmwgPSBhd2FpdCAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoIV9wYXltYXN0ZXJVcmwgJiYgbmV0d29yayA9PT0gXCJiYXNlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRCYXNlTm9kZVJwY1VybChcImJhc2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9wYXltYXN0ZXJVcmw7XG4gICAgfSkoKTtcbiAgICBpZiAoY2FsbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbGxzIGFycmF5IGlzIGVtcHR5XCIpO1xuICAgIH1cbiAgICBjb25zdCBlbmNvZGVkQ2FsbHMgPSBjYWxscy5tYXAoY2FsbCA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gKGNhbGwudmFsdWUgPz8gQmlnSW50KDApKS50b1N0cmluZygpO1xuICAgICAgICBpZiAoXCJhYmlcIiBpbiBjYWxsICYmIGNhbGwuYWJpICYmIFwiZnVuY3Rpb25OYW1lXCIgaW4gY2FsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0bzogY2FsbC50byxcbiAgICAgICAgICAgICAgICBkYXRhOiBlbmNvZGVGdW5jdGlvbkRhdGEoe1xuICAgICAgICAgICAgICAgICAgICBhYmk6IGNhbGwuYWJpLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGNhbGwuZnVuY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgICBhcmdzOiBjYWxsLmFyZ3MsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0bzogY2FsbC50byxcbiAgICAgICAgICAgIGRhdGE6IGNhbGwuZGF0YSA/PyBcIjB4XCIsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBjcmVhdGVPcFJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnByZXBhcmVVc2VyT3BlcmF0aW9uKG9wdGlvbnMuc21hcnRBY2NvdW50LmFkZHJlc3MsIHtcbiAgICAgICAgbmV0d29yayxcbiAgICAgICAgY2FsbHM6IGVuY29kZWRDYWxscyxcbiAgICAgICAgcGF5bWFzdGVyVXJsLFxuICAgIH0pO1xuICAgIGNvbnN0IG93bmVyID0gb3B0aW9ucy5zbWFydEFjY291bnQub3duZXJzWzBdO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IG93bmVyLnNpZ24oe1xuICAgICAgICBoYXNoOiBjcmVhdGVPcFJlc3BvbnNlLnVzZXJPcEhhc2gsXG4gICAgfSk7XG4gICAgY29uc3QgYnJvYWRjYXN0UmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuc2VuZFVzZXJPcGVyYXRpb24ob3B0aW9ucy5zbWFydEFjY291bnQuYWRkcmVzcywgY3JlYXRlT3BSZXNwb25zZS51c2VyT3BIYXNoLCB7XG4gICAgICAgIHNpZ25hdHVyZSxcbiAgICB9LCBvcHRpb25zLmlkZW1wb3RlbmN5S2V5KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzbWFydEFjY291bnRBZGRyZXNzOiBvcHRpb25zLnNtYXJ0QWNjb3VudC5hZGRyZXNzLFxuICAgICAgICBzdGF0dXM6IGJyb2FkY2FzdFJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgdXNlck9wSGFzaDogY3JlYXRlT3BSZXNwb25zZS51c2VyT3BIYXNoLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZW5kVXNlck9wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendUserOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/signAndWrapTypedDataForSmartAccount.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/signAndWrapTypedDataForSmartAccount.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createReplaySafeTypedData: () => (/* binding */ createReplaySafeTypedData),\n/* harmony export */   createSmartAccountSignatureWrapper: () => (/* binding */ createSmartAccountSignatureWrapper),\n/* harmony export */   signAndWrapTypedDataForSmartAccount: () => (/* binding */ signAndWrapTypedDataForSmartAccount)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/signature/hashTypedData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/data/slice.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/abi/encodePacked.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/abi/encodeAbiParameters.js\");\n\n/**\n * Signs and wraps an EIP-712 message for a smart account using the required Coinbase Smart Wallet signature format.\n *\n * **Important: Coinbase Smart Wallet Contract Requirements**\n *\n * Due to the Coinbase Smart Wallet contract implementation (ERC-1271), CDP Smart Wallets have\n * specific requirements for EIP-712 message signing:\n *\n * 1. **Replay-Safe Hashing**: All typed messages must be wrapped in a replay-safe hash that\n *    includes the chain ID and smart account address. This prevents the same signature from\n *    being valid across different chains or accounts.\n *\n * 2. **Signature Wrapping**: The resulting signature must be wrapped in a `SignatureWrapper`\n *    struct that identifies which owner signed and contains the signature data in the format\n *    expected by the smart contract's `isValidSignature()` method.\n *\n * This function handles both requirements automatically, making it safe and convenient for\n * developers to sign EIP-712 messages with CDP Smart Wallets.\n *\n * @param {CdpOpenApiClientType} client - The CDP API client\n * @param {SignAndWrapTypedDataForSmartAccountOptions} options - Parameters for signing and wrapping the EIP-712 message.\n * @returns A promise that resolves to the signature that can be used with smart contracts.\n *\n * @example\n * ```ts\n * const result = await signAndWrapTypedDataForSmartAccount(client, {\n *   smartAccount: smartAccount,\n *   chainId: 1n,\n *   typedData: {\n *     domain: {\n *       name: \"Permit2\",\n *       chainId: 1,\n *       verifyingContract: \"0x000000000022D473030F116dDEE9F6B43aC78BA3\",\n *     },\n *     types: {\n *       EIP712Domain: [\n *         { name: \"name\", type: \"string\" },\n *         { name: \"chainId\", type: \"uint256\" },\n *         { name: \"verifyingContract\", type: \"address\" },\n *       ],\n *       PermitTransferFrom: [\n *         { name: \"permitted\", type: \"TokenPermissions\" },\n *         { name: \"spender\", type: \"address\" },\n *         { name: \"nonce\", type: \"uint256\" },\n *         { name: \"deadline\", type: \"uint256\" },\n *       ],\n *       TokenPermissions: [\n *         { name: \"token\", type: \"address\" },\n *         { name: \"amount\", type: \"uint256\" },\n *       ],\n *     },\n *     primaryType: \"PermitTransferFrom\",\n *     message: {\n *       permitted: {\n *         token: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n *         amount: \"1000000\",\n *       },\n *       spender: \"0xFfFfFfFFfFFfFFfFFfFFFFFffFFFffffFfFFFfFf\",\n *       nonce: \"0\",\n *       deadline: \"1717123200\",\n *     },\n *   },\n * });\n *\n * // Use result.signature for smart contract calls\n * console.log(`Signature: ${result.signature}`);\n * ```\n */\nasync function signAndWrapTypedDataForSmartAccount(client, options) {\n    const { smartAccount, chainId, typedData, ownerIndex = 0n } = options;\n    // Create the replay-safe typed data\n    const replaySafeTypedData = createReplaySafeTypedData({\n        typedData,\n        chainId,\n        smartAccountAddress: smartAccount.address,\n    });\n    // Sign the replay-safe typed data with the smart account owner\n    const owner = smartAccount.owners[Number(ownerIndex)];\n    const signature = await client.signEvmTypedData(owner.address, replaySafeTypedData, options.idempotencyKey);\n    // Wrap the signature in the format expected by the smart contract\n    const wrappedSignature = createSmartAccountSignatureWrapper({\n        signatureHex: signature.signature,\n        ownerIndex,\n    });\n    return {\n        signature: wrappedSignature,\n    };\n}\n/**\n * Creates a replay-safe EIP-712 typed data structure by wrapping the original typed data with\n * chain ID and smart account address.\n *\n * **Coinbase Smart Wallet Requirement**: Due to the Coinbase Smart Wallet contract's ERC-1271\n * implementation, all EIP-712 messages must be wrapped in a replay-safe hash before signing.\n * This prevents signature replay attacks across different chains or smart account addresses.\n *\n * The smart contract's `isValidSignature()` method expects signatures to be validated against\n * this replay-safe hash, not the original message hash.\n *\n * @param params - The replay-safe hash parameters\n * @param params.typedData - The original EIP-712 typed data to make replay-safe\n * @param params.chainId - The chain ID for replay protection\n * @param params.smartAccountAddress - The smart account address for additional context\n * @returns The EIP-712 typed data structure for the replay-safe hash\n */\nfunction createReplaySafeTypedData({ typedData, chainId, smartAccountAddress, }) {\n    // First hash the original typed data\n    const originalHash = (0,viem__WEBPACK_IMPORTED_MODULE_0__.hashTypedData)(typedData);\n    // Create and return the replay-safe typed data structure\n    return {\n        domain: {\n            name: \"Coinbase Smart Wallet\",\n            version: \"1\",\n            chainId: Number(chainId),\n            verifyingContract: smartAccountAddress,\n        },\n        types: {\n            EIP712Domain: [\n                { name: \"name\", type: \"string\" },\n                { name: \"version\", type: \"string\" },\n                { name: \"chainId\", type: \"uint256\" },\n                { name: \"verifyingContract\", type: \"address\" },\n            ],\n            CoinbaseSmartWalletMessage: [{ name: \"hash\", type: \"bytes32\" }],\n        },\n        primaryType: \"CoinbaseSmartWalletMessage\",\n        message: {\n            hash: originalHash,\n        },\n    };\n}\n/**\n * Builds a signature wrapper for Coinbase Smart Wallets by decomposing a hex signature\n * into r, s, v components and encoding them in the format expected by the smart contract.\n *\n * All signatures on Coinbase Smart Wallets must be wrapped in this format to identify\n * which owner signed and provide the signature data.\n *\n * @param params - The signature parameters\n * @param params.signatureHex - The hex signature to wrap (65 bytes: r + s + v)\n * @param params.ownerIndex - The index of the owner that signed (from MultiOwnable.ownerAtIndex)\n * @returns The encoded signature wrapper in the format expected by the smart contract\n */\nfunction createSmartAccountSignatureWrapper({ signatureHex, ownerIndex, }) {\n    // Decompose 65-byte hex signature into r (32 bytes), s (32 bytes), v (1 byte)\n    const r = (0,viem__WEBPACK_IMPORTED_MODULE_1__.sliceHex)(signatureHex, 0, 32);\n    const s = (0,viem__WEBPACK_IMPORTED_MODULE_1__.sliceHex)(signatureHex, 32, 64);\n    const v = Number(`0x${signatureHex.slice(130, 132)}`); // 130 = 2 + 64 + 64\n    const signatureData = (0,viem__WEBPACK_IMPORTED_MODULE_2__.encodePacked)([\"bytes32\", \"bytes32\", \"uint8\"], [r, s, v]);\n    return (0,viem__WEBPACK_IMPORTED_MODULE_3__.encodeAbiParameters)([SignatureWrapperStruct], [\n        {\n            ownerIndex: Number(ownerIndex),\n            signatureData,\n        },\n    ]);\n}\n/**\n * The ABI structure for the SignatureWrapper struct expected by Coinbase Smart Wallets.\n * This matches the struct defined in the smart contract:\n *\n * struct SignatureWrapper {\n *   uint256 ownerIndex;\n *   bytes signatureData;\n * }\n */\nconst SignatureWrapperStruct = {\n    components: [\n        {\n            name: \"ownerIndex\",\n            type: \"uint8\",\n        },\n        {\n            name: \"signatureData\",\n            type: \"bytes\",\n        },\n    ],\n    name: \"SignatureWrapper\",\n    type: \"tuple\",\n};\n//# sourceMappingURL=signAndWrapTypedDataForSmartAccount.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/signAndWrapTypedDataForSmartAccount.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/account.use.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/account.use.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSpendPermission: () => (/* binding */ useSpendPermission)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/abi/encodeFunctionData.js\");\n/* harmony import */ var _spend_permissions_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../spend-permissions/constants.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/spend-permissions/constants.js\");\n/* harmony import */ var _utils_serializeTransaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/serializeTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/serializeTransaction.js\");\n\n\n\n/**\n * Use a spend permission to spend tokens.\n *\n * @param apiClient - The API client to use.\n * @param address - The address of the account to use the spend permission on.\n * @param options - The options for the spend permission.\n *\n * @returns The transaction hash of the spend permission.\n */\nasync function useSpendPermission(apiClient, address, options) {\n    const { spendPermission, value, network } = options;\n    const result = await apiClient.sendEvmTransaction(address, {\n        transaction: (0,_utils_serializeTransaction_js__WEBPACK_IMPORTED_MODULE_0__.serializeEIP1559Transaction)({\n            to: _spend_permissions_constants_js__WEBPACK_IMPORTED_MODULE_1__.SPEND_PERMISSION_MANAGER_ADDRESS,\n            data: (0,viem__WEBPACK_IMPORTED_MODULE_2__.encodeFunctionData)({\n                abi: _spend_permissions_constants_js__WEBPACK_IMPORTED_MODULE_1__.SPEND_PERMISSION_MANAGER_ABI,\n                functionName: \"spend\",\n                args: [spendPermission, value],\n            }),\n        }),\n        network: network,\n    });\n    return {\n        transactionHash: result.transactionHash,\n    };\n}\n//# sourceMappingURL=account.use.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9zcGVuZC1wZXJtaXNzaW9ucy9hY2NvdW50LnVzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ2dGO0FBQ3JDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxrQ0FBa0M7QUFDOUM7QUFDQSxxQkFBcUIsMkZBQTJCO0FBQ2hELGdCQUFnQiw2RkFBZ0M7QUFDaEQsa0JBQWtCLHdEQUFrQjtBQUNwQyxxQkFBcUIseUZBQTRCO0FBQ2pEO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYWN0aW9ucy9ldm0vc3BlbmQtcGVybWlzc2lvbnMvYWNjb3VudC51c2UuanM/NWE1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmNvZGVGdW5jdGlvbkRhdGEgfSBmcm9tIFwidmllbVwiO1xuaW1wb3J0IHsgU1BFTkRfUEVSTUlTU0lPTl9NQU5BR0VSX0FCSSwgU1BFTkRfUEVSTUlTU0lPTl9NQU5BR0VSX0FERFJFU1MsIH0gZnJvbSBcIi4uLy4uLy4uL3NwZW5kLXBlcm1pc3Npb25zL2NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHsgc2VyaWFsaXplRUlQMTU1OVRyYW5zYWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3NlcmlhbGl6ZVRyYW5zYWN0aW9uLmpzXCI7XG4vKipcbiAqIFVzZSBhIHNwZW5kIHBlcm1pc3Npb24gdG8gc3BlbmQgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSBhcGlDbGllbnQgLSBUaGUgQVBJIGNsaWVudCB0byB1c2UuXG4gKiBAcGFyYW0gYWRkcmVzcyAtIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRvIHVzZSB0aGUgc3BlbmQgcGVybWlzc2lvbiBvbi5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBzcGVuZCBwZXJtaXNzaW9uLlxuICpcbiAqIEByZXR1cm5zIFRoZSB0cmFuc2FjdGlvbiBoYXNoIG9mIHRoZSBzcGVuZCBwZXJtaXNzaW9uLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXNlU3BlbmRQZXJtaXNzaW9uKGFwaUNsaWVudCwgYWRkcmVzcywgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgc3BlbmRQZXJtaXNzaW9uLCB2YWx1ZSwgbmV0d29yayB9ID0gb3B0aW9ucztcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcGlDbGllbnQuc2VuZEV2bVRyYW5zYWN0aW9uKGFkZHJlc3MsIHtcbiAgICAgICAgdHJhbnNhY3Rpb246IHNlcmlhbGl6ZUVJUDE1NTlUcmFuc2FjdGlvbih7XG4gICAgICAgICAgICB0bzogU1BFTkRfUEVSTUlTU0lPTl9NQU5BR0VSX0FERFJFU1MsXG4gICAgICAgICAgICBkYXRhOiBlbmNvZGVGdW5jdGlvbkRhdGEoe1xuICAgICAgICAgICAgICAgIGFiaTogU1BFTkRfUEVSTUlTU0lPTl9NQU5BR0VSX0FCSSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IFwic3BlbmRcIixcbiAgICAgICAgICAgICAgICBhcmdzOiBbc3BlbmRQZXJtaXNzaW9uLCB2YWx1ZV0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldHdvcms6IG5ldHdvcmssXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHJhbnNhY3Rpb25IYXNoOiByZXN1bHQudHJhbnNhY3Rpb25IYXNoLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2NvdW50LnVzZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/account.use.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/resolveSpendPermission.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/resolveSpendPermission.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveSpendPermission: () => (/* binding */ resolveSpendPermission)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n/* harmony import */ var _spend_permissions_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../spend-permissions/utils.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/spend-permissions/utils.js\");\n\n\n/**\n * Generate a random salt using crypto.getRandomValues().\n *\n * @returns A random bigint salt.\n */\nfunction generateRandomSalt() {\n    const randomBytes = new Uint8Array(32);\n    crypto.getRandomValues(randomBytes);\n    // Convert bytes to bigint\n    let result = 0n;\n    for (let i = 0; i < randomBytes.length; i++) {\n        result = (result << 8n) + BigInt(randomBytes[i]);\n    }\n    return result;\n}\n/**\n * Resolve a spend permission input to a spend permission.\n *\n * @param spendPermissionInput - The spend permission input to resolve.\n * @param network - The network to resolve the spend permission for.\n *\n * @returns The resolved spend permission.\n */\nfunction resolveSpendPermission(spendPermissionInput, network) {\n    // Validate that either period or periodInDays is provided, but not both\n    if (spendPermissionInput.period !== undefined &&\n        spendPermissionInput.periodInDays !== undefined) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.UserInputValidationError(\"Cannot specify both 'period' and 'periodInDays'. Please provide only one.\");\n    }\n    if (spendPermissionInput.period === undefined &&\n        spendPermissionInput.periodInDays === undefined) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.UserInputValidationError(\"Must specify either 'period' (in seconds) or 'periodInDays'.\");\n    }\n    // Convert periodInDays to period in seconds if provided\n    const period = spendPermissionInput.period ?? spendPermissionInput.periodInDays * 24 * 60 * 60;\n    // Set defaults for start and end\n    const now = new Date();\n    const startDate = spendPermissionInput.start ?? now;\n    /*\n     * For end date default, we need to handle the max uint48 value carefully\n     * JavaScript Date max is around year 275760, but uint48 max (281474976710655) is much larger\n     * So we'll use the max uint48 value directly for end if no end date is provided\n     */\n    const endDate = spendPermissionInput.end;\n    // Convert Date objects to seconds since epoch for the contract\n    const start = Math.floor(startDate.getTime() / 1000);\n    const end = endDate ? Math.floor(endDate.getTime() / 1000) : 281474976710655; // Max uint48 value (never expires)\n    const { periodInDays: _periodInDays, ...inputWithoutPeriodInDays } = spendPermissionInput;\n    return {\n        ...inputWithoutPeriodInDays,\n        token: (0,_spend_permissions_utils_js__WEBPACK_IMPORTED_MODULE_1__.resolveTokenAddress)(spendPermissionInput.token, network),\n        period,\n        start,\n        end,\n        salt: spendPermissionInput.salt ?? generateRandomSalt(),\n        extraData: spendPermissionInput.extraData ?? \"0x\",\n    };\n}\n//# sourceMappingURL=resolveSpendPermission.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9zcGVuZC1wZXJtaXNzaW9ucy9yZXNvbHZlU3BlbmRQZXJtaXNzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4RDtBQUNZO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHdCQUF3QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnRUFBd0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdFQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0ZBQWtGO0FBQ2xGLFlBQVksMkRBQTJEO0FBQ3ZFO0FBQ0E7QUFDQSxlQUFlLGdGQUFtQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2FjdGlvbnMvZXZtL3NwZW5kLXBlcm1pc3Npb25zL3Jlc29sdmVTcGVuZFBlcm1pc3Npb24uanM/ZDY2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VySW5wdXRWYWxpZGF0aW9uRXJyb3IgfSBmcm9tIFwiLi4vLi4vLi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyByZXNvbHZlVG9rZW5BZGRyZXNzIH0gZnJvbSBcIi4uLy4uLy4uL3NwZW5kLXBlcm1pc3Npb25zL3V0aWxzLmpzXCI7XG4vKipcbiAqIEdlbmVyYXRlIGEgcmFuZG9tIHNhbHQgdXNpbmcgY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpLlxuICpcbiAqIEByZXR1cm5zIEEgcmFuZG9tIGJpZ2ludCBzYWx0LlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbVNhbHQoKSB7XG4gICAgY29uc3QgcmFuZG9tQnl0ZXMgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhyYW5kb21CeXRlcyk7XG4gICAgLy8gQ29udmVydCBieXRlcyB0byBiaWdpbnRcbiAgICBsZXQgcmVzdWx0ID0gMG47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5kb21CeXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSAocmVzdWx0IDw8IDhuKSArIEJpZ0ludChyYW5kb21CeXRlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFJlc29sdmUgYSBzcGVuZCBwZXJtaXNzaW9uIGlucHV0IHRvIGEgc3BlbmQgcGVybWlzc2lvbi5cbiAqXG4gKiBAcGFyYW0gc3BlbmRQZXJtaXNzaW9uSW5wdXQgLSBUaGUgc3BlbmQgcGVybWlzc2lvbiBpbnB1dCB0byByZXNvbHZlLlxuICogQHBhcmFtIG5ldHdvcmsgLSBUaGUgbmV0d29yayB0byByZXNvbHZlIHRoZSBzcGVuZCBwZXJtaXNzaW9uIGZvci5cbiAqXG4gKiBAcmV0dXJucyBUaGUgcmVzb2x2ZWQgc3BlbmQgcGVybWlzc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVTcGVuZFBlcm1pc3Npb24oc3BlbmRQZXJtaXNzaW9uSW5wdXQsIG5ldHdvcmspIHtcbiAgICAvLyBWYWxpZGF0ZSB0aGF0IGVpdGhlciBwZXJpb2Qgb3IgcGVyaW9kSW5EYXlzIGlzIHByb3ZpZGVkLCBidXQgbm90IGJvdGhcbiAgICBpZiAoc3BlbmRQZXJtaXNzaW9uSW5wdXQucGVyaW9kICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgc3BlbmRQZXJtaXNzaW9uSW5wdXQucGVyaW9kSW5EYXlzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJJbnB1dFZhbGlkYXRpb25FcnJvcihcIkNhbm5vdCBzcGVjaWZ5IGJvdGggJ3BlcmlvZCcgYW5kICdwZXJpb2RJbkRheXMnLiBQbGVhc2UgcHJvdmlkZSBvbmx5IG9uZS5cIik7XG4gICAgfVxuICAgIGlmIChzcGVuZFBlcm1pc3Npb25JbnB1dC5wZXJpb2QgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBzcGVuZFBlcm1pc3Npb25JbnB1dC5wZXJpb2RJbkRheXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlcklucHV0VmFsaWRhdGlvbkVycm9yKFwiTXVzdCBzcGVjaWZ5IGVpdGhlciAncGVyaW9kJyAoaW4gc2Vjb25kcykgb3IgJ3BlcmlvZEluRGF5cycuXCIpO1xuICAgIH1cbiAgICAvLyBDb252ZXJ0IHBlcmlvZEluRGF5cyB0byBwZXJpb2QgaW4gc2Vjb25kcyBpZiBwcm92aWRlZFxuICAgIGNvbnN0IHBlcmlvZCA9IHNwZW5kUGVybWlzc2lvbklucHV0LnBlcmlvZCA/PyBzcGVuZFBlcm1pc3Npb25JbnB1dC5wZXJpb2RJbkRheXMgKiAyNCAqIDYwICogNjA7XG4gICAgLy8gU2V0IGRlZmF1bHRzIGZvciBzdGFydCBhbmQgZW5kXG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBzdGFydERhdGUgPSBzcGVuZFBlcm1pc3Npb25JbnB1dC5zdGFydCA/PyBub3c7XG4gICAgLypcbiAgICAgKiBGb3IgZW5kIGRhdGUgZGVmYXVsdCwgd2UgbmVlZCB0byBoYW5kbGUgdGhlIG1heCB1aW50NDggdmFsdWUgY2FyZWZ1bGx5XG4gICAgICogSmF2YVNjcmlwdCBEYXRlIG1heCBpcyBhcm91bmQgeWVhciAyNzU3NjAsIGJ1dCB1aW50NDggbWF4ICgyODE0NzQ5NzY3MTA2NTUpIGlzIG11Y2ggbGFyZ2VyXG4gICAgICogU28gd2UnbGwgdXNlIHRoZSBtYXggdWludDQ4IHZhbHVlIGRpcmVjdGx5IGZvciBlbmQgaWYgbm8gZW5kIGRhdGUgaXMgcHJvdmlkZWRcbiAgICAgKi9cbiAgICBjb25zdCBlbmREYXRlID0gc3BlbmRQZXJtaXNzaW9uSW5wdXQuZW5kO1xuICAgIC8vIENvbnZlcnQgRGF0ZSBvYmplY3RzIHRvIHNlY29uZHMgc2luY2UgZXBvY2ggZm9yIHRoZSBjb250cmFjdFxuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgY29uc3QgZW5kID0gZW5kRGF0ZSA/IE1hdGguZmxvb3IoZW5kRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKSA6IDI4MTQ3NDk3NjcxMDY1NTsgLy8gTWF4IHVpbnQ0OCB2YWx1ZSAobmV2ZXIgZXhwaXJlcylcbiAgICBjb25zdCB7IHBlcmlvZEluRGF5czogX3BlcmlvZEluRGF5cywgLi4uaW5wdXRXaXRob3V0UGVyaW9kSW5EYXlzIH0gPSBzcGVuZFBlcm1pc3Npb25JbnB1dDtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5pbnB1dFdpdGhvdXRQZXJpb2RJbkRheXMsXG4gICAgICAgIHRva2VuOiByZXNvbHZlVG9rZW5BZGRyZXNzKHNwZW5kUGVybWlzc2lvbklucHV0LnRva2VuLCBuZXR3b3JrKSxcbiAgICAgICAgcGVyaW9kLFxuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kLFxuICAgICAgICBzYWx0OiBzcGVuZFBlcm1pc3Npb25JbnB1dC5zYWx0ID8/IGdlbmVyYXRlUmFuZG9tU2FsdCgpLFxuICAgICAgICBleHRyYURhdGE6IHNwZW5kUGVybWlzc2lvbklucHV0LmV4dHJhRGF0YSA/PyBcIjB4XCIsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVTcGVuZFBlcm1pc3Npb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/resolveSpendPermission.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/smartAccount.use.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/smartAccount.use.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSpendPermission: () => (/* binding */ useSpendPermission)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/abi/encodeFunctionData.js\");\n/* harmony import */ var _spend_permissions_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../spend-permissions/constants.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/spend-permissions/constants.js\");\n/* harmony import */ var _sendUserOperation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sendUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendUserOperation.js\");\n\n\n\n/**\n * Use a spend permission to spend tokens.\n *\n * @param apiClient - The API client to use.\n * @param account - The smart account to use.\n * @param options - The options for the spend permission.\n *\n * @returns The result of the spend permission.\n */\nfunction useSpendPermission(apiClient, account, options) {\n    const { spendPermission, value, network } = options;\n    const data = (0,viem__WEBPACK_IMPORTED_MODULE_0__.encodeFunctionData)({\n        abi: _spend_permissions_constants_js__WEBPACK_IMPORTED_MODULE_1__.SPEND_PERMISSION_MANAGER_ABI,\n        functionName: \"spend\",\n        args: [spendPermission, value],\n    });\n    return (0,_sendUserOperation_js__WEBPACK_IMPORTED_MODULE_2__.sendUserOperation)(apiClient, {\n        smartAccount: account,\n        network: network,\n        calls: [\n            {\n                to: _spend_permissions_constants_js__WEBPACK_IMPORTED_MODULE_1__.SPEND_PERMISSION_MANAGER_ADDRESS,\n                data,\n                value: 0n,\n            },\n        ],\n    });\n}\n//# sourceMappingURL=smartAccount.use.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9zcGVuZC1wZXJtaXNzaW9ucy9zbWFydEFjY291bnQudXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMEM7QUFDZ0Y7QUFDOUQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLGtDQUFrQztBQUM5QyxpQkFBaUIsd0RBQWtCO0FBQ25DLGFBQWEseUZBQTRCO0FBQ3pDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsV0FBVyx3RUFBaUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNkZBQWdDO0FBQ3BEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9zcGVuZC1wZXJtaXNzaW9ucy9zbWFydEFjY291bnQudXNlLmpzP2U1M2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5jb2RlRnVuY3Rpb25EYXRhIH0gZnJvbSBcInZpZW1cIjtcbmltcG9ydCB7IFNQRU5EX1BFUk1JU1NJT05fTUFOQUdFUl9BQkksIFNQRU5EX1BFUk1JU1NJT05fTUFOQUdFUl9BRERSRVNTLCB9IGZyb20gXCIuLi8uLi8uLi9zcGVuZC1wZXJtaXNzaW9ucy9jb25zdGFudHMuanNcIjtcbmltcG9ydCB7IHNlbmRVc2VyT3BlcmF0aW9uIH0gZnJvbSBcIi4uL3NlbmRVc2VyT3BlcmF0aW9uLmpzXCI7XG4vKipcbiAqIFVzZSBhIHNwZW5kIHBlcm1pc3Npb24gdG8gc3BlbmQgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSBhcGlDbGllbnQgLSBUaGUgQVBJIGNsaWVudCB0byB1c2UuXG4gKiBAcGFyYW0gYWNjb3VudCAtIFRoZSBzbWFydCBhY2NvdW50IHRvIHVzZS5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBzcGVuZCBwZXJtaXNzaW9uLlxuICpcbiAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2YgdGhlIHNwZW5kIHBlcm1pc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGVuZFBlcm1pc3Npb24oYXBpQ2xpZW50LCBhY2NvdW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBzcGVuZFBlcm1pc3Npb24sIHZhbHVlLCBuZXR3b3JrIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVGdW5jdGlvbkRhdGEoe1xuICAgICAgICBhYmk6IFNQRU5EX1BFUk1JU1NJT05fTUFOQUdFUl9BQkksXG4gICAgICAgIGZ1bmN0aW9uTmFtZTogXCJzcGVuZFwiLFxuICAgICAgICBhcmdzOiBbc3BlbmRQZXJtaXNzaW9uLCB2YWx1ZV0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbmRVc2VyT3BlcmF0aW9uKGFwaUNsaWVudCwge1xuICAgICAgICBzbWFydEFjY291bnQ6IGFjY291bnQsXG4gICAgICAgIG5ldHdvcms6IG5ldHdvcmssXG4gICAgICAgIGNhbGxzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG86IFNQRU5EX1BFUk1JU1NJT05fTUFOQUdFUl9BRERSRVNTLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDBuLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNtYXJ0QWNjb3VudC51c2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/smartAccount.use.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/createSwapQuote.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/createSwapQuote.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSwapQuote: () => (/* binding */ createSwapQuote)\n/* harmony export */ });\n/* harmony import */ var _sendSwapOperation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sendSwapOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapOperation.js\");\n/* harmony import */ var _sendSwapTransaction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sendSwapTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapTransaction.js\");\n\n\n/**\n * Creates a quote for a swap between two tokens on an EVM network.\n *\n * @param {CdpOpenApiClientType} client - The client to use to create the swap quote.\n * @param {CreateSwapQuoteOptions} options - The options for creating a swap quote.\n *\n * @returns {Promise<CreateSwapQuoteResult | SwapUnavailableResult>} A promise that resolves to the swap quote result or a response indicating that liquidity is unavailable.\n *\n * @example **Creating a swap quote**\n * ```ts\n * const swapQuote = await createSwapQuote(client, {\n *   network: \"ethereum\",\n *   toToken: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\n *   fromToken: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", // WETH\n *   fromAmount: BigInt(\"1000000000000000000\"), // 1 WETH in wei\n *   taker: \"0x1234567890123456789012345678901234567890\"\n * });\n * ```\n */\nasync function createSwapQuote(client, options) {\n    // Validate required parameters\n    if (!options.taker) {\n        throw new Error(\"taker is required for createSwapQuote\");\n    }\n    // Store validated taker for type safety\n    const taker = options.taker;\n    // Call the createEvmSwapQuote function directly with the client's configured API\n    const response = await client.createEvmSwapQuote({\n        network: options.network,\n        toToken: options.toToken,\n        fromToken: options.fromToken,\n        fromAmount: options.fromAmount.toString(),\n        taker: taker,\n        signerAddress: options.signerAddress,\n        gasPrice: options.gasPrice?.toString(),\n        slippageBps: options.slippageBps,\n    }, options.idempotencyKey);\n    // Check if liquidity is unavailable\n    if (!response.liquidityAvailable) {\n        // Return the SwapUnavailableResult\n        return {\n            liquidityAvailable: false,\n        };\n    }\n    // At this point we know it's a CreateSwapQuoteResponse with liquidityAvailable as true\n    const swapResponse = response;\n    const result = {\n        liquidityAvailable: true,\n        network: options.network,\n        toToken: swapResponse.toToken,\n        fromToken: swapResponse.fromToken,\n        fromAmount: BigInt(swapResponse.fromAmount),\n        toAmount: BigInt(swapResponse.toAmount),\n        minToAmount: BigInt(swapResponse.minToAmount),\n        blockNumber: BigInt(swapResponse.blockNumber),\n        fees: {\n            gasFee: swapResponse.fees.gasFee\n                ? {\n                    amount: BigInt(swapResponse.fees.gasFee.amount),\n                    token: swapResponse.fees.gasFee.token,\n                }\n                : undefined,\n            protocolFee: swapResponse.fees.protocolFee\n                ? {\n                    amount: BigInt(swapResponse.fees.protocolFee.amount),\n                    token: swapResponse.fees.protocolFee.token,\n                }\n                : undefined,\n        },\n        issues: {\n            allowance: swapResponse.issues.allowance\n                ? {\n                    currentAllowance: BigInt(swapResponse.issues.allowance.currentAllowance),\n                    spender: swapResponse.issues.allowance.spender,\n                }\n                : undefined,\n            balance: swapResponse.issues.balance\n                ? {\n                    token: swapResponse.issues.balance.token,\n                    currentBalance: BigInt(swapResponse.issues.balance.currentBalance),\n                    requiredBalance: BigInt(swapResponse.issues.balance.requiredBalance),\n                }\n                : undefined,\n            simulationIncomplete: swapResponse.issues.simulationIncomplete,\n        },\n        transaction: swapResponse.transaction\n            ? {\n                to: swapResponse.transaction.to,\n                data: swapResponse.transaction.data,\n                value: BigInt(swapResponse.transaction.value),\n                gas: BigInt(swapResponse.transaction.gas),\n                gasPrice: BigInt(swapResponse.transaction.gasPrice),\n            }\n            : undefined,\n        permit2: swapResponse.permit2\n            ? {\n                eip712: {\n                    domain: {\n                        ...swapResponse.permit2.eip712.domain,\n                        verifyingContract: swapResponse.permit2.eip712.domain.verifyingContract,\n                        salt: swapResponse.permit2.eip712.domain.salt,\n                    },\n                    types: swapResponse.permit2.eip712.types,\n                    primaryType: swapResponse.permit2.eip712.primaryType,\n                    message: swapResponse.permit2.eip712.message,\n                },\n            }\n            : undefined,\n        // Add the execute method\n        execute: async (executeOptions = {}) => {\n            if (options.smartAccount) {\n                // Smart account execution - use sendSwapOperation\n                const userOpResult = await (0,_sendSwapOperation_js__WEBPACK_IMPORTED_MODULE_0__.sendSwapOperation)(client, {\n                    smartAccount: options.smartAccount,\n                    network: result.network,\n                    swapQuote: result,\n                    idempotencyKey: executeOptions.idempotencyKey,\n                });\n                return {\n                    userOpHash: userOpResult.userOpHash,\n                    smartAccountAddress: userOpResult.smartAccountAddress,\n                    status: userOpResult.status,\n                };\n            }\n            else {\n                // EOA execution - use sendSwapTransaction\n                const { transactionHash } = await (0,_sendSwapTransaction_js__WEBPACK_IMPORTED_MODULE_1__.sendSwapTransaction)(client, {\n                    address: taker,\n                    network: result.network,\n                    swapQuote: result,\n                    idempotencyKey: executeOptions.idempotencyKey,\n                });\n                return { transactionHash };\n            }\n        },\n    };\n    return result;\n}\n//# sourceMappingURL=createSwapQuote.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/createSwapQuote.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/getSwapPrice.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/getSwapPrice.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSwapPrice: () => (/* binding */ getSwapPrice)\n/* harmony export */ });\n/**\n * Gets the price for a swap between two tokens on an EVM network.\n *\n * @param {CdpOpenApiClientType} client - The client to use to get the swap price.\n * @param {GetSwapPriceOptions} options - The options for getting a swap price.\n *\n * @returns {Promise<GetSwapPriceResult | SwapUnavailableResult>} A promise that resolves to the swap price result or a response indicating that liquidity is unavailable.\n *\n * @example **Getting a swap price**\n * ```ts\n * const price = await getSwapPrice(client, {\n *   network: \"ethereum-mainnet\",\n *   toToken: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\n *   fromToken: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", // WETH\n *   fromAmount: BigInt(\"1000000000000000000\"), // 1 WETH in wei\n *   taker: \"0x1234567890123456789012345678901234567890\",\n *   idempotencyKey: \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" // Optional: for request deduplication\n * });\n * ```\n */\nasync function getSwapPrice(client, options) {\n    // Call the getEvmSwapPrice function directly with the client's configured API\n    const response = await client.getEvmSwapPrice({\n        network: options.network,\n        toToken: options.toToken,\n        fromToken: options.fromToken,\n        fromAmount: options.fromAmount.toString(),\n        taker: options.taker,\n        signerAddress: options.signerAddress,\n        gasPrice: options.gasPrice?.toString(),\n        slippageBps: options.slippageBps,\n    }, options.idempotencyKey);\n    // Check if liquidity is unavailable\n    if (!response.liquidityAvailable) {\n        // Return the SwapUnavailableResult\n        return {\n            liquidityAvailable: false,\n        };\n    }\n    // At this point we know it's a GetSwapPriceResponse with liquidityAvailable as true\n    const quoteResponse = response;\n    return {\n        blockNumber: BigInt(quoteResponse.blockNumber),\n        toAmount: BigInt(quoteResponse.toAmount),\n        toToken: quoteResponse.toToken,\n        fees: {\n            gasFee: quoteResponse.fees.gasFee\n                ? {\n                    amount: BigInt(quoteResponse.fees.gasFee.amount),\n                    token: quoteResponse.fees.gasFee.token,\n                }\n                : undefined,\n            protocolFee: quoteResponse.fees.protocolFee\n                ? {\n                    amount: BigInt(quoteResponse.fees.protocolFee.amount),\n                    token: quoteResponse.fees.protocolFee.token,\n                }\n                : undefined,\n        },\n        issues: {\n            allowance: quoteResponse.issues.allowance\n                ? {\n                    currentAllowance: BigInt(quoteResponse.issues.allowance.currentAllowance),\n                    spender: quoteResponse.issues.allowance.spender,\n                }\n                : undefined,\n            balance: quoteResponse.issues.balance\n                ? {\n                    token: quoteResponse.issues.balance.token,\n                    currentBalance: BigInt(quoteResponse.issues.balance.currentBalance),\n                    requiredBalance: BigInt(quoteResponse.issues.balance.requiredBalance),\n                }\n                : undefined,\n            simulationIncomplete: quoteResponse.issues.simulationIncomplete,\n        },\n        liquidityAvailable: true,\n        minToAmount: BigInt(quoteResponse.minToAmount),\n        fromAmount: BigInt(quoteResponse.fromAmount),\n        fromToken: quoteResponse.fromToken,\n        gas: quoteResponse.gas ? BigInt(quoteResponse.gas) : undefined,\n        gasPrice: quoteResponse.gasPrice ? BigInt(quoteResponse.gasPrice) : undefined,\n    };\n}\n//# sourceMappingURL=getSwapPrice.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS9zd2FwL2dldFN3YXBQcmljZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzQkFBc0I7QUFDakMsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQSxhQUFhLHFEQUFxRDtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYWN0aW9ucy9ldm0vc3dhcC9nZXRTd2FwUHJpY2UuanM/YmNlZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdldHMgdGhlIHByaWNlIGZvciBhIHN3YXAgYmV0d2VlbiB0d28gdG9rZW5zIG9uIGFuIEVWTSBuZXR3b3JrLlxuICpcbiAqIEBwYXJhbSB7Q2RwT3BlbkFwaUNsaWVudFR5cGV9IGNsaWVudCAtIFRoZSBjbGllbnQgdG8gdXNlIHRvIGdldCB0aGUgc3dhcCBwcmljZS5cbiAqIEBwYXJhbSB7R2V0U3dhcFByaWNlT3B0aW9uc30gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBnZXR0aW5nIGEgc3dhcCBwcmljZS5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxHZXRTd2FwUHJpY2VSZXN1bHQgfCBTd2FwVW5hdmFpbGFibGVSZXN1bHQ+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgc3dhcCBwcmljZSByZXN1bHQgb3IgYSByZXNwb25zZSBpbmRpY2F0aW5nIHRoYXQgbGlxdWlkaXR5IGlzIHVuYXZhaWxhYmxlLlxuICpcbiAqIEBleGFtcGxlICoqR2V0dGluZyBhIHN3YXAgcHJpY2UqKlxuICogYGBgdHNcbiAqIGNvbnN0IHByaWNlID0gYXdhaXQgZ2V0U3dhcFByaWNlKGNsaWVudCwge1xuICogICBuZXR3b3JrOiBcImV0aGVyZXVtLW1haW5uZXRcIixcbiAqICAgdG9Ub2tlbjogXCIweEEwYjg2OTkxYzYyMThiMzZjMWQxOUQ0YTJlOUViMGNFMzYwNmVCNDhcIiwgLy8gVVNEQ1xuICogICBmcm9tVG9rZW46IFwiMHhDMDJhYUEzOWIyMjNGRThEMEEwZTVDNEYyN2VBRDkwODNDNzU2Q2MyXCIsIC8vIFdFVEhcbiAqICAgZnJvbUFtb3VudDogQmlnSW50KFwiMTAwMDAwMDAwMDAwMDAwMDAwMFwiKSwgLy8gMSBXRVRIIGluIHdlaVxuICogICB0YWtlcjogXCIweDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBcIixcbiAqICAgaWRlbXBvdGVuY3lLZXk6IFwieHh4eHh4eHgteHh4eC14eHh4LXh4eHgteHh4eHh4eHh4eHh4XCIgLy8gT3B0aW9uYWw6IGZvciByZXF1ZXN0IGRlZHVwbGljYXRpb25cbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTd2FwUHJpY2UoY2xpZW50LCBvcHRpb25zKSB7XG4gICAgLy8gQ2FsbCB0aGUgZ2V0RXZtU3dhcFByaWNlIGZ1bmN0aW9uIGRpcmVjdGx5IHdpdGggdGhlIGNsaWVudCdzIGNvbmZpZ3VyZWQgQVBJXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0RXZtU3dhcFByaWNlKHtcbiAgICAgICAgbmV0d29yazogb3B0aW9ucy5uZXR3b3JrLFxuICAgICAgICB0b1Rva2VuOiBvcHRpb25zLnRvVG9rZW4sXG4gICAgICAgIGZyb21Ub2tlbjogb3B0aW9ucy5mcm9tVG9rZW4sXG4gICAgICAgIGZyb21BbW91bnQ6IG9wdGlvbnMuZnJvbUFtb3VudC50b1N0cmluZygpLFxuICAgICAgICB0YWtlcjogb3B0aW9ucy50YWtlcixcbiAgICAgICAgc2lnbmVyQWRkcmVzczogb3B0aW9ucy5zaWduZXJBZGRyZXNzLFxuICAgICAgICBnYXNQcmljZTogb3B0aW9ucy5nYXNQcmljZT8udG9TdHJpbmcoKSxcbiAgICAgICAgc2xpcHBhZ2VCcHM6IG9wdGlvbnMuc2xpcHBhZ2VCcHMsXG4gICAgfSwgb3B0aW9ucy5pZGVtcG90ZW5jeUtleSk7XG4gICAgLy8gQ2hlY2sgaWYgbGlxdWlkaXR5IGlzIHVuYXZhaWxhYmxlXG4gICAgaWYgKCFyZXNwb25zZS5saXF1aWRpdHlBdmFpbGFibGUpIHtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSBTd2FwVW5hdmFpbGFibGVSZXN1bHRcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpcXVpZGl0eUF2YWlsYWJsZTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEF0IHRoaXMgcG9pbnQgd2Uga25vdyBpdCdzIGEgR2V0U3dhcFByaWNlUmVzcG9uc2Ugd2l0aCBsaXF1aWRpdHlBdmFpbGFibGUgYXMgdHJ1ZVxuICAgIGNvbnN0IHF1b3RlUmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBibG9ja051bWJlcjogQmlnSW50KHF1b3RlUmVzcG9uc2UuYmxvY2tOdW1iZXIpLFxuICAgICAgICB0b0Ftb3VudDogQmlnSW50KHF1b3RlUmVzcG9uc2UudG9BbW91bnQpLFxuICAgICAgICB0b1Rva2VuOiBxdW90ZVJlc3BvbnNlLnRvVG9rZW4sXG4gICAgICAgIGZlZXM6IHtcbiAgICAgICAgICAgIGdhc0ZlZTogcXVvdGVSZXNwb25zZS5mZWVzLmdhc0ZlZVxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IEJpZ0ludChxdW90ZVJlc3BvbnNlLmZlZXMuZ2FzRmVlLmFtb3VudCksXG4gICAgICAgICAgICAgICAgICAgIHRva2VuOiBxdW90ZVJlc3BvbnNlLmZlZXMuZ2FzRmVlLnRva2VuLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHByb3RvY29sRmVlOiBxdW90ZVJlc3BvbnNlLmZlZXMucHJvdG9jb2xGZWVcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBCaWdJbnQocXVvdGVSZXNwb25zZS5mZWVzLnByb3RvY29sRmVlLmFtb3VudCksXG4gICAgICAgICAgICAgICAgICAgIHRva2VuOiBxdW90ZVJlc3BvbnNlLmZlZXMucHJvdG9jb2xGZWUudG9rZW4sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9LFxuICAgICAgICBpc3N1ZXM6IHtcbiAgICAgICAgICAgIGFsbG93YW5jZTogcXVvdGVSZXNwb25zZS5pc3N1ZXMuYWxsb3dhbmNlXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBbGxvd2FuY2U6IEJpZ0ludChxdW90ZVJlc3BvbnNlLmlzc3Vlcy5hbGxvd2FuY2UuY3VycmVudEFsbG93YW5jZSksXG4gICAgICAgICAgICAgICAgICAgIHNwZW5kZXI6IHF1b3RlUmVzcG9uc2UuaXNzdWVzLmFsbG93YW5jZS5zcGVuZGVyLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJhbGFuY2U6IHF1b3RlUmVzcG9uc2UuaXNzdWVzLmJhbGFuY2VcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IHF1b3RlUmVzcG9uc2UuaXNzdWVzLmJhbGFuY2UudG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCYWxhbmNlOiBCaWdJbnQocXVvdGVSZXNwb25zZS5pc3N1ZXMuYmFsYW5jZS5jdXJyZW50QmFsYW5jZSksXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkQmFsYW5jZTogQmlnSW50KHF1b3RlUmVzcG9uc2UuaXNzdWVzLmJhbGFuY2UucmVxdWlyZWRCYWxhbmNlKSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzaW11bGF0aW9uSW5jb21wbGV0ZTogcXVvdGVSZXNwb25zZS5pc3N1ZXMuc2ltdWxhdGlvbkluY29tcGxldGUsXG4gICAgICAgIH0sXG4gICAgICAgIGxpcXVpZGl0eUF2YWlsYWJsZTogdHJ1ZSxcbiAgICAgICAgbWluVG9BbW91bnQ6IEJpZ0ludChxdW90ZVJlc3BvbnNlLm1pblRvQW1vdW50KSxcbiAgICAgICAgZnJvbUFtb3VudDogQmlnSW50KHF1b3RlUmVzcG9uc2UuZnJvbUFtb3VudCksXG4gICAgICAgIGZyb21Ub2tlbjogcXVvdGVSZXNwb25zZS5mcm9tVG9rZW4sXG4gICAgICAgIGdhczogcXVvdGVSZXNwb25zZS5nYXMgPyBCaWdJbnQocXVvdGVSZXNwb25zZS5nYXMpIDogdW5kZWZpbmVkLFxuICAgICAgICBnYXNQcmljZTogcXVvdGVSZXNwb25zZS5nYXNQcmljZSA/IEJpZ0ludChxdW90ZVJlc3BvbnNlLmdhc1ByaWNlKSA6IHVuZGVmaW5lZCxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0U3dhcFByaWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/getSwapPrice.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapOperation.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapOperation.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendSwapOperation: () => (/* binding */ sendSwapOperation)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/data/size.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/data/concat.js\");\n/* harmony import */ var _createSwapQuote_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createSwapQuote.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/createSwapQuote.js\");\n/* harmony import */ var _utils_uuidV4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/uuidV4.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/uuidV4.js\");\n/* harmony import */ var _sendUserOperation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../sendUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendUserOperation.js\");\n/* harmony import */ var _signAndWrapTypedDataForSmartAccount_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../signAndWrapTypedDataForSmartAccount.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/signAndWrapTypedDataForSmartAccount.js\");\n\n\n\n\n\n/**\n * Sends a swap operation to the blockchain via a smart account user operation.\n * Handles any permit2 signatures required for the swap.\n *\n * If you encounter token allowance issues, you'll need to perform a token approval transaction first to allow\n * the Permit2 contract to spend the appropriate amount of your fromToken.\n * See examples for code on handling token approvals.\n *\n * @param {CdpOpenApiClientType} client - The client to use for sending the swap operation.\n * @param {SendSwapOperationOptions} options - The options for the swap submission.\n *\n * @returns {Promise<SendSwapOperationResult>} A promise that resolves to the user operation result.\n *\n * @throws {Error} If liquidity is not available for the swap.\n * @throws {Error} If there are insufficient token allowances. In this case, you need to approve the\n *                 Permit2 contract to spend your tokens before attempting the swap. The error message\n *                 will include the current allowance and the spender address that needs approval.\n * @throws {Error} If no transaction data is found in the swap result.\n *\n * @example **Sending a swap with pre-created swap quote object**\n * ```ts\n * // First create a swap quote\n * const swapQuote = await cdp.evm.createSwapQuote({\n *   network: \"base\",\n *   toToken: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\n *   fromToken: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", // WETH\n *   fromAmount: BigInt(\"1000000000000000000\"), // 1 WETH in wei\n *   taker: smartAccount.address\n * });\n *\n * // Check if liquidity is available\n * if (!swapQuote.liquidityAvailable) {\n *   console.error(\"Insufficient liquidity for swap\");\n *   return;\n * }\n *\n * // Send the swap operation\n * const result = await sendSwapOperation(client, {\n *   smartAccount: smartAccount,\n *   swapQuote: swapQuote\n * });\n *\n * console.log(`Swap operation sent with user op hash: ${result.userOpHash}`);\n * ```\n *\n * @example **Sending a swap with inline options (all-in-one)**\n * ```ts\n * // Send swap operation in one call\n * const result = await sendSwapOperation(client, {\n *   smartAccount: smartAccount,\n *   network: \"base\",\n *   toToken: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\n *   fromToken: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", // WETH\n *   fromAmount: BigInt(\"1000000000000000000\"), // 1 WETH in wei\n *   taker: smartAccount.address\n * });\n *\n * console.log(`Swap operation sent with user op hash: ${result.userOpHash}`);\n * ```\n */\nasync function sendSwapOperation(client, options) {\n    const { smartAccount, paymasterUrl, idempotencyKey } = options;\n    let swapResult;\n    // Determine if we need to create the swap quote or use the provided one\n    if (\"swapQuote\" in options) {\n        // Use the provided swap quote\n        swapResult = options.swapQuote;\n    }\n    else {\n        // Create the swap quote using the provided options (inline options)\n        /**\n         * Deterministically derive a new idempotency key from the provided idempotency key for swap quote creation to avoid key reuse.\n         */\n        const swapQuoteIdempotencyKey = idempotencyKey\n            ? (0,_utils_uuidV4_js__WEBPACK_IMPORTED_MODULE_0__.createDeterministicUuidV4)(idempotencyKey, \"createSwapQuote\")\n            : undefined;\n        swapResult = await (0,_createSwapQuote_js__WEBPACK_IMPORTED_MODULE_1__.createSwapQuote)(client, {\n            network: options.network,\n            toToken: options.toToken,\n            fromToken: options.fromToken,\n            fromAmount: options.fromAmount,\n            taker: options.taker,\n            signerAddress: options.signerAddress,\n            gasPrice: options.gasPrice,\n            slippageBps: options.slippageBps,\n            idempotencyKey: swapQuoteIdempotencyKey,\n        });\n    }\n    // Check if liquidity is available\n    if (!swapResult.liquidityAvailable) {\n        throw new Error(\"Insufficient liquidity for swap\");\n    }\n    // At this point, we know that swapResult is CreateSwapQuoteResult\n    const swap = swapResult;\n    // Check for allowance issues\n    if (swap.issues?.allowance) {\n        const { currentAllowance, spender } = swap.issues.allowance;\n        throw new Error(`Insufficient token allowance for swap. Current allowance: ${currentAllowance}. ` +\n            `Please approve the Permit2 contract (${spender}) to spend your tokens.`);\n    }\n    // If the transaction doesn't exist, throw an error\n    if (!swap.transaction) {\n        throw new Error(\"No transaction data found in the swap\");\n    }\n    // Get the transaction data and modify it if needed for Permit2\n    let txData = swap.transaction.data;\n    if (swap.permit2?.eip712) {\n        // Create the permit2 idempotency key\n        const permit2IdempotencyKey = idempotencyKey\n            ? (0,_utils_uuidV4_js__WEBPACK_IMPORTED_MODULE_0__.createDeterministicUuidV4)(idempotencyKey, \"permit2\")\n            : undefined;\n        // Sign and wrap the permit2 typed data according to the Coinbase Smart Wallet contract requirements for EIP-712 signatures\n        const { signature: wrappedSignature } = await (0,_signAndWrapTypedDataForSmartAccount_js__WEBPACK_IMPORTED_MODULE_2__.signAndWrapTypedDataForSmartAccount)(client, {\n            smartAccount,\n            chainId: BigInt(swap.permit2.eip712.domain.chainId || 1),\n            typedData: swap.permit2.eip712,\n            ownerIndex: 0n,\n            idempotencyKey: permit2IdempotencyKey,\n        });\n        // Calculate the Permit2 signature length as a 32-byte hex value\n        const permit2SignatureLengthInHex = (0,viem__WEBPACK_IMPORTED_MODULE_3__.numberToHex)((0,viem__WEBPACK_IMPORTED_MODULE_4__.size)(wrappedSignature), {\n            signed: false,\n            size: 32,\n        });\n        // Append the Permit2 signature length and signature to the transaction data\n        txData = (0,viem__WEBPACK_IMPORTED_MODULE_5__.concat)([txData, permit2SignatureLengthInHex, wrappedSignature]);\n    }\n    // Send the swap as a user operation\n    const result = await (0,_sendUserOperation_js__WEBPACK_IMPORTED_MODULE_6__.sendUserOperation)(client, {\n        smartAccount: smartAccount,\n        network: swap.network,\n        paymasterUrl,\n        idempotencyKey,\n        calls: [\n            {\n                to: swap.transaction.to,\n                data: txData,\n                // Only include value if it exists\n                ...(swap.transaction.value ? { value: BigInt(swap.transaction.value) } : {}),\n            },\n        ],\n    });\n    return result;\n}\n//# sourceMappingURL=sendSwapOperation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapTransaction.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapTransaction.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendSwapTransaction: () => (/* binding */ sendSwapTransaction)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/data/size.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/data/concat.js\");\n/* harmony import */ var _createSwapQuote_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createSwapQuote.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/createSwapQuote.js\");\n/* harmony import */ var _utils_uuidV4_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/uuidV4.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/uuidV4.js\");\n/* harmony import */ var _sendTransaction_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sendTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendTransaction.js\");\n\n\n\n\n/**\n * Sends a swap transaction to the blockchain.\n * Handles any permit2 signatures required for the swap.\n *\n * If you encounter token allowance issues, you'll need to perform a token approval transaction first to allow\n * the Permit2 contract to spend the appropriate amount of your fromToken.\n * See `examples/typescript/evm/account.sendSwapTransaction.ts` for example code on handling token approvals.\n *\n * @param {CdpOpenApiClientType} client - The client to use for sending the swap.\n * @param {SendSwapTransactionOptions} options - The options for the swap submission.\n *\n * @returns {Promise<SendSwapTransactionResult>} A promise that resolves to the transaction hash.\n *\n * @throws {Error} If liquidity is not available for the swap.\n * @throws {Error} If there are insufficient token allowances. In this case, you need to approve the\n *                 Permit2 contract to spend your tokens before attempting the swap. The error message\n *                 will include the current allowance and the spender address that needs approval.\n * @throws {Error} If no transaction data is found in the swap result.\n *\n * @example **Sending a swap with pre-created swap quote object**\n * ```ts\n * // First create a swap quote\n * const swapQuote = await cdp.evm.createSwapQuote({\n *   network: \"base\",\n *   toToken: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\n *   fromToken: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", // WETH\n *   fromAmount: BigInt(\"1000000000000000000\"), // 1 WETH in wei\n *   taker: account.address\n * });\n *\n * // Check if liquidity is available\n * if (!swapQuote.liquidityAvailable) {\n *   console.error(\"Insufficient liquidity for swap\");\n *   return;\n * }\n *\n * // Send the swap\n * const result = await sendSwapTransaction(client, {\n *   address: account.address,\n *   swapQuote: swapQuote\n * });\n *\n * console.log(`Swap sent with transaction hash: ${result.transactionHash}`);\n * ```\n *\n * @example **Sending a swap with inline options (all-in-one)**\n * ```ts\n * // Send swap in one call\n * const result = await sendSwapTransaction(client, {\n *   address: account.address,\n *   network: \"base\",\n *   toToken: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\n *   fromToken: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", // WETH\n *   fromAmount: BigInt(\"1000000000000000000\"), // 1 WETH in wei\n *   taker: account.address\n * });\n *\n * console.log(`Swap sent with transaction hash: ${result.transactionHash}`);\n * ```\n */\nasync function sendSwapTransaction(client, options) {\n    const { address, idempotencyKey } = options;\n    let swapResult;\n    // Determine if we need to create the swap quote or use the provided one\n    if (\"swapQuote\" in options) {\n        // Use the provided swap quote\n        swapResult = options.swapQuote;\n    }\n    else {\n        // Create the swap quote using the provided options (InlineSendSwapTransactionOptions)\n        /**\n         * Deterministically derive a new idempotency key from the provided idempotency key for swap quote creation to avoid key reuse.\n         */\n        const swapQuoteIdempotencyKey = idempotencyKey\n            ? (0,_utils_uuidV4_js__WEBPACK_IMPORTED_MODULE_0__.createDeterministicUuidV4)(idempotencyKey, \"createSwapQuote\")\n            : undefined;\n        swapResult = await (0,_createSwapQuote_js__WEBPACK_IMPORTED_MODULE_1__.createSwapQuote)(client, {\n            network: options.network,\n            toToken: options.toToken,\n            fromToken: options.fromToken,\n            fromAmount: options.fromAmount,\n            taker: options.taker,\n            signerAddress: options.signerAddress,\n            gasPrice: options.gasPrice,\n            slippageBps: options.slippageBps,\n            idempotencyKey: swapQuoteIdempotencyKey,\n        });\n    }\n    // Check if liquidity is available\n    if (!swapResult.liquidityAvailable) {\n        throw new Error(\"Insufficient liquidity for swap\");\n    }\n    // At this point, we know that swapResult is CreateSwapQuoteResult\n    const swap = swapResult;\n    // Check for allowance issues\n    if (swap.issues?.allowance) {\n        const { currentAllowance, spender } = swap.issues.allowance;\n        throw new Error(`Insufficient token allowance for swap. Current allowance: ${currentAllowance}. ` +\n            `Please approve the Permit2 contract (${spender}) to spend your tokens.`);\n    }\n    // If the transaction doesn't exist, throw an error\n    if (!swap.transaction) {\n        throw new Error(\"No transaction data found in the swap\");\n    }\n    // Get the transaction data and modify it if needed for Permit2\n    let txData = swap.transaction.data;\n    if (swap.permit2?.eip712) {\n        /**\n         * Sign the Permit2 EIP-712 message.\n         * Deterministically derive a new idempotency key from the provided idempotency key for permit2 signing to avoid key reuse.\n         */\n        const permit2IdempotencyKey = idempotencyKey\n            ? (0,_utils_uuidV4_js__WEBPACK_IMPORTED_MODULE_0__.createDeterministicUuidV4)(idempotencyKey, \"permit2\")\n            : undefined;\n        const signature = await client.signEvmTypedData(address, {\n            domain: swap.permit2.eip712.domain,\n            types: swap.permit2.eip712.types,\n            primaryType: swap.permit2.eip712.primaryType,\n            message: swap.permit2.eip712.message,\n        }, permit2IdempotencyKey);\n        // Calculate the signature length as a 32-byte hex value\n        const signatureLengthInHex = (0,viem__WEBPACK_IMPORTED_MODULE_2__.numberToHex)((0,viem__WEBPACK_IMPORTED_MODULE_3__.size)(signature.signature), {\n            signed: false,\n            size: 32,\n        });\n        // Append the signature length and signature to the transaction data\n        txData = (0,viem__WEBPACK_IMPORTED_MODULE_4__.concat)([txData, signatureLengthInHex, signature.signature]);\n    }\n    // Create a transaction object\n    const transaction = {\n        to: swap.transaction.to,\n        data: txData,\n        // Only include these properties if they exist\n        ...(swap.transaction.value ? { value: BigInt(swap.transaction.value) } : {}),\n        ...(swap.transaction.gas ? { gas: BigInt(swap.transaction.gas) } : {}),\n    };\n    // Use sendTransaction instead of directly calling client.sendEvmTransaction\n    const result = await (0,_sendTransaction_js__WEBPACK_IMPORTED_MODULE_5__.sendTransaction)(client, {\n        address,\n        network: swap.network,\n        transaction,\n        idempotencyKey,\n    });\n    return {\n        transactionHash: result.transactionHash,\n    };\n}\n//# sourceMappingURL=sendSwapTransaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/sendSwapTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/accountTransferStrategy.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/accountTransferStrategy.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accountTransferStrategy: () => (/* binding */ accountTransferStrategy)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/abi/encodeFunctionData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/constants/abis.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/utils.js\");\n/* harmony import */ var _utils_serializeTransaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/serializeTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/serializeTransaction.js\");\n\n\n\nconst accountTransferStrategy = {\n    executeTransfer: async ({ apiClient, from, to, value, token, network }) => {\n        network = network;\n        if (token === \"eth\") {\n            return apiClient.sendEvmTransaction(from.address, {\n                transaction: (0,_utils_serializeTransaction_js__WEBPACK_IMPORTED_MODULE_0__.serializeEIP1559Transaction)({\n                    value,\n                    to,\n                }),\n                network,\n            });\n        }\n        const erc20Address = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getErc20Address)(token, network);\n        return apiClient.sendEvmTransaction(from.address, {\n            transaction: (0,_utils_serializeTransaction_js__WEBPACK_IMPORTED_MODULE_0__.serializeEIP1559Transaction)({\n                to: erc20Address,\n                data: (0,viem__WEBPACK_IMPORTED_MODULE_2__.encodeFunctionData)({\n                    abi: viem__WEBPACK_IMPORTED_MODULE_3__.erc20Abi,\n                    functionName: \"transfer\",\n                    args: [to, value],\n                }),\n            }),\n            network,\n        });\n    },\n};\n//# sourceMappingURL=accountTransferStrategy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS90cmFuc2Zlci9hY2NvdW50VHJhbnNmZXJTdHJhdGVneS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNQO0FBQ3dDO0FBQzlFO0FBQ1AsOEJBQThCLDRDQUE0QztBQUMxRTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsMkZBQTJCO0FBQ3hEO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQSw2QkFBNkIsMERBQWU7QUFDNUM7QUFDQSx5QkFBeUIsMkZBQTJCO0FBQ3BEO0FBQ0Esc0JBQXNCLHdEQUFrQjtBQUN4Qyx5QkFBeUIsMENBQVE7QUFDakM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYWN0aW9ucy9ldm0vdHJhbnNmZXIvYWNjb3VudFRyYW5zZmVyU3RyYXRlZ3kuanM/N2E5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmNvZGVGdW5jdGlvbkRhdGEsIGVyYzIwQWJpIH0gZnJvbSBcInZpZW1cIjtcbmltcG9ydCB7IGdldEVyYzIwQWRkcmVzcyB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBzZXJpYWxpemVFSVAxNTU5VHJhbnNhY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvc2VyaWFsaXplVHJhbnNhY3Rpb24uanNcIjtcbmV4cG9ydCBjb25zdCBhY2NvdW50VHJhbnNmZXJTdHJhdGVneSA9IHtcbiAgICBleGVjdXRlVHJhbnNmZXI6IGFzeW5jICh7IGFwaUNsaWVudCwgZnJvbSwgdG8sIHZhbHVlLCB0b2tlbiwgbmV0d29yayB9KSA9PiB7XG4gICAgICAgIG5ldHdvcmsgPSBuZXR3b3JrO1xuICAgICAgICBpZiAodG9rZW4gPT09IFwiZXRoXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBhcGlDbGllbnQuc2VuZEV2bVRyYW5zYWN0aW9uKGZyb20uYWRkcmVzcywge1xuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiBzZXJpYWxpemVFSVAxNTU5VHJhbnNhY3Rpb24oe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdG8sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbmV0d29yayxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVyYzIwQWRkcmVzcyA9IGdldEVyYzIwQWRkcmVzcyh0b2tlbiwgbmV0d29yayk7XG4gICAgICAgIHJldHVybiBhcGlDbGllbnQuc2VuZEV2bVRyYW5zYWN0aW9uKGZyb20uYWRkcmVzcywge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb246IHNlcmlhbGl6ZUVJUDE1NTlUcmFuc2FjdGlvbih7XG4gICAgICAgICAgICAgICAgdG86IGVyYzIwQWRkcmVzcyxcbiAgICAgICAgICAgICAgICBkYXRhOiBlbmNvZGVGdW5jdGlvbkRhdGEoe1xuICAgICAgICAgICAgICAgICAgICBhYmk6IGVyYzIwQWJpLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IFwidHJhbnNmZXJcIixcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW3RvLCB2YWx1ZV0sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ldHdvcmssXG4gICAgICAgIH0pO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjb3VudFRyYW5zZmVyU3RyYXRlZ3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/accountTransferStrategy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/smartAccountTransferStrategy.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/smartAccountTransferStrategy.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   smartAccountTransferStrategy: () => (/* binding */ smartAccountTransferStrategy)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/abi/encodeFunctionData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/constants/abis.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/utils.js\");\n/* harmony import */ var _sendUserOperation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sendUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendUserOperation.js\");\n\n\n\nconst smartAccountTransferStrategy = {\n    executeTransfer: async ({ apiClient, from, to, value, token, network, paymasterUrl }) => {\n        const smartAccountNetwork = network;\n        if (token === \"eth\") {\n            const result = await (0,_sendUserOperation_js__WEBPACK_IMPORTED_MODULE_0__.sendUserOperation)(apiClient, {\n                smartAccount: from,\n                paymasterUrl,\n                network: smartAccountNetwork,\n                calls: [\n                    {\n                        to,\n                        value,\n                        data: \"0x\",\n                    },\n                ],\n            });\n            return result;\n        }\n        else {\n            const erc20Address = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getErc20Address)(token, network);\n            const result = await (0,_sendUserOperation_js__WEBPACK_IMPORTED_MODULE_0__.sendUserOperation)(apiClient, {\n                smartAccount: from,\n                paymasterUrl,\n                network: smartAccountNetwork,\n                calls: [\n                    {\n                        to: erc20Address,\n                        data: (0,viem__WEBPACK_IMPORTED_MODULE_2__.encodeFunctionData)({\n                            abi: viem__WEBPACK_IMPORTED_MODULE_3__.erc20Abi,\n                            functionName: \"transfer\",\n                            args: [to, value],\n                        }),\n                    },\n                ],\n            });\n            return result;\n        }\n    },\n};\n//# sourceMappingURL=smartAccountTransferStrategy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS90cmFuc2Zlci9zbWFydEFjY291bnRUcmFuc2ZlclN0cmF0ZWd5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9EO0FBQ1A7QUFDZTtBQUNyRDtBQUNQLDhCQUE4QiwwREFBMEQ7QUFDeEY7QUFDQTtBQUNBLGlDQUFpQyx3RUFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsMERBQWU7QUFDaEQsaUNBQWlDLHdFQUFpQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsd0RBQWtCO0FBQ2hELGlDQUFpQywwQ0FBUTtBQUN6QztBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYWN0aW9ucy9ldm0vdHJhbnNmZXIvc21hcnRBY2NvdW50VHJhbnNmZXJTdHJhdGVneS5qcz9hZDMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuY29kZUZ1bmN0aW9uRGF0YSwgZXJjMjBBYmkgfSBmcm9tIFwidmllbVwiO1xuaW1wb3J0IHsgZ2V0RXJjMjBBZGRyZXNzIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCB7IHNlbmRVc2VyT3BlcmF0aW9uIH0gZnJvbSBcIi4uL3NlbmRVc2VyT3BlcmF0aW9uLmpzXCI7XG5leHBvcnQgY29uc3Qgc21hcnRBY2NvdW50VHJhbnNmZXJTdHJhdGVneSA9IHtcbiAgICBleGVjdXRlVHJhbnNmZXI6IGFzeW5jICh7IGFwaUNsaWVudCwgZnJvbSwgdG8sIHZhbHVlLCB0b2tlbiwgbmV0d29yaywgcGF5bWFzdGVyVXJsIH0pID0+IHtcbiAgICAgICAgY29uc3Qgc21hcnRBY2NvdW50TmV0d29yayA9IG5ldHdvcms7XG4gICAgICAgIGlmICh0b2tlbiA9PT0gXCJldGhcIikge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VuZFVzZXJPcGVyYXRpb24oYXBpQ2xpZW50LCB7XG4gICAgICAgICAgICAgICAgc21hcnRBY2NvdW50OiBmcm9tLFxuICAgICAgICAgICAgICAgIHBheW1hc3RlclVybCxcbiAgICAgICAgICAgICAgICBuZXR3b3JrOiBzbWFydEFjY291bnROZXR3b3JrLFxuICAgICAgICAgICAgICAgIGNhbGxzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBcIjB4XCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVyYzIwQWRkcmVzcyA9IGdldEVyYzIwQWRkcmVzcyh0b2tlbiwgbmV0d29yayk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZW5kVXNlck9wZXJhdGlvbihhcGlDbGllbnQsIHtcbiAgICAgICAgICAgICAgICBzbWFydEFjY291bnQ6IGZyb20sXG4gICAgICAgICAgICAgICAgcGF5bWFzdGVyVXJsLFxuICAgICAgICAgICAgICAgIG5ldHdvcms6IHNtYXJ0QWNjb3VudE5ldHdvcmssXG4gICAgICAgICAgICAgICAgY2FsbHM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG86IGVyYzIwQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGVuY29kZUZ1bmN0aW9uRGF0YSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJpOiBlcmMyMEFiaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IFwidHJhbnNmZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbdG8sIHZhbHVlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNtYXJ0QWNjb3VudFRyYW5zZmVyU3RyYXRlZ3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/smartAccountTransferStrategy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/transfer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/transfer.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transfer: () => (/* binding */ transfer)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/types.js\");\n\n/**\n * Transfer an amount of a token from an account to another account.\n *\n * @param apiClient - The client to use to send the transaction.\n * @param from - The account to send the transaction from.\n * @param transferArgs - The options for the transfer.\n * @param transferStrategy - The strategy to use to execute the transfer.\n * @returns The result of the transfer.\n */\nasync function transfer(apiClient, from, transferArgs, transferStrategy) {\n    if (!(0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isValidNetworkForAccount)(transferArgs.network, from)) {\n        throw new Error(`Network \"${transferArgs.network}\" is not supported for the given account type.`);\n    }\n    const to = typeof transferArgs.to === \"string\" ? transferArgs.to : transferArgs.to.address;\n    const transfer = {\n        apiClient,\n        from,\n        to,\n        value: transferArgs.amount,\n        token: transferArgs.token,\n        network: transferArgs.network,\n        paymasterUrl: \"paymasterUrl\" in transferArgs ? transferArgs.paymasterUrl : undefined,\n    };\n    return transferStrategy.executeTransfer(transfer);\n}\n//# sourceMappingURL=transfer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS90cmFuc2Zlci90cmFuc2Zlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFNBQVMsbUVBQXdCO0FBQ2pDLG9DQUFvQyxxQkFBcUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS90cmFuc2Zlci90cmFuc2Zlci5qcz8yNDVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVmFsaWROZXR3b3JrRm9yQWNjb3VudCB9IGZyb20gXCIuL3R5cGVzLmpzXCI7XG4vKipcbiAqIFRyYW5zZmVyIGFuIGFtb3VudCBvZiBhIHRva2VuIGZyb20gYW4gYWNjb3VudCB0byBhbm90aGVyIGFjY291bnQuXG4gKlxuICogQHBhcmFtIGFwaUNsaWVudCAtIFRoZSBjbGllbnQgdG8gdXNlIHRvIHNlbmQgdGhlIHRyYW5zYWN0aW9uLlxuICogQHBhcmFtIGZyb20gLSBUaGUgYWNjb3VudCB0byBzZW5kIHRoZSB0cmFuc2FjdGlvbiBmcm9tLlxuICogQHBhcmFtIHRyYW5zZmVyQXJncyAtIFRoZSBvcHRpb25zIGZvciB0aGUgdHJhbnNmZXIuXG4gKiBAcGFyYW0gdHJhbnNmZXJTdHJhdGVneSAtIFRoZSBzdHJhdGVneSB0byB1c2UgdG8gZXhlY3V0ZSB0aGUgdHJhbnNmZXIuXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSB0cmFuc2Zlci5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRyYW5zZmVyKGFwaUNsaWVudCwgZnJvbSwgdHJhbnNmZXJBcmdzLCB0cmFuc2ZlclN0cmF0ZWd5KSB7XG4gICAgaWYgKCFpc1ZhbGlkTmV0d29ya0ZvckFjY291bnQodHJhbnNmZXJBcmdzLm5ldHdvcmssIGZyb20pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTmV0d29yayBcIiR7dHJhbnNmZXJBcmdzLm5ldHdvcmt9XCIgaXMgbm90IHN1cHBvcnRlZCBmb3IgdGhlIGdpdmVuIGFjY291bnQgdHlwZS5gKTtcbiAgICB9XG4gICAgY29uc3QgdG8gPSB0eXBlb2YgdHJhbnNmZXJBcmdzLnRvID09PSBcInN0cmluZ1wiID8gdHJhbnNmZXJBcmdzLnRvIDogdHJhbnNmZXJBcmdzLnRvLmFkZHJlc3M7XG4gICAgY29uc3QgdHJhbnNmZXIgPSB7XG4gICAgICAgIGFwaUNsaWVudCxcbiAgICAgICAgZnJvbSxcbiAgICAgICAgdG8sXG4gICAgICAgIHZhbHVlOiB0cmFuc2ZlckFyZ3MuYW1vdW50LFxuICAgICAgICB0b2tlbjogdHJhbnNmZXJBcmdzLnRva2VuLFxuICAgICAgICBuZXR3b3JrOiB0cmFuc2ZlckFyZ3MubmV0d29yayxcbiAgICAgICAgcGF5bWFzdGVyVXJsOiBcInBheW1hc3RlclVybFwiIGluIHRyYW5zZmVyQXJncyA/IHRyYW5zZmVyQXJncy5wYXltYXN0ZXJVcmwgOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgICByZXR1cm4gdHJhbnNmZXJTdHJhdGVneS5leGVjdXRlVHJhbnNmZXIodHJhbnNmZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNmZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/transfer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/transferWithViem.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/transferWithViem.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transferWithViem: () => (/* binding */ transferWithViem)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/abi/encodeFunctionData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/constants/abis.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/utils.js\");\n/* harmony import */ var _accounts_evm_chainToNetworkMapper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../accounts/evm/chainToNetworkMapper.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/chainToNetworkMapper.js\");\n\n\n\n/**\n * Transfer an amount of a token from a network-scoped account to another account.\n * This function is used for accounts that are scoped to a specific network and use\n * a wallet client for transaction execution instead of the API client.\n *\n * @param walletClient - The wallet client to use for transaction execution.\n * @param from - The account to send the transaction from.\n * @param transferArgs - The transfer options.\n * @returns The result of the transfer.\n */\nasync function transferWithViem(walletClient, from, transferArgs) {\n    const token = transferArgs.token;\n    const to = typeof transferArgs.to === \"string\" ? transferArgs.to : transferArgs.to.address;\n    const value = transferArgs.amount;\n    if (token === \"eth\") {\n        const hash = await walletClient.sendTransaction({\n            account: from.address,\n            to,\n            value,\n        });\n        return { transactionHash: hash };\n    }\n    const network = (0,_accounts_evm_chainToNetworkMapper_js__WEBPACK_IMPORTED_MODULE_0__.mapChainToNetwork)(walletClient.chain);\n    const erc20Address = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getErc20Address)(token, network);\n    // First approve the transfer\n    await walletClient.sendTransaction({\n        account: from.address,\n        to: erc20Address,\n        data: (0,viem__WEBPACK_IMPORTED_MODULE_2__.encodeFunctionData)({\n            abi: viem__WEBPACK_IMPORTED_MODULE_3__.erc20Abi,\n            functionName: \"approve\",\n            args: [to, value],\n        }),\n    });\n    // Then execute the transfer\n    const hash = await walletClient.sendTransaction({\n        account: from.address,\n        to: erc20Address,\n        data: (0,viem__WEBPACK_IMPORTED_MODULE_2__.encodeFunctionData)({\n            abi: viem__WEBPACK_IMPORTED_MODULE_3__.erc20Abi,\n            functionName: \"transfer\",\n            args: [to, value],\n        }),\n    });\n    return { transactionHash: hash };\n}\n//# sourceMappingURL=transferWithViem.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS90cmFuc2Zlci90cmFuc2ZlcldpdGhWaWVtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9EO0FBQ1A7QUFDcUM7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsaUJBQWlCO0FBQ2pCO0FBQ0Esb0JBQW9CLHdGQUFpQjtBQUNyQyx5QkFBeUIsMERBQWU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHdEQUFrQjtBQUNoQyxpQkFBaUIsMENBQVE7QUFDekI7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHdEQUFrQjtBQUNoQyxpQkFBaUIsMENBQVE7QUFDekI7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0wsYUFBYTtBQUNiO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYWN0aW9ucy9ldm0vdHJhbnNmZXIvdHJhbnNmZXJXaXRoVmllbS5qcz8xOThmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuY29kZUZ1bmN0aW9uRGF0YSwgZXJjMjBBYmkgfSBmcm9tIFwidmllbVwiO1xuaW1wb3J0IHsgZ2V0RXJjMjBBZGRyZXNzIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCB7IG1hcENoYWluVG9OZXR3b3JrIH0gZnJvbSBcIi4uLy4uLy4uL2FjY291bnRzL2V2bS9jaGFpblRvTmV0d29ya01hcHBlci5qc1wiO1xuLyoqXG4gKiBUcmFuc2ZlciBhbiBhbW91bnQgb2YgYSB0b2tlbiBmcm9tIGEgbmV0d29yay1zY29wZWQgYWNjb3VudCB0byBhbm90aGVyIGFjY291bnQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIGFjY291bnRzIHRoYXQgYXJlIHNjb3BlZCB0byBhIHNwZWNpZmljIG5ldHdvcmsgYW5kIHVzZVxuICogYSB3YWxsZXQgY2xpZW50IGZvciB0cmFuc2FjdGlvbiBleGVjdXRpb24gaW5zdGVhZCBvZiB0aGUgQVBJIGNsaWVudC5cbiAqXG4gKiBAcGFyYW0gd2FsbGV0Q2xpZW50IC0gVGhlIHdhbGxldCBjbGllbnQgdG8gdXNlIGZvciB0cmFuc2FjdGlvbiBleGVjdXRpb24uXG4gKiBAcGFyYW0gZnJvbSAtIFRoZSBhY2NvdW50IHRvIHNlbmQgdGhlIHRyYW5zYWN0aW9uIGZyb20uXG4gKiBAcGFyYW0gdHJhbnNmZXJBcmdzIC0gVGhlIHRyYW5zZmVyIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSB0cmFuc2Zlci5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRyYW5zZmVyV2l0aFZpZW0od2FsbGV0Q2xpZW50LCBmcm9tLCB0cmFuc2ZlckFyZ3MpIHtcbiAgICBjb25zdCB0b2tlbiA9IHRyYW5zZmVyQXJncy50b2tlbjtcbiAgICBjb25zdCB0byA9IHR5cGVvZiB0cmFuc2ZlckFyZ3MudG8gPT09IFwic3RyaW5nXCIgPyB0cmFuc2ZlckFyZ3MudG8gOiB0cmFuc2ZlckFyZ3MudG8uYWRkcmVzcztcbiAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZmVyQXJncy5hbW91bnQ7XG4gICAgaWYgKHRva2VuID09PSBcImV0aFwiKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBhd2FpdCB3YWxsZXRDbGllbnQuc2VuZFRyYW5zYWN0aW9uKHtcbiAgICAgICAgICAgIGFjY291bnQ6IGZyb20uYWRkcmVzcyxcbiAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyB0cmFuc2FjdGlvbkhhc2g6IGhhc2ggfTtcbiAgICB9XG4gICAgY29uc3QgbmV0d29yayA9IG1hcENoYWluVG9OZXR3b3JrKHdhbGxldENsaWVudC5jaGFpbik7XG4gICAgY29uc3QgZXJjMjBBZGRyZXNzID0gZ2V0RXJjMjBBZGRyZXNzKHRva2VuLCBuZXR3b3JrKTtcbiAgICAvLyBGaXJzdCBhcHByb3ZlIHRoZSB0cmFuc2ZlclxuICAgIGF3YWl0IHdhbGxldENsaWVudC5zZW5kVHJhbnNhY3Rpb24oe1xuICAgICAgICBhY2NvdW50OiBmcm9tLmFkZHJlc3MsXG4gICAgICAgIHRvOiBlcmMyMEFkZHJlc3MsXG4gICAgICAgIGRhdGE6IGVuY29kZUZ1bmN0aW9uRGF0YSh7XG4gICAgICAgICAgICBhYmk6IGVyYzIwQWJpLFxuICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBcImFwcHJvdmVcIixcbiAgICAgICAgICAgIGFyZ3M6IFt0bywgdmFsdWVdLFxuICAgICAgICB9KSxcbiAgICB9KTtcbiAgICAvLyBUaGVuIGV4ZWN1dGUgdGhlIHRyYW5zZmVyXG4gICAgY29uc3QgaGFzaCA9IGF3YWl0IHdhbGxldENsaWVudC5zZW5kVHJhbnNhY3Rpb24oe1xuICAgICAgICBhY2NvdW50OiBmcm9tLmFkZHJlc3MsXG4gICAgICAgIHRvOiBlcmMyMEFkZHJlc3MsXG4gICAgICAgIGRhdGE6IGVuY29kZUZ1bmN0aW9uRGF0YSh7XG4gICAgICAgICAgICBhYmk6IGVyYzIwQWJpLFxuICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBcInRyYW5zZmVyXCIsXG4gICAgICAgICAgICBhcmdzOiBbdG8sIHZhbHVlXSxcbiAgICAgICAgfSksXG4gICAgfSk7XG4gICAgcmV0dXJuIHsgdHJhbnNhY3Rpb25IYXNoOiBoYXNoIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2ZlcldpdGhWaWVtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/transferWithViem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/types.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/types.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSmartAccount: () => (/* binding */ isSmartAccount),\n/* harmony export */   isValidNetworkForAccount: () => (/* binding */ isValidNetworkForAccount)\n/* harmony export */ });\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js\");\n\n/**\n * Validates that the network is supported for the given account type.\n *\n * @param network - The network to validate\n * @param account - The account to check network support for\n * @returns true if the network is valid for the account type\n */\nfunction isValidNetworkForAccount(network, account) {\n    if (isSmartAccount(account)) {\n        return Object.values(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.EvmUserOperationNetwork).includes(network);\n    }\n    return true;\n}\n/**\n * Type guard to check if an account is a smart account.\n *\n * @param account - The account to check.\n * @returns true if the account is a smart account, false otherwise.\n */\nfunction isSmartAccount(account) {\n    return \"type\" in account && account.type === \"evm-smart\";\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS90cmFuc2Zlci90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkU7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsNkJBQTZCLDZFQUF1QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS90cmFuc2Zlci90eXBlcy5qcz9mZGVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2bVVzZXJPcGVyYXRpb25OZXR3b3JrIH0gZnJvbSBcIi4uLy4uLy4uL29wZW5hcGktY2xpZW50L2luZGV4LmpzXCI7XG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IHRoZSBuZXR3b3JrIGlzIHN1cHBvcnRlZCBmb3IgdGhlIGdpdmVuIGFjY291bnQgdHlwZS5cbiAqXG4gKiBAcGFyYW0gbmV0d29yayAtIFRoZSBuZXR3b3JrIHRvIHZhbGlkYXRlXG4gKiBAcGFyYW0gYWNjb3VudCAtIFRoZSBhY2NvdW50IHRvIGNoZWNrIG5ldHdvcmsgc3VwcG9ydCBmb3JcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIG5ldHdvcmsgaXMgdmFsaWQgZm9yIHRoZSBhY2NvdW50IHR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWROZXR3b3JrRm9yQWNjb3VudChuZXR3b3JrLCBhY2NvdW50KSB7XG4gICAgaWYgKGlzU21hcnRBY2NvdW50KGFjY291bnQpKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKEV2bVVzZXJPcGVyYXRpb25OZXR3b3JrKS5pbmNsdWRlcyhuZXR3b3JrKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIFR5cGUgZ3VhcmQgdG8gY2hlY2sgaWYgYW4gYWNjb3VudCBpcyBhIHNtYXJ0IGFjY291bnQuXG4gKlxuICogQHBhcmFtIGFjY291bnQgLSBUaGUgYWNjb3VudCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGFjY291bnQgaXMgYSBzbWFydCBhY2NvdW50LCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NtYXJ0QWNjb3VudChhY2NvdW50KSB7XG4gICAgcmV0dXJuIFwidHlwZVwiIGluIGFjY291bnQgJiYgYWNjb3VudC50eXBlID09PSBcImV2bS1zbWFydFwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getErc20Address: () => (/* binding */ getErc20Address)\n/* harmony export */ });\n/**\n * The address of an ERC20 token for a given network.\n */\nconst addressMap = {\n    base: {\n        usdc: \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\n    },\n    \"base-sepolia\": {\n        usdc: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n    },\n};\n/**\n * Get the address of an ERC20 token for a given network.\n * If a contract address is provided, it will not be found in the map and will be returned as is.\n *\n * @param token - The token symbol or contract address.\n * @param network - The network to get the address for.\n *\n * @returns The address of the ERC20 token.\n */\nfunction getErc20Address(token, network) {\n    return addressMap[network][token] ?? token;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS90cmFuc2Zlci91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS90cmFuc2Zlci91dGlscy5qcz9jMzY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGFkZHJlc3Mgb2YgYW4gRVJDMjAgdG9rZW4gZm9yIGEgZ2l2ZW4gbmV0d29yay5cbiAqL1xuY29uc3QgYWRkcmVzc01hcCA9IHtcbiAgICBiYXNlOiB7XG4gICAgICAgIHVzZGM6IFwiMHg4MzM1ODlmQ0Q2ZURiNkUwOGY0YzdDMzJENGY3MWI1NGJkQTAyOTEzXCIsXG4gICAgfSxcbiAgICBcImJhc2Utc2Vwb2xpYVwiOiB7XG4gICAgICAgIHVzZGM6IFwiMHgwMzZDYkQ1Mzg0MmM1NDI2NjM0ZTc5Mjk1NDFlQzIzMThmM2RDRjdlXCIsXG4gICAgfSxcbn07XG4vKipcbiAqIEdldCB0aGUgYWRkcmVzcyBvZiBhbiBFUkMyMCB0b2tlbiBmb3IgYSBnaXZlbiBuZXR3b3JrLlxuICogSWYgYSBjb250cmFjdCBhZGRyZXNzIGlzIHByb3ZpZGVkLCBpdCB3aWxsIG5vdCBiZSBmb3VuZCBpbiB0aGUgbWFwIGFuZCB3aWxsIGJlIHJldHVybmVkIGFzIGlzLlxuICpcbiAqIEBwYXJhbSB0b2tlbiAtIFRoZSB0b2tlbiBzeW1ib2wgb3IgY29udHJhY3QgYWRkcmVzcy5cbiAqIEBwYXJhbSBuZXR3b3JrIC0gVGhlIG5ldHdvcmsgdG8gZ2V0IHRoZSBhZGRyZXNzIGZvci5cbiAqXG4gKiBAcmV0dXJucyBUaGUgYWRkcmVzcyBvZiB0aGUgRVJDMjAgdG9rZW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcmMyMEFkZHJlc3ModG9rZW4sIG5ldHdvcmspIHtcbiAgICByZXR1cm4gYWRkcmVzc01hcFtuZXR3b3JrXVt0b2tlbl0gPz8gdG9rZW47XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/waitForUserOperation.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/waitForUserOperation.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   waitForUserOperation: () => (/* binding */ waitForUserOperation)\n/* harmony export */ });\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js\");\n/* harmony import */ var _utils_wait_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/wait.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/wait.js\");\n\n\n/**\n * Waits for a user operation to complete or fail.\n *\n * @example\n * ```ts\n * import { waitForUserOperation } from \"@coinbase/cdp-sdk\";\n *\n * const result = await waitForUserOperation(client, {\n *   userOpHash: \"0x1234567890123456789012345678901234567890\",\n *   smartAccountAddress: \"0x1234567890123456789012345678901234567890\",\n *   waitOptions: {\n *     timeoutSeconds: 30,\n *   },\n * });\n * ```\n *\n * @param {CdpOpenApiClientType} client - The client to use to wait for the user operation.\n * @param {WaitForUserOperationOptions} options - The options for the wait operation.\n * @returns {Promise<WaitForUserOperationReturnType>} The result of the user operation.\n */\nasync function waitForUserOperation(client, options) {\n    const { userOpHash, smartAccountAddress } = options;\n    const reload = async () => {\n        const response = await client.getUserOperation(smartAccountAddress, userOpHash);\n        return response;\n    };\n    const transform = (operation) => {\n        if (operation.status === _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.EvmUserOperationStatus.failed) {\n            return {\n                smartAccountAddress: smartAccountAddress,\n                status: _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.EvmUserOperationStatus.failed,\n                userOpHash: operation.userOpHash,\n            };\n        }\n        else if (operation.status === _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.EvmUserOperationStatus.complete) {\n            return {\n                smartAccountAddress: smartAccountAddress,\n                transactionHash: operation.transactionHash,\n                status: _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.EvmUserOperationStatus.complete,\n                userOpHash: operation.userOpHash,\n            };\n        }\n        else {\n            throw new Error(\"User operation is not terminal\");\n        }\n    };\n    const waitOptions = options.waitOptions || {\n        timeoutSeconds: 30,\n    };\n    return await (0,_utils_wait_js__WEBPACK_IMPORTED_MODULE_1__.wait)(reload, isTerminal, transform, waitOptions);\n}\nconst isTerminal = (operation) => {\n    return (operation.status === _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.EvmUserOperationStatus.complete ||\n        operation.status === _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.EvmUserOperationStatus.failed);\n};\n//# sourceMappingURL=waitForUserOperation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL2V2bS93YWl0Rm9yVXNlck9wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0U7QUFDN0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUJBQXVCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDLFdBQVcsNkJBQTZCO0FBQ3hDLGFBQWEseUNBQXlDO0FBQ3REO0FBQ087QUFDUCxZQUFZLGtDQUFrQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDRFQUFzQjtBQUN2RDtBQUNBO0FBQ0Esd0JBQXdCLDRFQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsNEVBQXNCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw0RUFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0RBQUk7QUFDckI7QUFDQTtBQUNBLGlDQUFpQyw0RUFBc0I7QUFDdkQsNkJBQTZCLDRFQUFzQjtBQUNuRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2FjdGlvbnMvZXZtL3dhaXRGb3JVc2VyT3BlcmF0aW9uLmpzPzQ2YzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZtVXNlck9wZXJhdGlvblN0YXR1cywgfSBmcm9tIFwiLi4vLi4vb3BlbmFwaS1jbGllbnQvaW5kZXguanNcIjtcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbHMvd2FpdC5qc1wiO1xuLyoqXG4gKiBXYWl0cyBmb3IgYSB1c2VyIG9wZXJhdGlvbiB0byBjb21wbGV0ZSBvciBmYWlsLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgd2FpdEZvclVzZXJPcGVyYXRpb24gfSBmcm9tIFwiQGNvaW5iYXNlL2NkcC1zZGtcIjtcbiAqXG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCB3YWl0Rm9yVXNlck9wZXJhdGlvbihjbGllbnQsIHtcbiAqICAgdXNlck9wSGFzaDogXCIweDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBcIixcbiAqICAgc21hcnRBY2NvdW50QWRkcmVzczogXCIweDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBcIixcbiAqICAgd2FpdE9wdGlvbnM6IHtcbiAqICAgICB0aW1lb3V0U2Vjb25kczogMzAsXG4gKiAgIH0sXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2RwT3BlbkFwaUNsaWVudFR5cGV9IGNsaWVudCAtIFRoZSBjbGllbnQgdG8gdXNlIHRvIHdhaXQgZm9yIHRoZSB1c2VyIG9wZXJhdGlvbi5cbiAqIEBwYXJhbSB7V2FpdEZvclVzZXJPcGVyYXRpb25PcHRpb25zfSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSB3YWl0IG9wZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtQcm9taXNlPFdhaXRGb3JVc2VyT3BlcmF0aW9uUmV0dXJuVHlwZT59IFRoZSByZXN1bHQgb2YgdGhlIHVzZXIgb3BlcmF0aW9uLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvclVzZXJPcGVyYXRpb24oY2xpZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyB1c2VyT3BIYXNoLCBzbWFydEFjY291bnRBZGRyZXNzIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHJlbG9hZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0VXNlck9wZXJhdGlvbihzbWFydEFjY291bnRBZGRyZXNzLCB1c2VyT3BIYXNoKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH07XG4gICAgY29uc3QgdHJhbnNmb3JtID0gKG9wZXJhdGlvbikgPT4ge1xuICAgICAgICBpZiAob3BlcmF0aW9uLnN0YXR1cyA9PT0gRXZtVXNlck9wZXJhdGlvblN0YXR1cy5mYWlsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc21hcnRBY2NvdW50QWRkcmVzczogc21hcnRBY2NvdW50QWRkcmVzcyxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IEV2bVVzZXJPcGVyYXRpb25TdGF0dXMuZmFpbGVkLFxuICAgICAgICAgICAgICAgIHVzZXJPcEhhc2g6IG9wZXJhdGlvbi51c2VyT3BIYXNoLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcGVyYXRpb24uc3RhdHVzID09PSBFdm1Vc2VyT3BlcmF0aW9uU3RhdHVzLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNtYXJ0QWNjb3VudEFkZHJlc3M6IHNtYXJ0QWNjb3VudEFkZHJlc3MsXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25IYXNoOiBvcGVyYXRpb24udHJhbnNhY3Rpb25IYXNoLFxuICAgICAgICAgICAgICAgIHN0YXR1czogRXZtVXNlck9wZXJhdGlvblN0YXR1cy5jb21wbGV0ZSxcbiAgICAgICAgICAgICAgICB1c2VyT3BIYXNoOiBvcGVyYXRpb24udXNlck9wSGFzaCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVc2VyIG9wZXJhdGlvbiBpcyBub3QgdGVybWluYWxcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHdhaXRPcHRpb25zID0gb3B0aW9ucy53YWl0T3B0aW9ucyB8fCB7XG4gICAgICAgIHRpbWVvdXRTZWNvbmRzOiAzMCxcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB3YWl0KHJlbG9hZCwgaXNUZXJtaW5hbCwgdHJhbnNmb3JtLCB3YWl0T3B0aW9ucyk7XG59XG5jb25zdCBpc1Rlcm1pbmFsID0gKG9wZXJhdGlvbikgPT4ge1xuICAgIHJldHVybiAob3BlcmF0aW9uLnN0YXR1cyA9PT0gRXZtVXNlck9wZXJhdGlvblN0YXR1cy5jb21wbGV0ZSB8fFxuICAgICAgICBvcGVyYXRpb24uc3RhdHVzID09PSBFdm1Vc2VyT3BlcmF0aW9uU3RhdHVzLmZhaWxlZCk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2FpdEZvclVzZXJPcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/waitForUserOperation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GENESIS_HASH_DEVNET: () => (/* binding */ GENESIS_HASH_DEVNET),\n/* harmony export */   GENESIS_HASH_MAINNET: () => (/* binding */ GENESIS_HASH_MAINNET),\n/* harmony export */   GENESIS_HASH_TESTNET: () => (/* binding */ GENESIS_HASH_TESTNET),\n/* harmony export */   USDC_DEVNET_MINT_ADDRESS: () => (/* binding */ USDC_DEVNET_MINT_ADDRESS),\n/* harmony export */   USDC_MAINNET_MINT_ADDRESS: () => (/* binding */ USDC_MAINNET_MINT_ADDRESS)\n/* harmony export */ });\nconst GENESIS_HASH_MAINNET = \"5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d\";\nconst GENESIS_HASH_DEVNET = \"EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG\";\nconst GENESIS_HASH_TESTNET = \"4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY\";\nconst USDC_MAINNET_MINT_ADDRESS = \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\";\nconst USDC_DEVNET_MINT_ADDRESS = \"4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU\";\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYWN0aW9ucy9zb2xhbmEvY29uc3RhbnRzLmpzPzExOWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEdFTkVTSVNfSEFTSF9NQUlOTkVUID0gXCI1ZXlrdDRVc0Z2OFA4TkpkVFJFcFkxdnpxS3FaS3ZkcEt1YzE0N2R3Mk45ZFwiO1xuZXhwb3J0IGNvbnN0IEdFTkVTSVNfSEFTSF9ERVZORVQgPSBcIkV0V1RSQUJaYVlxNmlNZmVZS291UnUxNjZWVTJ4cWExd2NhV294UGtyWkJHXCI7XG5leHBvcnQgY29uc3QgR0VORVNJU19IQVNIX1RFU1RORVQgPSBcIjR1aGNWSnlVOXBKa3ZReVM4OHVSRGlzd0hYU0NrWTN6UWF3d3BqazJOc05ZXCI7XG5leHBvcnQgY29uc3QgVVNEQ19NQUlOTkVUX01JTlRfQUREUkVTUyA9IFwiRVBqRldkZDVBdWZxU1NxZU0ycU4xeHp5YmFwQzhHNHdFR0drWnd5VER0MXZcIjtcbmV4cG9ydCBjb25zdCBVU0RDX0RFVk5FVF9NSU5UX0FERFJFU1MgPSBcIjR6TU1DOXNydDVSaTVYMTRHQWdYaGFIaWkzR25QQUVFUllQSmdaSkRuY0RVXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/fund/fund.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/fund/fund.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fund: () => (/* binding */ fund)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/unit/formatUnits.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js\");\n\n\n\n/**\n * Funds a Solana account.\n *\n * @deprecated This method will be removed in a future version. Consider using our Onramp API instead. See https://docs.cdp.coinbase.com/api-reference/v2/rest-api/onramp/create-an-onramp-order.\n * @param apiClient - The API client.\n * @param options - The options for funding a Solana account.\n *\n * @returns A promise that resolves to the fund operation result.\n */\nasync function fund(apiClient, options) {\n    if (options.token !== \"sol\" && options.token !== \"usdc\") {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.UserInputValidationError(\"Invalid token, must be sol or usdc\");\n    }\n    const decimals = options.token === \"sol\" ? 9 : 6;\n    const amount = (0,viem__WEBPACK_IMPORTED_MODULE_1__.formatUnits)(options.amount, decimals);\n    const paymentMethods = await apiClient.getPaymentMethods();\n    const cardPaymentMethod = paymentMethods.find(method => method.type === \"card\" && method.actions.includes(\"source\"));\n    if (!cardPaymentMethod) {\n        throw new Error(\"No card found to fund account\");\n    }\n    const response = await apiClient.createPaymentTransferQuote({\n        sourceType: _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__.CreatePaymentTransferQuoteBodySourceType.payment_method,\n        source: {\n            id: cardPaymentMethod.id,\n        },\n        targetType: _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__.CreatePaymentTransferQuoteBodyTargetType.crypto_rail,\n        target: {\n            currency: options.token,\n            network: \"solana\",\n            address: options.address,\n        },\n        amount,\n        currency: options.token,\n        execute: true,\n    });\n    return {\n        id: response.transfer.id,\n        network: response.transfer.target.network,\n        status: response.transfer.status,\n        targetAmount: response.transfer.targetAmount,\n        targetCurrency: response.transfer.targetCurrency,\n        transactionHash: response.transfer.transactionHash,\n    };\n}\n//# sourceMappingURL=fund.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9mdW5kL2Z1bmQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtQztBQUMyQjtBQUN5RTtBQUN2STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esa0JBQWtCLGdFQUF3QjtBQUMxQztBQUNBO0FBQ0EsbUJBQW1CLGlEQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4RkFBd0M7QUFDNUQ7QUFDQTtBQUNBLFNBQVM7QUFDVCxvQkFBb0IsOEZBQXdDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9mdW5kL2Z1bmQuanM/NDkwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JtYXRVbml0cyB9IGZyb20gXCJ2aWVtXCI7XG5pbXBvcnQgeyBVc2VySW5wdXRWYWxpZGF0aW9uRXJyb3IgfSBmcm9tIFwiLi4vLi4vLi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgeyBDcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZUJvZHlTb3VyY2VUeXBlLCBDcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZUJvZHlUYXJnZXRUeXBlLCB9IGZyb20gXCIuLi8uLi8uLi9vcGVuYXBpLWNsaWVudC9pbmRleC5qc1wiO1xuLyoqXG4gKiBGdW5kcyBhIFNvbGFuYSBhY2NvdW50LlxuICpcbiAqIEBkZXByZWNhdGVkIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiBDb25zaWRlciB1c2luZyBvdXIgT25yYW1wIEFQSSBpbnN0ZWFkLiBTZWUgaHR0cHM6Ly9kb2NzLmNkcC5jb2luYmFzZS5jb20vYXBpLXJlZmVyZW5jZS92Mi9yZXN0LWFwaS9vbnJhbXAvY3JlYXRlLWFuLW9ucmFtcC1vcmRlci5cbiAqIEBwYXJhbSBhcGlDbGllbnQgLSBUaGUgQVBJIGNsaWVudC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIGZ1bmRpbmcgYSBTb2xhbmEgYWNjb3VudC5cbiAqXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgZnVuZCBvcGVyYXRpb24gcmVzdWx0LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZnVuZChhcGlDbGllbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy50b2tlbiAhPT0gXCJzb2xcIiAmJiBvcHRpb25zLnRva2VuICE9PSBcInVzZGNcIikge1xuICAgICAgICB0aHJvdyBuZXcgVXNlcklucHV0VmFsaWRhdGlvbkVycm9yKFwiSW52YWxpZCB0b2tlbiwgbXVzdCBiZSBzb2wgb3IgdXNkY1wiKTtcbiAgICB9XG4gICAgY29uc3QgZGVjaW1hbHMgPSBvcHRpb25zLnRva2VuID09PSBcInNvbFwiID8gOSA6IDY7XG4gICAgY29uc3QgYW1vdW50ID0gZm9ybWF0VW5pdHMob3B0aW9ucy5hbW91bnQsIGRlY2ltYWxzKTtcbiAgICBjb25zdCBwYXltZW50TWV0aG9kcyA9IGF3YWl0IGFwaUNsaWVudC5nZXRQYXltZW50TWV0aG9kcygpO1xuICAgIGNvbnN0IGNhcmRQYXltZW50TWV0aG9kID0gcGF5bWVudE1ldGhvZHMuZmluZChtZXRob2QgPT4gbWV0aG9kLnR5cGUgPT09IFwiY2FyZFwiICYmIG1ldGhvZC5hY3Rpb25zLmluY2x1ZGVzKFwic291cmNlXCIpKTtcbiAgICBpZiAoIWNhcmRQYXltZW50TWV0aG9kKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGNhcmQgZm91bmQgdG8gZnVuZCBhY2NvdW50XCIpO1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5jcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZSh7XG4gICAgICAgIHNvdXJjZVR5cGU6IENyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlQm9keVNvdXJjZVR5cGUucGF5bWVudF9tZXRob2QsXG4gICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgaWQ6IGNhcmRQYXltZW50TWV0aG9kLmlkLFxuICAgICAgICB9LFxuICAgICAgICB0YXJnZXRUeXBlOiBDcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZUJvZHlUYXJnZXRUeXBlLmNyeXB0b19yYWlsLFxuICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICAgIGN1cnJlbmN5OiBvcHRpb25zLnRva2VuLFxuICAgICAgICAgICAgbmV0d29yazogXCJzb2xhbmFcIixcbiAgICAgICAgICAgIGFkZHJlc3M6IG9wdGlvbnMuYWRkcmVzcyxcbiAgICAgICAgfSxcbiAgICAgICAgYW1vdW50LFxuICAgICAgICBjdXJyZW5jeTogb3B0aW9ucy50b2tlbixcbiAgICAgICAgZXhlY3V0ZTogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogcmVzcG9uc2UudHJhbnNmZXIuaWQsXG4gICAgICAgIG5ldHdvcms6IHJlc3BvbnNlLnRyYW5zZmVyLnRhcmdldC5uZXR3b3JrLFxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnRyYW5zZmVyLnN0YXR1cyxcbiAgICAgICAgdGFyZ2V0QW1vdW50OiByZXNwb25zZS50cmFuc2Zlci50YXJnZXRBbW91bnQsXG4gICAgICAgIHRhcmdldEN1cnJlbmN5OiByZXNwb25zZS50cmFuc2Zlci50YXJnZXRDdXJyZW5jeSxcbiAgICAgICAgdHJhbnNhY3Rpb25IYXNoOiByZXNwb25zZS50cmFuc2Zlci50cmFuc2FjdGlvbkhhc2gsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/fund/fund.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/fund/quoteFund.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/fund/quoteFund.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   quoteFund: () => (/* binding */ quoteFund)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/unit/formatUnits.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js\");\n/* harmony import */ var _Quote_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Quote.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/Quote.js\");\n\n\n\n\n/**\n * Gets a quote to fund a Solana account.\n *\n * @deprecated This method will be removed in a future version. Consider using our Onramp API instead. See https://docs.cdp.coinbase.com/api-reference/v2/rest-api/onramp/create-an-onramp-order.\n * @param apiClient - The API client.\n * @param options - The options for getting a quote to fund a Solana account.\n *\n * @returns A promise that resolves to the quote.\n */\nasync function quoteFund(apiClient, options) {\n    if (options.token !== \"sol\" && options.token !== \"usdc\") {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.UserInputValidationError(\"Invalid token, must be sol or usdc\");\n    }\n    const decimals = options.token === \"sol\" ? 9 : 6;\n    const amount = (0,viem__WEBPACK_IMPORTED_MODULE_1__.formatUnits)(options.amount, decimals);\n    const paymentMethods = await apiClient.getPaymentMethods();\n    const cardPaymentMethod = paymentMethods.find(method => method.type === \"card\" && method.actions.includes(\"source\"));\n    if (!cardPaymentMethod) {\n        throw new Error(\"No card found to fund account\");\n    }\n    const response = await apiClient.createPaymentTransferQuote({\n        sourceType: _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__.CreatePaymentTransferQuoteBodySourceType.payment_method,\n        source: {\n            id: cardPaymentMethod.id,\n        },\n        targetType: _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_2__.CreatePaymentTransferQuoteBodyTargetType.crypto_rail,\n        target: {\n            currency: options.token,\n            network: \"solana\",\n            address: options.address,\n        },\n        amount,\n        currency: options.token,\n    });\n    return new _Quote_js__WEBPACK_IMPORTED_MODULE_3__.SolanaQuote(apiClient, response.transfer.id, \"solana\", response.transfer.sourceAmount, response.transfer.sourceCurrency, response.transfer.targetAmount, response.transfer.targetCurrency, response.transfer.fees.map(fee => ({\n        type: fee.type,\n        amount: fee.amount,\n        currency: fee.currency,\n    })));\n}\n//# sourceMappingURL=quoteFund.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9mdW5kL3F1b3RlRnVuZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtQztBQUMyQjtBQUN5RTtBQUMxRjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esa0JBQWtCLGdFQUF3QjtBQUMxQztBQUNBO0FBQ0EsbUJBQW1CLGlEQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4RkFBd0M7QUFDNUQ7QUFDQTtBQUNBLFNBQVM7QUFDVCxvQkFBb0IsOEZBQXdDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsZUFBZSxrREFBVztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9mdW5kL3F1b3RlRnVuZC5qcz83MTVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdFVuaXRzIH0gZnJvbSBcInZpZW1cIjtcbmltcG9ydCB7IFVzZXJJbnB1dFZhbGlkYXRpb25FcnJvciB9IGZyb20gXCIuLi8uLi8uLi9lcnJvcnMuanNcIjtcbmltcG9ydCB7IENyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlQm9keVNvdXJjZVR5cGUsIENyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlQm9keVRhcmdldFR5cGUsIH0gZnJvbSBcIi4uLy4uLy4uL29wZW5hcGktY2xpZW50L2luZGV4LmpzXCI7XG5pbXBvcnQgeyBTb2xhbmFRdW90ZSB9IGZyb20gXCIuLi8uLi9RdW90ZS5qc1wiO1xuLyoqXG4gKiBHZXRzIGEgcXVvdGUgdG8gZnVuZCBhIFNvbGFuYSBhY2NvdW50LlxuICpcbiAqIEBkZXByZWNhdGVkIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiBDb25zaWRlciB1c2luZyBvdXIgT25yYW1wIEFQSSBpbnN0ZWFkLiBTZWUgaHR0cHM6Ly9kb2NzLmNkcC5jb2luYmFzZS5jb20vYXBpLXJlZmVyZW5jZS92Mi9yZXN0LWFwaS9vbnJhbXAvY3JlYXRlLWFuLW9ucmFtcC1vcmRlci5cbiAqIEBwYXJhbSBhcGlDbGllbnQgLSBUaGUgQVBJIGNsaWVudC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIGdldHRpbmcgYSBxdW90ZSB0byBmdW5kIGEgU29sYW5hIGFjY291bnQuXG4gKlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHF1b3RlLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcXVvdGVGdW5kKGFwaUNsaWVudCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnRva2VuICE9PSBcInNvbFwiICYmIG9wdGlvbnMudG9rZW4gIT09IFwidXNkY1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBVc2VySW5wdXRWYWxpZGF0aW9uRXJyb3IoXCJJbnZhbGlkIHRva2VuLCBtdXN0IGJlIHNvbCBvciB1c2RjXCIpO1xuICAgIH1cbiAgICBjb25zdCBkZWNpbWFscyA9IG9wdGlvbnMudG9rZW4gPT09IFwic29sXCIgPyA5IDogNjtcbiAgICBjb25zdCBhbW91bnQgPSBmb3JtYXRVbml0cyhvcHRpb25zLmFtb3VudCwgZGVjaW1hbHMpO1xuICAgIGNvbnN0IHBheW1lbnRNZXRob2RzID0gYXdhaXQgYXBpQ2xpZW50LmdldFBheW1lbnRNZXRob2RzKCk7XG4gICAgY29uc3QgY2FyZFBheW1lbnRNZXRob2QgPSBwYXltZW50TWV0aG9kcy5maW5kKG1ldGhvZCA9PiBtZXRob2QudHlwZSA9PT0gXCJjYXJkXCIgJiYgbWV0aG9kLmFjdGlvbnMuaW5jbHVkZXMoXCJzb3VyY2VcIikpO1xuICAgIGlmICghY2FyZFBheW1lbnRNZXRob2QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gY2FyZCBmb3VuZCB0byBmdW5kIGFjY291bnRcIik7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LmNyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlKHtcbiAgICAgICAgc291cmNlVHlwZTogQ3JlYXRlUGF5bWVudFRyYW5zZmVyUXVvdGVCb2R5U291cmNlVHlwZS5wYXltZW50X21ldGhvZCxcbiAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgICBpZDogY2FyZFBheW1lbnRNZXRob2QuaWQsXG4gICAgICAgIH0sXG4gICAgICAgIHRhcmdldFR5cGU6IENyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlQm9keVRhcmdldFR5cGUuY3J5cHRvX3JhaWwsXG4gICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgY3VycmVuY3k6IG9wdGlvbnMudG9rZW4sXG4gICAgICAgICAgICBuZXR3b3JrOiBcInNvbGFuYVwiLFxuICAgICAgICAgICAgYWRkcmVzczogb3B0aW9ucy5hZGRyZXNzLFxuICAgICAgICB9LFxuICAgICAgICBhbW91bnQsXG4gICAgICAgIGN1cnJlbmN5OiBvcHRpb25zLnRva2VuLFxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgU29sYW5hUXVvdGUoYXBpQ2xpZW50LCByZXNwb25zZS50cmFuc2Zlci5pZCwgXCJzb2xhbmFcIiwgcmVzcG9uc2UudHJhbnNmZXIuc291cmNlQW1vdW50LCByZXNwb25zZS50cmFuc2Zlci5zb3VyY2VDdXJyZW5jeSwgcmVzcG9uc2UudHJhbnNmZXIudGFyZ2V0QW1vdW50LCByZXNwb25zZS50cmFuc2Zlci50YXJnZXRDdXJyZW5jeSwgcmVzcG9uc2UudHJhbnNmZXIuZmVlcy5tYXAoZmVlID0+ICh7XG4gICAgICAgIHR5cGU6IGZlZS50eXBlLFxuICAgICAgICBhbW91bnQ6IGZlZS5hbW91bnQsXG4gICAgICAgIGN1cnJlbmN5OiBmZWUuY3VycmVuY3ksXG4gICAgfSkpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1b3RlRnVuZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/fund/quoteFund.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/requestFaucet.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/requestFaucet.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestFaucet: () => (/* binding */ requestFaucet)\n/* harmony export */ });\n/**\n * Requests funds from a Solana faucet.\n *\n * @param apiClient - The API client.\n * @param {RequestFaucetOptions} options - Parameters for requesting funds from the Solana faucet.\n * @param {string} options.address - The address to request funds for.\n * @param {string} options.token - The token to request funds for.\n * @param {string} [options.idempotencyKey] - An idempotency key.\n *\n * @returns A promise that resolves to the transaction signature.\n *\n * @example\n *          ```ts\n *          const signature = await requestFaucet(cdp.solana, {\n *            address: \"1234567890123456789012345678901234567890\",\n *            token: \"sol\",\n *          });\n *          ```\n */\nasync function requestFaucet(apiClient, options) {\n    const signature = await apiClient.requestSolanaFaucet({ address: options.address, token: options.token }, options.idempotencyKey);\n    return {\n        signature: signature.transactionSignature,\n    };\n}\n//# sourceMappingURL=requestFaucet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9yZXF1ZXN0RmF1Y2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsNERBQTRELGdEQUFnRDtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2FjdGlvbnMvc29sYW5hL3JlcXVlc3RGYXVjZXQuanM/NmMyZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlcXVlc3RzIGZ1bmRzIGZyb20gYSBTb2xhbmEgZmF1Y2V0LlxuICpcbiAqIEBwYXJhbSBhcGlDbGllbnQgLSBUaGUgQVBJIGNsaWVudC5cbiAqIEBwYXJhbSB7UmVxdWVzdEZhdWNldE9wdGlvbnN9IG9wdGlvbnMgLSBQYXJhbWV0ZXJzIGZvciByZXF1ZXN0aW5nIGZ1bmRzIGZyb20gdGhlIFNvbGFuYSBmYXVjZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5hZGRyZXNzIC0gVGhlIGFkZHJlc3MgdG8gcmVxdWVzdCBmdW5kcyBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy50b2tlbiAtIFRoZSB0b2tlbiB0byByZXF1ZXN0IGZ1bmRzIGZvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZGVtcG90ZW5jeUtleV0gLSBBbiBpZGVtcG90ZW5jeSBrZXkuXG4gKlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHRyYW5zYWN0aW9uIHNpZ25hdHVyZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAgICAgICAgYGBgdHNcbiAqICAgICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHJlcXVlc3RGYXVjZXQoY2RwLnNvbGFuYSwge1xuICogICAgICAgICAgICBhZGRyZXNzOiBcIjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBcIixcbiAqICAgICAgICAgICAgdG9rZW46IFwic29sXCIsXG4gKiAgICAgICAgICB9KTtcbiAqICAgICAgICAgIGBgYFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVxdWVzdEZhdWNldChhcGlDbGllbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBhcGlDbGllbnQucmVxdWVzdFNvbGFuYUZhdWNldCh7IGFkZHJlc3M6IG9wdGlvbnMuYWRkcmVzcywgdG9rZW46IG9wdGlvbnMudG9rZW4gfSwgb3B0aW9ucy5pZGVtcG90ZW5jeUtleSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmUudHJhbnNhY3Rpb25TaWduYXR1cmUsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3RGYXVjZXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/requestFaucet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/rpc.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/rpc.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createRpcClient: () => (/* binding */ createRpcClient)\n/* harmony export */ });\n/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/kit */ \"(ssr)/./node_modules/@solana/rpc/dist/index.node.mjs\");\n\n/**\n * Create a Solana RPC client for the given network\n *\n * @param network - The network to connect to\n *\n * @returns The RPC client\n */\nfunction createRpcClient(network) {\n    const endpoint = network === \"mainnet\" ? \"https://api.mainnet-beta.solana.com\" : \"https://api.devnet.solana.com\";\n    return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_0__.createSolanaRpc)(endpoint);\n}\n//# sourceMappingURL=rpc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9ycGMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsV0FBVyw0REFBZTtBQUMxQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2FjdGlvbnMvc29sYW5hL3JwYy5qcz83ODhmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNvbGFuYVJwYyB9IGZyb20gXCJAc29sYW5hL2tpdFwiO1xuLyoqXG4gKiBDcmVhdGUgYSBTb2xhbmEgUlBDIGNsaWVudCBmb3IgdGhlIGdpdmVuIG5ldHdvcmtcbiAqXG4gKiBAcGFyYW0gbmV0d29yayAtIFRoZSBuZXR3b3JrIHRvIGNvbm5lY3QgdG9cbiAqXG4gKiBAcmV0dXJucyBUaGUgUlBDIGNsaWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUnBjQ2xpZW50KG5ldHdvcmspIHtcbiAgICBjb25zdCBlbmRwb2ludCA9IG5ldHdvcmsgPT09IFwibWFpbm5ldFwiID8gXCJodHRwczovL2FwaS5tYWlubmV0LWJldGEuc29sYW5hLmNvbVwiIDogXCJodHRwczovL2FwaS5kZXZuZXQuc29sYW5hLmNvbVwiO1xuICAgIHJldHVybiBjcmVhdGVTb2xhbmFScGMoZW5kcG9pbnQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnBjLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/rpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/sendTransaction.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/sendTransaction.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendTransaction: () => (/* binding */ sendTransaction)\n/* harmony export */ });\n/**\n * Sends a Solana transaction using the Coinbase API.\n *\n * @param {CdpOpenApiClientType} apiClient - The API client to use.\n * @param {SendTransactionOptions} options - Parameters for sending the Solana transaction.\n * @param {string} options.network - The network to send the transaction to.\n * @param {string} options.transaction - The base64 encoded transaction to send.\n * @param {string} [options.idempotencyKey] - An idempotency key.\n *\n * @returns A promise that resolves to the transaction result.\n *\n * @example\n * ```ts\n * const signature = await sendTransaction({\n *   network: \"solana-devnet\",\n *   transaction: \"...\",\n * });\n * ```\n */\nasync function sendTransaction(apiClient, options) {\n    const signature = await apiClient.sendSolanaTransaction({\n        network: options.network,\n        transaction: options.transaction,\n    }, options.idempotencyKey);\n    return {\n        transactionSignature: signature.transactionSignature,\n        signature: signature.transactionSignature,\n    };\n}\n//# sourceMappingURL=sendTransaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9zZW5kVHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDLFdBQVcsd0JBQXdCO0FBQ25DLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9zZW5kVHJhbnNhY3Rpb24uanM/OTcwNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNlbmRzIGEgU29sYW5hIHRyYW5zYWN0aW9uIHVzaW5nIHRoZSBDb2luYmFzZSBBUEkuXG4gKlxuICogQHBhcmFtIHtDZHBPcGVuQXBpQ2xpZW50VHlwZX0gYXBpQ2xpZW50IC0gVGhlIEFQSSBjbGllbnQgdG8gdXNlLlxuICogQHBhcmFtIHtTZW5kVHJhbnNhY3Rpb25PcHRpb25zfSBvcHRpb25zIC0gUGFyYW1ldGVycyBmb3Igc2VuZGluZyB0aGUgU29sYW5hIHRyYW5zYWN0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubmV0d29yayAtIFRoZSBuZXR3b3JrIHRvIHNlbmQgdGhlIHRyYW5zYWN0aW9uIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudHJhbnNhY3Rpb24gLSBUaGUgYmFzZTY0IGVuY29kZWQgdHJhbnNhY3Rpb24gdG8gc2VuZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZGVtcG90ZW5jeUtleV0gLSBBbiBpZGVtcG90ZW5jeSBrZXkuXG4gKlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHRyYW5zYWN0aW9uIHJlc3VsdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNlbmRUcmFuc2FjdGlvbih7XG4gKiAgIG5ldHdvcms6IFwic29sYW5hLWRldm5ldFwiLFxuICogICB0cmFuc2FjdGlvbjogXCIuLi5cIixcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kVHJhbnNhY3Rpb24oYXBpQ2xpZW50LCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgYXBpQ2xpZW50LnNlbmRTb2xhbmFUcmFuc2FjdGlvbih7XG4gICAgICAgIG5ldHdvcms6IG9wdGlvbnMubmV0d29yayxcbiAgICAgICAgdHJhbnNhY3Rpb246IG9wdGlvbnMudHJhbnNhY3Rpb24sXG4gICAgfSwgb3B0aW9ucy5pZGVtcG90ZW5jeUtleSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHJhbnNhY3Rpb25TaWduYXR1cmU6IHNpZ25hdHVyZS50cmFuc2FjdGlvblNpZ25hdHVyZSxcbiAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmUudHJhbnNhY3Rpb25TaWduYXR1cmUsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbmRUcmFuc2FjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/sendTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/signMessage.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/signMessage.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signMessage: () => (/* binding */ signMessage)\n/* harmony export */ });\n/**\n * Sign a message.\n *\n * @param apiClient - The API client.\n * @param {SignMessageOptions} options - Parameters for signing the message.\n * @param {string} options.address - The address to sign the message for.\n * @param {string} options.message - The message to sign.\n * @param {string} [options.idempotencyKey] - An idempotency key.\n *\n * @returns A promise that resolves to the transaction signature.\n *\n * @example\n *          ```ts\n *          const signature = await signMessage(cdp.solana, {\n *            address: \"1234567890123456789012345678901234567890\",\n *            message: \"Hello, world!\",\n *          });\n *          ```\n */\nasync function signMessage(apiClient, options) {\n    const signature = await apiClient.signSolanaMessage(options.address, { message: options.message }, options.idempotencyKey);\n    return {\n        signature: signature.signature,\n    };\n}\n//# sourceMappingURL=signMessage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9zaWduTWVzc2FnZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQLDJFQUEyRSwwQkFBMEI7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9zaWduTWVzc2FnZS5qcz8wZGE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2lnbiBhIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIGFwaUNsaWVudCAtIFRoZSBBUEkgY2xpZW50LlxuICogQHBhcmFtIHtTaWduTWVzc2FnZU9wdGlvbnN9IG9wdGlvbnMgLSBQYXJhbWV0ZXJzIGZvciBzaWduaW5nIHRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuYWRkcmVzcyAtIFRoZSBhZGRyZXNzIHRvIHNpZ24gdGhlIG1lc3NhZ2UgZm9yLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIHNpZ24uXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWRlbXBvdGVuY3lLZXldIC0gQW4gaWRlbXBvdGVuY3kga2V5LlxuICpcbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSB0cmFuc2FjdGlvbiBzaWduYXR1cmUuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICAgICAgIGBgYHRzXG4gKiAgICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBzaWduTWVzc2FnZShjZHAuc29sYW5hLCB7XG4gKiAgICAgICAgICAgIGFkZHJlc3M6IFwiMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MFwiLFxuICogICAgICAgICAgICBtZXNzYWdlOiBcIkhlbGxvLCB3b3JsZCFcIixcbiAqICAgICAgICAgIH0pO1xuICogICAgICAgICAgYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduTWVzc2FnZShhcGlDbGllbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBhcGlDbGllbnQuc2lnblNvbGFuYU1lc3NhZ2Uob3B0aW9ucy5hZGRyZXNzLCB7IG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZSB9LCBvcHRpb25zLmlkZW1wb3RlbmN5S2V5KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZS5zaWduYXR1cmUsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25NZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/signMessage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/signTransaction.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/signTransaction.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction)\n/* harmony export */ });\n/**\n * Signs a transaction.\n *\n * @param apiClient - The API client.\n * @param {SignTransactionOptions} options - Parameters for signing the transaction.\n * @param {string} options.address - The address to sign the transaction for.\n * @param {string} options.transaction - The transaction to sign.\n * @param {string} [options.idempotencyKey] - An idempotency key.\n *\n * @returns A promise that resolves to the signature.\n *\n * @example\n * ```ts\n * // Create a Solana account\n * const account = await cdp.solana.createAccount();\n *\n * // Add your transaction instructions here\n * const transaction = new Transaction()\n *\n * // Make sure to set requireAllSignatures to false, since signing will be done through the API\n * const serializedTransaction = transaction.serialize({\n *   requireAllSignatures: false,\n * });\n *\n * // Base64 encode the serialized transaction\n * const transaction = Buffer.from(serializedTransaction).toString(\"base64\");\n *\n * // When you want to sign a transaction, you can do so by address and base64 encoded transaction\n * const signature = await signTransaction(cdp.solana, {\n *   address: account.address,\n *   transaction,\n * });\n * ```\n */\nasync function signTransaction(apiClient, options) {\n    const signature = await apiClient.signSolanaTransaction(options.address, {\n        transaction: options.transaction,\n    }, options.idempotencyKey);\n    return {\n        signedTransaction: signature.signedTransaction,\n        signature: signature.signedTransaction,\n    };\n}\n//# sourceMappingURL=signTransaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS9zaWduVHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2FjdGlvbnMvc29sYW5hL3NpZ25UcmFuc2FjdGlvbi5qcz8yN2E5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2lnbnMgYSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBAcGFyYW0gYXBpQ2xpZW50IC0gVGhlIEFQSSBjbGllbnQuXG4gKiBAcGFyYW0ge1NpZ25UcmFuc2FjdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSBQYXJhbWV0ZXJzIGZvciBzaWduaW5nIHRoZSB0cmFuc2FjdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmFkZHJlc3MgLSBUaGUgYWRkcmVzcyB0byBzaWduIHRoZSB0cmFuc2FjdGlvbiBmb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy50cmFuc2FjdGlvbiAtIFRoZSB0cmFuc2FjdGlvbiB0byBzaWduLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmlkZW1wb3RlbmN5S2V5XSAtIEFuIGlkZW1wb3RlbmN5IGtleS5cbiAqXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgc2lnbmF0dXJlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogLy8gQ3JlYXRlIGEgU29sYW5hIGFjY291bnRcbiAqIGNvbnN0IGFjY291bnQgPSBhd2FpdCBjZHAuc29sYW5hLmNyZWF0ZUFjY291bnQoKTtcbiAqXG4gKiAvLyBBZGQgeW91ciB0cmFuc2FjdGlvbiBpbnN0cnVjdGlvbnMgaGVyZVxuICogY29uc3QgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oKVxuICpcbiAqIC8vIE1ha2Ugc3VyZSB0byBzZXQgcmVxdWlyZUFsbFNpZ25hdHVyZXMgdG8gZmFsc2UsIHNpbmNlIHNpZ25pbmcgd2lsbCBiZSBkb25lIHRocm91Z2ggdGhlIEFQSVxuICogY29uc3Qgc2VyaWFsaXplZFRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb24uc2VyaWFsaXplKHtcbiAqICAgcmVxdWlyZUFsbFNpZ25hdHVyZXM6IGZhbHNlLFxuICogfSk7XG4gKlxuICogLy8gQmFzZTY0IGVuY29kZSB0aGUgc2VyaWFsaXplZCB0cmFuc2FjdGlvblxuICogY29uc3QgdHJhbnNhY3Rpb24gPSBCdWZmZXIuZnJvbShzZXJpYWxpemVkVHJhbnNhY3Rpb24pLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuICpcbiAqIC8vIFdoZW4geW91IHdhbnQgdG8gc2lnbiBhIHRyYW5zYWN0aW9uLCB5b3UgY2FuIGRvIHNvIGJ5IGFkZHJlc3MgYW5kIGJhc2U2NCBlbmNvZGVkIHRyYW5zYWN0aW9uXG4gKiBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBzaWduVHJhbnNhY3Rpb24oY2RwLnNvbGFuYSwge1xuICogICBhZGRyZXNzOiBhY2NvdW50LmFkZHJlc3MsXG4gKiAgIHRyYW5zYWN0aW9uLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25UcmFuc2FjdGlvbihhcGlDbGllbnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBhcGlDbGllbnQuc2lnblNvbGFuYVRyYW5zYWN0aW9uKG9wdGlvbnMuYWRkcmVzcywge1xuICAgICAgICB0cmFuc2FjdGlvbjogb3B0aW9ucy50cmFuc2FjdGlvbixcbiAgICB9LCBvcHRpb25zLmlkZW1wb3RlbmN5S2V5KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzaWduZWRUcmFuc2FjdGlvbjogc2lnbmF0dXJlLnNpZ25lZFRyYW5zYWN0aW9uLFxuICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZS5zaWduZWRUcmFuc2FjdGlvbixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2lnblRyYW5zYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/signTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/transfer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/transfer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNativeTransferBase64Transaction: () => (/* binding */ getNativeTransferBase64Transaction),\n/* harmony export */   getSplTransferBase64Transaction: () => (/* binding */ getSplTransferBase64Transaction),\n/* harmony export */   transfer: () => (/* binding */ transfer)\n/* harmony export */ });\n/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @solana/kit */ \"(ssr)/./node_modules/@solana/addresses/dist/index.node.mjs\");\n/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @solana/kit */ \"(ssr)/./node_modules/@solana/signers/dist/index.node.mjs\");\n/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @solana/kit */ \"(ssr)/./node_modules/@solana/functional/dist/index.node.mjs\");\n/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @solana/kit */ \"(ssr)/./node_modules/@solana/transaction-messages/dist/index.node.mjs\");\n/* harmony import */ var _solana_kit__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @solana/kit */ \"(ssr)/./node_modules/@solana/transactions/dist/index.node.mjs\");\n/* harmony import */ var _solana_program_system__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana-program/system */ \"(ssr)/./node_modules/@solana-program/system/dist/src/index.mjs\");\n/* harmony import */ var _solana_program_token__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @solana-program/token */ \"(ssr)/./node_modules/@solana-program/token/dist/src/index.mjs\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/rpc.js\");\n/* harmony import */ var _sendTransaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sendTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/sendTransaction.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/utils.js\");\n\n\n\n\n\n\n/**\n * Transfers SOL or SPL tokens between accounts\n *\n * @param apiClient - The API client to use\n * @param options - The transfer options\n *\n * @returns The transfer result\n */\nasync function transfer(apiClient, options) {\n    const connection = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getOrCreateConnection)({ networkOrConnection: options.network });\n    const connectedNetwork = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getConnectedNetwork)(connection);\n    const rpc = (0,_rpc_js__WEBPACK_IMPORTED_MODULE_1__.createRpcClient)(connectedNetwork);\n    const base64Transaction = options.token === \"sol\"\n        ? await getNativeTransferBase64Transaction({\n            rpc,\n            from: options.from,\n            to: options.to,\n            amount: options.amount,\n        })\n        : await getSplTransferBase64Transaction({\n            rpc,\n            from: options.from,\n            to: options.to,\n            mintAddress: options.token === \"usdc\" ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getUsdcMintAddress)(connectedNetwork) : options.token,\n            amount: options.amount,\n        });\n    const signature = await (0,_sendTransaction_js__WEBPACK_IMPORTED_MODULE_2__.sendTransaction)(apiClient, {\n        network: connectedNetwork === \"mainnet\" ? \"solana\" : \"solana-devnet\",\n        transaction: base64Transaction,\n    });\n    return signature;\n}\n/**\n * Gets the transaction for a SOL transfer\n *\n * @param options - The options for the SOL transfer\n *\n * @param options.rpc - The Solana RPC client\n * @param options.from - The source address\n * @param options.to - The destination address\n * @param options.amount - The amount in lamports to transfer\n *\n * @returns The SOL transfer transaction\n */\nasync function getNativeTransferBase64Transaction({ rpc, from, to, amount, }) {\n    const fromAddr = (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.address)(from);\n    const toAddr = (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.address)(to);\n    const instructions = [\n        (0,_solana_program_system__WEBPACK_IMPORTED_MODULE_4__.getTransferSolInstruction)({\n            source: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.createNoopSigner)(fromAddr),\n            destination: toAddr,\n            amount,\n        }),\n    ];\n    const { value: latestBlockhash } = await rpc.getLatestBlockhash().send();\n    const txMsg = (0,_solana_kit__WEBPACK_IMPORTED_MODULE_6__.pipe)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_7__.createTransactionMessage)({ version: 0 }), tx => (0,_solana_kit__WEBPACK_IMPORTED_MODULE_7__.setTransactionMessageFeePayer)(fromAddr, tx), tx => (0,_solana_kit__WEBPACK_IMPORTED_MODULE_7__.setTransactionMessageLifetimeUsingBlockhash)(latestBlockhash, tx), tx => (0,_solana_kit__WEBPACK_IMPORTED_MODULE_7__.appendTransactionMessageInstructions)(instructions, tx));\n    const compiledTransaction = (0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.compileTransaction)(txMsg);\n    return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.getBase64EncodedWireTransaction)(compiledTransaction);\n}\n/**\n * Gets the transaction for a SPL token transfer\n *\n * @param options - The options for the SPL token transfer\n *\n * @param options.rpc - The Solana RPC client\n * @param options.from - The source address\n * @param options.to - The destination address\n * @param options.mintAddress - The mint address of the token\n * @param options.amount - The amount in units of the token to transfer\n *\n * @returns The SPL token transfer transaction\n */\nasync function getSplTransferBase64Transaction({ rpc, from, to, mintAddress, amount, }) {\n    const fromAddr = (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.address)(from);\n    const toAddr = (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.address)(to);\n    const mintAddr = (0,_solana_kit__WEBPACK_IMPORTED_MODULE_3__.address)(mintAddress);\n    const mintInfo = await (0,_solana_program_token__WEBPACK_IMPORTED_MODULE_9__.fetchMint)(rpc, mintAddr);\n    const [sourceAta] = await (0,_solana_program_token__WEBPACK_IMPORTED_MODULE_9__.findAssociatedTokenPda)({\n        mint: mintAddr,\n        owner: fromAddr,\n        tokenProgram: _solana_program_token__WEBPACK_IMPORTED_MODULE_9__.TOKEN_PROGRAM_ADDRESS,\n    });\n    const [destAta] = await (0,_solana_program_token__WEBPACK_IMPORTED_MODULE_9__.findAssociatedTokenPda)({\n        mint: mintAddr,\n        owner: toAddr,\n        tokenProgram: _solana_program_token__WEBPACK_IMPORTED_MODULE_9__.TOKEN_PROGRAM_ADDRESS,\n    });\n    const sourceAcct = await (0,_solana_program_token__WEBPACK_IMPORTED_MODULE_9__.fetchToken)(rpc, sourceAta);\n    if (sourceAcct.data.amount < amount) {\n        throw new Error(`Insufficient token balance: have ${sourceAcct.data.amount}, need ${amount}`);\n    }\n    const instructions = [];\n    // If destination ATA does not exist, add create instruction\n    try {\n        await (0,_solana_program_token__WEBPACK_IMPORTED_MODULE_9__.fetchToken)(rpc, destAta);\n    }\n    catch {\n        const createDestIx = await (0,_solana_program_token__WEBPACK_IMPORTED_MODULE_9__.getCreateAssociatedTokenInstructionAsync)({\n            payer: (0,_solana_kit__WEBPACK_IMPORTED_MODULE_5__.createNoopSigner)(fromAddr),\n            owner: toAddr,\n            ata: destAta,\n            mint: mintAddr,\n        });\n        instructions.push(createDestIx);\n    }\n    instructions.push((0,_solana_program_token__WEBPACK_IMPORTED_MODULE_9__.getTransferCheckedInstruction)({\n        source: sourceAta,\n        mint: mintAddr,\n        destination: destAta,\n        authority: fromAddr,\n        amount,\n        decimals: mintInfo.data.decimals,\n    }));\n    const { value: latestBlockhash } = await rpc.getLatestBlockhash().send();\n    const txMsg = (0,_solana_kit__WEBPACK_IMPORTED_MODULE_6__.pipe)((0,_solana_kit__WEBPACK_IMPORTED_MODULE_7__.createTransactionMessage)({ version: 0 }), tx => (0,_solana_kit__WEBPACK_IMPORTED_MODULE_7__.setTransactionMessageFeePayer)(fromAddr, tx), tx => (0,_solana_kit__WEBPACK_IMPORTED_MODULE_7__.setTransactionMessageLifetimeUsingBlockhash)(latestBlockhash, tx), tx => (0,_solana_kit__WEBPACK_IMPORTED_MODULE_7__.appendTransactionMessageInstructions)(instructions, tx));\n    const compiledTransaction = (0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.compileTransaction)(txMsg);\n    return (0,_solana_kit__WEBPACK_IMPORTED_MODULE_8__.getBase64EncodedWireTransaction)(compiledTransaction);\n}\n//# sourceMappingURL=transfer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/transfer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getConnectedNetwork: () => (/* binding */ getConnectedNetwork),\n/* harmony export */   getOrCreateConnection: () => (/* binding */ getOrCreateConnection),\n/* harmony export */   getUsdcMintAddress: () => (/* binding */ getUsdcMintAddress)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/constants.js\");\n\n\n/**\n * Get a connection for the Solana network\n *\n * @param options - The options for the connection\n *\n * @param options.networkOrConnection - The network to use or a connection\n *\n * @returns The connection\n */\nfunction getOrCreateConnection({ networkOrConnection, }) {\n    if (typeof networkOrConnection !== \"string\") {\n        return networkOrConnection;\n    }\n    return new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(networkOrConnection === \"mainnet\"\n        ? \"https://api.mainnet-beta.solana.com\"\n        : \"https://api.devnet.solana.com\");\n}\n/**\n * Legacy function for compatibility during migration\n *\n * @param connection - The Solana Connection instance\n * @returns The network type (mainnet or devnet)\n */\nasync function getConnectedNetwork(connection) {\n    const genesisHash = await connection.getGenesisHash();\n    if (genesisHash === _constants_js__WEBPACK_IMPORTED_MODULE_1__.GENESIS_HASH_MAINNET) {\n        return \"mainnet\";\n    }\n    else if (genesisHash === _constants_js__WEBPACK_IMPORTED_MODULE_1__.GENESIS_HASH_DEVNET) {\n        return \"devnet\";\n    }\n    throw new Error(\"Unknown or unsupported network\");\n}\n/**\n * Get the USDC mint address for the given connection\n *\n * @param network - The network to use\n *\n * @returns The USDC mint address\n */\nfunction getUsdcMintAddress(network) {\n    if (network === \"mainnet\") {\n        return _constants_js__WEBPACK_IMPORTED_MODULE_1__.USDC_MAINNET_MINT_ADDRESS;\n    }\n    return _constants_js__WEBPACK_IMPORTED_MODULE_1__.USDC_DEVNET_MINT_ADDRESS;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3NvbGFuYS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2QztBQUNvRjtBQUNqSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxpQ0FBaUMsc0JBQXNCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBLGVBQWUsdURBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHdCQUF3QiwrREFBb0I7QUFDNUM7QUFDQTtBQUNBLDZCQUE2Qiw4REFBbUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxlQUFlLG9FQUF5QjtBQUN4QztBQUNBLFdBQVcsbUVBQXdCO0FBQ25DO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYWN0aW9ucy9zb2xhbmEvdXRpbHMuanM/ZmRkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25uZWN0aW9uIH0gZnJvbSBcIkBzb2xhbmEvd2ViMy5qc1wiO1xuaW1wb3J0IHsgR0VORVNJU19IQVNIX01BSU5ORVQsIEdFTkVTSVNfSEFTSF9ERVZORVQsIFVTRENfTUFJTk5FVF9NSU5UX0FERFJFU1MsIFVTRENfREVWTkVUX01JTlRfQUREUkVTUywgfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjtcbi8qKlxuICogR2V0IGEgY29ubmVjdGlvbiBmb3IgdGhlIFNvbGFuYSBuZXR3b3JrXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGNvbm5lY3Rpb25cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucy5uZXR3b3JrT3JDb25uZWN0aW9uIC0gVGhlIG5ldHdvcmsgdG8gdXNlIG9yIGEgY29ubmVjdGlvblxuICpcbiAqIEByZXR1cm5zIFRoZSBjb25uZWN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPckNyZWF0ZUNvbm5lY3Rpb24oeyBuZXR3b3JrT3JDb25uZWN0aW9uLCB9KSB7XG4gICAgaWYgKHR5cGVvZiBuZXR3b3JrT3JDb25uZWN0aW9uICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBuZXR3b3JrT3JDb25uZWN0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IENvbm5lY3Rpb24obmV0d29ya09yQ29ubmVjdGlvbiA9PT0gXCJtYWlubmV0XCJcbiAgICAgICAgPyBcImh0dHBzOi8vYXBpLm1haW5uZXQtYmV0YS5zb2xhbmEuY29tXCJcbiAgICAgICAgOiBcImh0dHBzOi8vYXBpLmRldm5ldC5zb2xhbmEuY29tXCIpO1xufVxuLyoqXG4gKiBMZWdhY3kgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgZHVyaW5nIG1pZ3JhdGlvblxuICpcbiAqIEBwYXJhbSBjb25uZWN0aW9uIC0gVGhlIFNvbGFuYSBDb25uZWN0aW9uIGluc3RhbmNlXG4gKiBAcmV0dXJucyBUaGUgbmV0d29yayB0eXBlIChtYWlubmV0IG9yIGRldm5ldClcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbm5lY3RlZE5ldHdvcmsoY29ubmVjdGlvbikge1xuICAgIGNvbnN0IGdlbmVzaXNIYXNoID0gYXdhaXQgY29ubmVjdGlvbi5nZXRHZW5lc2lzSGFzaCgpO1xuICAgIGlmIChnZW5lc2lzSGFzaCA9PT0gR0VORVNJU19IQVNIX01BSU5ORVQpIHtcbiAgICAgICAgcmV0dXJuIFwibWFpbm5ldFwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChnZW5lc2lzSGFzaCA9PT0gR0VORVNJU19IQVNIX0RFVk5FVCkge1xuICAgICAgICByZXR1cm4gXCJkZXZuZXRcIjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBvciB1bnN1cHBvcnRlZCBuZXR3b3JrXCIpO1xufVxuLyoqXG4gKiBHZXQgdGhlIFVTREMgbWludCBhZGRyZXNzIGZvciB0aGUgZ2l2ZW4gY29ubmVjdGlvblxuICpcbiAqIEBwYXJhbSBuZXR3b3JrIC0gVGhlIG5ldHdvcmsgdG8gdXNlXG4gKlxuICogQHJldHVybnMgVGhlIFVTREMgbWludCBhZGRyZXNzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2RjTWludEFkZHJlc3MobmV0d29yaykge1xuICAgIGlmIChuZXR3b3JrID09PSBcIm1haW5uZXRcIikge1xuICAgICAgICByZXR1cm4gVVNEQ19NQUlOTkVUX01JTlRfQUREUkVTUztcbiAgICB9XG4gICAgcmV0dXJuIFVTRENfREVWTkVUX01JTlRfQUREUkVTUztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/waitForFundOperationReceipt.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/actions/waitForFundOperationReceipt.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   waitForFundOperationReceipt: () => (/* binding */ waitForFundOperationReceipt)\n/* harmony export */ });\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js\");\n/* harmony import */ var _utils_wait_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/wait.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/wait.js\");\n\n\n/**\n * Waits for a fund operation to complete or fail.\n *\n * @deprecated This method will be removed in a future version. Consider using our Onramp API instead. See https://docs.cdp.coinbase.com/api-reference/v2/rest-api/onramp/create-an-onramp-order.\n * @example\n * ```ts\n * import { waitForFundOperation } from \"@coinbase/cdp-sdk\";\n *\n * const result = await waitForFundOperation(client, {\n *   transferId: \"0x1234567890123456789012345678901234567890\",\n *   waitOptions: {\n *     timeoutSeconds: 30,\n *   },\n * });\n * ```\n *\n * @param {CdpOpenApiClientType} client - The client to use to wait for the fund operation.\n * @param {WaitForFundOperationOptions} options - The options for the wait operation.\n * @returns {Promise<WaitForFundOperationResult>} The result of the fund operation.\n */\nasync function waitForFundOperationReceipt(client, options) {\n    const { transferId } = options;\n    const reload = async () => {\n        const response = await client.getPaymentTransfer(transferId);\n        return response;\n    };\n    const transform = (operation) => {\n        if (operation.status === _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.TransferStatus.failed) {\n            return {\n                id: operation.id,\n                network: operation.target.network,\n                targetAmount: operation.targetAmount,\n                targetCurrency: operation.targetCurrency,\n                status: operation.status,\n            };\n        }\n        else if (operation.status === _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.TransferStatus.completed) {\n            return {\n                id: operation.id,\n                network: operation.target.network,\n                targetAmount: operation.targetAmount,\n                targetCurrency: operation.targetCurrency,\n                status: operation.status,\n                transactionHash: operation.transactionHash,\n            };\n        }\n        else {\n            throw new Error(\"Transfer is not terminal\");\n        }\n    };\n    const waitOptions = options.waitOptions || {\n        timeoutSeconds: 900,\n        intervalSeconds: 1,\n    };\n    return await (0,_utils_wait_js__WEBPACK_IMPORTED_MODULE_1__.wait)(reload, isTerminal, transform, waitOptions);\n}\nconst isTerminal = (operation) => {\n    return (operation.status === _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.TransferStatus.completed || operation.status === _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.TransferStatus.failed);\n};\n//# sourceMappingURL=waitForFundOperationReceipt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3dhaXRGb3JGdW5kT3BlcmF0aW9uUmVjZWlwdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEQ7QUFDcEI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDLFdBQVcsNkJBQTZCO0FBQ3hDLGFBQWEscUNBQXFDO0FBQ2xEO0FBQ087QUFDUCxZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxvRUFBYztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLG9FQUFjO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsb0RBQUk7QUFDckI7QUFDQTtBQUNBLGlDQUFpQyxvRUFBYyxtQ0FBbUMsb0VBQWM7QUFDaEc7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hY3Rpb25zL3dhaXRGb3JGdW5kT3BlcmF0aW9uUmVjZWlwdC5qcz9jNTZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zZmVyU3RhdHVzIH0gZnJvbSBcIi4uL29wZW5hcGktY2xpZW50L2luZGV4LmpzXCI7XG5pbXBvcnQgeyB3YWl0IH0gZnJvbSBcIi4uL3V0aWxzL3dhaXQuanNcIjtcbi8qKlxuICogV2FpdHMgZm9yIGEgZnVuZCBvcGVyYXRpb24gdG8gY29tcGxldGUgb3IgZmFpbC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIG1ldGhvZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi4gQ29uc2lkZXIgdXNpbmcgb3VyIE9ucmFtcCBBUEkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZG9jcy5jZHAuY29pbmJhc2UuY29tL2FwaS1yZWZlcmVuY2UvdjIvcmVzdC1hcGkvb25yYW1wL2NyZWF0ZS1hbi1vbnJhbXAtb3JkZXIuXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IHdhaXRGb3JGdW5kT3BlcmF0aW9uIH0gZnJvbSBcIkBjb2luYmFzZS9jZHAtc2RrXCI7XG4gKlxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgd2FpdEZvckZ1bmRPcGVyYXRpb24oY2xpZW50LCB7XG4gKiAgIHRyYW5zZmVySWQ6IFwiMHgxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwXCIsXG4gKiAgIHdhaXRPcHRpb25zOiB7XG4gKiAgICAgdGltZW91dFNlY29uZHM6IDMwLFxuICogICB9LFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NkcE9wZW5BcGlDbGllbnRUeXBlfSBjbGllbnQgLSBUaGUgY2xpZW50IHRvIHVzZSB0byB3YWl0IGZvciB0aGUgZnVuZCBvcGVyYXRpb24uXG4gKiBAcGFyYW0ge1dhaXRGb3JGdW5kT3BlcmF0aW9uT3B0aW9uc30gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgd2FpdCBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxXYWl0Rm9yRnVuZE9wZXJhdGlvblJlc3VsdD59IFRoZSByZXN1bHQgb2YgdGhlIGZ1bmQgb3BlcmF0aW9uLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvckZ1bmRPcGVyYXRpb25SZWNlaXB0KGNsaWVudCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgdHJhbnNmZXJJZCB9ID0gb3B0aW9ucztcbiAgICBjb25zdCByZWxvYWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldFBheW1lbnRUcmFuc2Zlcih0cmFuc2ZlcklkKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH07XG4gICAgY29uc3QgdHJhbnNmb3JtID0gKG9wZXJhdGlvbikgPT4ge1xuICAgICAgICBpZiAob3BlcmF0aW9uLnN0YXR1cyA9PT0gVHJhbnNmZXJTdGF0dXMuZmFpbGVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkOiBvcGVyYXRpb24uaWQsXG4gICAgICAgICAgICAgICAgbmV0d29yazogb3BlcmF0aW9uLnRhcmdldC5uZXR3b3JrLFxuICAgICAgICAgICAgICAgIHRhcmdldEFtb3VudDogb3BlcmF0aW9uLnRhcmdldEFtb3VudCxcbiAgICAgICAgICAgICAgICB0YXJnZXRDdXJyZW5jeTogb3BlcmF0aW9uLnRhcmdldEN1cnJlbmN5LFxuICAgICAgICAgICAgICAgIHN0YXR1czogb3BlcmF0aW9uLnN0YXR1cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3BlcmF0aW9uLnN0YXR1cyA9PT0gVHJhbnNmZXJTdGF0dXMuY29tcGxldGVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkOiBvcGVyYXRpb24uaWQsXG4gICAgICAgICAgICAgICAgbmV0d29yazogb3BlcmF0aW9uLnRhcmdldC5uZXR3b3JrLFxuICAgICAgICAgICAgICAgIHRhcmdldEFtb3VudDogb3BlcmF0aW9uLnRhcmdldEFtb3VudCxcbiAgICAgICAgICAgICAgICB0YXJnZXRDdXJyZW5jeTogb3BlcmF0aW9uLnRhcmdldEN1cnJlbmN5LFxuICAgICAgICAgICAgICAgIHN0YXR1czogb3BlcmF0aW9uLnN0YXR1cyxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2g6IG9wZXJhdGlvbi50cmFuc2FjdGlvbkhhc2gsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJhbnNmZXIgaXMgbm90IHRlcm1pbmFsXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB3YWl0T3B0aW9ucyA9IG9wdGlvbnMud2FpdE9wdGlvbnMgfHwge1xuICAgICAgICB0aW1lb3V0U2Vjb25kczogOTAwLFxuICAgICAgICBpbnRlcnZhbFNlY29uZHM6IDEsXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgd2FpdChyZWxvYWQsIGlzVGVybWluYWwsIHRyYW5zZm9ybSwgd2FpdE9wdGlvbnMpO1xufVxuY29uc3QgaXNUZXJtaW5hbCA9IChvcGVyYXRpb24pID0+IHtcbiAgICByZXR1cm4gKG9wZXJhdGlvbi5zdGF0dXMgPT09IFRyYW5zZmVyU3RhdHVzLmNvbXBsZXRlZCB8fCBvcGVyYXRpb24uc3RhdHVzID09PSBUcmFuc2ZlclN0YXR1cy5mYWlsZWQpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhaXRGb3JGdW5kT3BlcmF0aW9uUmVjZWlwdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/waitForFundOperationReceipt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js":
/*!**********************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/analytics.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Analytics: () => (/* binding */ Analytics)\n/* harmony export */ });\n/* harmony import */ var md5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! md5 */ \"(ssr)/./node_modules/md5/md5.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n/* harmony import */ var _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./openapi-client/errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/errors.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/version.js\");\n\n\n\n\n// This is a public client id for the analytics service\nconst publicClientId = \"54f2ee2fb3d2b901a829940d70fbfc13\";\nconst Analytics = {\n    identifier: \"\", // set in cdp.ts\n    wrapClassWithErrorTracking,\n    wrapObjectMethodsWithErrorTracking,\n    sendEvent,\n    trackAction,\n};\n/**\n * Sends an analytics event to the default endpoint\n *\n * @param event - The event data containing event-specific fields\n * @returns Promise that resolves when the event is sent\n */\nasync function sendEvent(event) {\n    if (event.name === \"error\" && process.env.DISABLE_CDP_ERROR_REPORTING === \"true\") {\n        return;\n    }\n    if (event.name !== \"error\" && process.env.DISABLE_CDP_USAGE_TRACKING === \"true\") {\n        return;\n    }\n    const timestamp = Date.now();\n    const enhancedEvent = {\n        user_id: Analytics.identifier,\n        event_type: event.name,\n        platform: \"server\",\n        timestamp,\n        event_properties: {\n            project_name: \"cdp-sdk\",\n            cdp_sdk_language: \"typescript\",\n            version: _version_js__WEBPACK_IMPORTED_MODULE_1__.version,\n            ...event,\n        },\n    };\n    const events = [enhancedEvent];\n    const stringifiedEventData = JSON.stringify(events);\n    const uploadTime = timestamp.toString();\n    const checksum = md5__WEBPACK_IMPORTED_MODULE_0__(stringifiedEventData + uploadTime);\n    const analyticsServiceData = {\n        client: publicClientId,\n        e: stringifiedEventData,\n        checksum,\n    };\n    const apiEndpoint = \"https://cca-lite.coinbase.com\";\n    const eventPath = \"/amp\";\n    const eventEndPoint = `${apiEndpoint}${eventPath}`;\n    await fetch(eventEndPoint, {\n        method: \"POST\",\n        mode: \"no-cors\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(analyticsServiceData),\n    });\n}\n/**\n * Track an action being performed\n *\n * @param params - The parameters for tracking an action\n * @param params.action - The action being performed\n * @param params.accountType - The type of account\n * @param params.properties - Additional properties\n */\nfunction trackAction(params) {\n    if (params.properties?.network &&\n        typeof params.properties.network === \"string\" &&\n        params.properties.network.startsWith(\"http\")) {\n        const url = new URL(params.properties.network);\n        params.properties.customRpcHost = url.hostname;\n        params.properties.network = \"custom\";\n    }\n    sendEvent({\n        action: params.action,\n        accountType: params.accountType,\n        properties: params.properties,\n        name: \"action\",\n    }).catch(() => {\n        // ignore error\n    });\n}\n/**\n * Wraps all methods of a class with error tracking.\n *\n * @param ClassToWrap - The class whose prototype methods should be wrapped.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapClassWithErrorTracking(ClassToWrap) {\n    if (process.env.DISABLE_CDP_ERROR_REPORTING === \"true\") {\n        return;\n    }\n    const methods = Object.getOwnPropertyNames(ClassToWrap.prototype).filter(name => name !== \"constructor\" && typeof ClassToWrap.prototype[name] === \"function\");\n    for (const method of methods) {\n        const originalMethod = ClassToWrap.prototype[method];\n        ClassToWrap.prototype[method] = async function (...args) {\n            try {\n                return await originalMethod.apply(this, args);\n            }\n            catch (error) {\n                if (!shouldTrackError(error)) {\n                    throw error;\n                }\n                const { message, stack } = error;\n                sendEvent({\n                    method,\n                    message,\n                    stack,\n                    name: \"error\",\n                }).catch(() => {\n                    // ignore error\n                });\n                throw error;\n            }\n        };\n    }\n}\n/**\n * Wraps all methods of an object with error tracking.\n *\n * @param object - The object whose methods should be wrapped.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapObjectMethodsWithErrorTracking(object) {\n    if (process.env.DISABLE_CDP_ERROR_REPORTING === \"true\") {\n        return;\n    }\n    const methods = Object.getOwnPropertyNames(object).filter(name => name !== \"constructor\" && typeof object[name] === \"function\");\n    for (const method of methods) {\n        const originalMethod = object[method];\n        object[method] = async function (...args) {\n            try {\n                return await originalMethod.apply(this, args);\n            }\n            catch (error) {\n                if (!shouldTrackError(error)) {\n                    throw error;\n                }\n                const { message, stack } = error;\n                sendEvent({\n                    method,\n                    message,\n                    stack,\n                    name: \"error\",\n                }).catch(() => {\n                    // ignore error\n                });\n                throw error;\n            }\n        };\n    }\n}\n/**\n * Filters out non-errors and API errors\n *\n * @param error - The error to check.\n * @returns True if the error should be tracked, false otherwise.\n */\nfunction shouldTrackError(error) {\n    if (!(error instanceof Error)) {\n        return false;\n    }\n    if (error instanceof _errors_js__WEBPACK_IMPORTED_MODULE_2__.UserInputValidationError) {\n        return false;\n    }\n    if (error instanceof _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_3__.NetworkError) {\n        return true;\n    }\n    if (error instanceof _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_3__.APIError && error.errorType !== \"unexpected_error\") {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=analytics.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/errors.js":
/*!************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/auth/errors.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidAPIKeyFormatError: () => (/* binding */ InvalidAPIKeyFormatError),\n/* harmony export */   InvalidWalletSecretFormatError: () => (/* binding */ InvalidWalletSecretFormatError),\n/* harmony export */   UndefinedWalletSecretError: () => (/* binding */ UndefinedWalletSecretError)\n/* harmony export */ });\n/**\n * @module Errors\n */\n/**\n * A class of errors for capturing stack traces.\n */\nclass BaseError extends Error {\n    /**\n     * Base error constructor.\n     *\n     * @param message - The message to display.\n     */\n    constructor(message) {\n        super(message);\n        this.name = this.constructor.name;\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\n/**\n * An error for invalid API key format.\n */\nclass InvalidAPIKeyFormatError extends BaseError {\n    /**\n     * Invalid API key format error constructor.\n     *\n     * @param message - The message to display.\n     */\n    constructor(message) {\n        super(\"Invalid API key format: \" + message);\n    }\n}\n/**\n * An error for invalid Wallet Secret format.\n */\nclass InvalidWalletSecretFormatError extends BaseError {\n    /**\n     * Invalid Wallet Secret format error constructor.\n     *\n     * @param message - The message to display.\n     */\n    constructor(message) {\n        super(\"Invalid Wallet Secret format: \" + message);\n    }\n}\n/**\n * An error for an undefined Wallet Secret.\n */\nclass UndefinedWalletSecretError extends BaseError {\n    /**\n     * Undefined Wallet Secret error constructor.\n     *\n     * @param message - The message to display.\n     */\n    constructor(message) {\n        super(\"Undefined Wallet Secret: \" + message);\n    }\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hdXRoL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYXV0aC9lcnJvcnMuanM/YWJiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgRXJyb3JzXG4gKi9cbi8qKlxuICogQSBjbGFzcyBvZiBlcnJvcnMgZm9yIGNhcHR1cmluZyBzdGFjayB0cmFjZXMuXG4gKi9cbmNsYXNzIEJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICAvKipcbiAgICAgKiBCYXNlIGVycm9yIGNvbnN0cnVjdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0byBkaXNwbGF5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQW4gZXJyb3IgZm9yIGludmFsaWQgQVBJIGtleSBmb3JtYXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQVBJS2V5Rm9ybWF0RXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEludmFsaWQgQVBJIGtleSBmb3JtYXQgZXJyb3IgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihcIkludmFsaWQgQVBJIGtleSBmb3JtYXQ6IFwiICsgbWVzc2FnZSk7XG4gICAgfVxufVxuLyoqXG4gKiBBbiBlcnJvciBmb3IgaW52YWxpZCBXYWxsZXQgU2VjcmV0IGZvcm1hdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRXYWxsZXRTZWNyZXRGb3JtYXRFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgLyoqXG4gICAgICogSW52YWxpZCBXYWxsZXQgU2VjcmV0IGZvcm1hdCBlcnJvciBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gZGlzcGxheS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKFwiSW52YWxpZCBXYWxsZXQgU2VjcmV0IGZvcm1hdDogXCIgKyBtZXNzYWdlKTtcbiAgICB9XG59XG4vKipcbiAqIEFuIGVycm9yIGZvciBhbiB1bmRlZmluZWQgV2FsbGV0IFNlY3JldC5cbiAqL1xuZXhwb3J0IGNsYXNzIFVuZGVmaW5lZFdhbGxldFNlY3JldEVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICAvKipcbiAgICAgKiBVbmRlZmluZWQgV2FsbGV0IFNlY3JldCBlcnJvciBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gZGlzcGxheS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKFwiVW5kZWZpbmVkIFdhbGxldCBTZWNyZXQ6IFwiICsgbWVzc2FnZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/hooks/axios/withAuth.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/auth/hooks/axios/withAuth.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withAuth: () => (/* binding */ withAuth)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n/* harmony import */ var _utils_bigint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/bigint.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/bigint.js\");\n/* harmony import */ var _utils_http_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/http.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/http.js\");\n/**\n * @module Axios\n */\n\n\n\n/**\n * Axios interceptor for adding the JWT to the Authorization header.\n *\n * @param axiosClient - The Axios client instance to add the interceptor to\n * @param options - Options for the request including API keys and debug flag\n * @returns The modified request configuration with the Authorization header added\n */\nfunction withAuth(axiosClient, options) {\n    axiosClient.interceptors.request.use(async (axiosConfig) => {\n        const method = axiosConfig.method?.toString().toUpperCase() || \"GET\";\n        if (!axiosConfig.url) {\n            throw new Error(\"URL is required for authentication\");\n        }\n        const fullyQualifiedURL = axiosClient.getUri() + axiosConfig.url;\n        // Parse URL to get host and path\n        const url = new URL(fullyQualifiedURL);\n        // Convert bigints in request body to strings for safe serialization\n        if (axiosConfig.data) {\n            axiosConfig.data = (0,_utils_bigint_js__WEBPACK_IMPORTED_MODULE_0__.convertBigIntsToStrings)(axiosConfig.data);\n        }\n        // Get authentication headers\n        const headers = await (0,_utils_http_js__WEBPACK_IMPORTED_MODULE_1__.getAuthHeaders)({\n            apiKeyId: options.apiKeyId,\n            apiKeySecret: options.apiKeySecret,\n            requestMethod: method,\n            requestHost: url.host,\n            requestPath: url.pathname,\n            requestBody: axiosConfig.data,\n            walletSecret: options.walletSecret,\n            source: options.source,\n            sourceVersion: options.sourceVersion,\n            expiresIn: options.expiresIn,\n        });\n        // Add headers to request config\n        axiosConfig.headers = new axios__WEBPACK_IMPORTED_MODULE_2__.AxiosHeaders({\n            ...axiosConfig.headers,\n            ...headers,\n        });\n        if (options.debug) {\n            // eslint-disable-next-line no-console\n            console.log(\"Request:\", {\n                method,\n                url: fullyQualifiedURL,\n                headers: axiosConfig.headers,\n                data: axiosConfig.data,\n            });\n        }\n        return axiosConfig;\n    });\n    if (options.debug) {\n        axiosClient.interceptors.response.use(response => {\n            // eslint-disable-next-line no-console\n            console.log(\"Response:\", {\n                status: response.status,\n                statusText: response.statusText,\n                headers: response.headers,\n                data: response.data,\n            });\n            return response;\n        }, error => {\n            // Ensure we have access to the error response details\n            const errorDetails = {\n                status: error.response?.status,\n                statusText: error.response?.statusText,\n                headers: error.response?.headers,\n                data: error.response?.data,\n                message: error.message,\n                cause: error.cause,\n            };\n            // eslint-disable-next-line no-console\n            console.error(\"Response Error:\", errorDetails);\n            return Promise.reject(error);\n        });\n    }\n    return axiosClient;\n}\n//# sourceMappingURL=withAuth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hdXRoL2hvb2tzL2F4aW9zL3dpdGhBdXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDcUM7QUFDOEI7QUFDZDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IseUVBQXVCO0FBQ3REO0FBQ0E7QUFDQSw4QkFBOEIsOERBQWM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxrQ0FBa0MsK0NBQVk7QUFDOUM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2F1dGgvaG9va3MvYXhpb3Mvd2l0aEF1dGguanM/NzljYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgQXhpb3NcbiAqL1xuaW1wb3J0IHsgQXhpb3NIZWFkZXJzIH0gZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyBjb252ZXJ0QmlnSW50c1RvU3RyaW5ncyB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9iaWdpbnQuanNcIjtcbmltcG9ydCB7IGdldEF1dGhIZWFkZXJzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2h0dHAuanNcIjtcbi8qKlxuICogQXhpb3MgaW50ZXJjZXB0b3IgZm9yIGFkZGluZyB0aGUgSldUIHRvIHRoZSBBdXRob3JpemF0aW9uIGhlYWRlci5cbiAqXG4gKiBAcGFyYW0gYXhpb3NDbGllbnQgLSBUaGUgQXhpb3MgY2xpZW50IGluc3RhbmNlIHRvIGFkZCB0aGUgaW50ZXJjZXB0b3IgdG9cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIHJlcXVlc3QgaW5jbHVkaW5nIEFQSSBrZXlzIGFuZCBkZWJ1ZyBmbGFnXG4gKiBAcmV0dXJucyBUaGUgbW9kaWZpZWQgcmVxdWVzdCBjb25maWd1cmF0aW9uIHdpdGggdGhlIEF1dGhvcml6YXRpb24gaGVhZGVyIGFkZGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoQXV0aChheGlvc0NsaWVudCwgb3B0aW9ucykge1xuICAgIGF4aW9zQ2xpZW50LmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShhc3luYyAoYXhpb3NDb25maWcpID0+IHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gYXhpb3NDb25maWcubWV0aG9kPy50b1N0cmluZygpLnRvVXBwZXJDYXNlKCkgfHwgXCJHRVRcIjtcbiAgICAgICAgaWYgKCFheGlvc0NvbmZpZy51cmwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVSTCBpcyByZXF1aXJlZCBmb3IgYXV0aGVudGljYXRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZnVsbHlRdWFsaWZpZWRVUkwgPSBheGlvc0NsaWVudC5nZXRVcmkoKSArIGF4aW9zQ29uZmlnLnVybDtcbiAgICAgICAgLy8gUGFyc2UgVVJMIHRvIGdldCBob3N0IGFuZCBwYXRoXG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoZnVsbHlRdWFsaWZpZWRVUkwpO1xuICAgICAgICAvLyBDb252ZXJ0IGJpZ2ludHMgaW4gcmVxdWVzdCBib2R5IHRvIHN0cmluZ3MgZm9yIHNhZmUgc2VyaWFsaXphdGlvblxuICAgICAgICBpZiAoYXhpb3NDb25maWcuZGF0YSkge1xuICAgICAgICAgICAgYXhpb3NDb25maWcuZGF0YSA9IGNvbnZlcnRCaWdJbnRzVG9TdHJpbmdzKGF4aW9zQ29uZmlnLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdldCBhdXRoZW50aWNhdGlvbiBoZWFkZXJzXG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBhd2FpdCBnZXRBdXRoSGVhZGVycyh7XG4gICAgICAgICAgICBhcGlLZXlJZDogb3B0aW9ucy5hcGlLZXlJZCxcbiAgICAgICAgICAgIGFwaUtleVNlY3JldDogb3B0aW9ucy5hcGlLZXlTZWNyZXQsXG4gICAgICAgICAgICByZXF1ZXN0TWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICByZXF1ZXN0SG9zdDogdXJsLmhvc3QsXG4gICAgICAgICAgICByZXF1ZXN0UGF0aDogdXJsLnBhdGhuYW1lLFxuICAgICAgICAgICAgcmVxdWVzdEJvZHk6IGF4aW9zQ29uZmlnLmRhdGEsXG4gICAgICAgICAgICB3YWxsZXRTZWNyZXQ6IG9wdGlvbnMud2FsbGV0U2VjcmV0LFxuICAgICAgICAgICAgc291cmNlOiBvcHRpb25zLnNvdXJjZSxcbiAgICAgICAgICAgIHNvdXJjZVZlcnNpb246IG9wdGlvbnMuc291cmNlVmVyc2lvbixcbiAgICAgICAgICAgIGV4cGlyZXNJbjogb3B0aW9ucy5leHBpcmVzSW4sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBBZGQgaGVhZGVycyB0byByZXF1ZXN0IGNvbmZpZ1xuICAgICAgICBheGlvc0NvbmZpZy5oZWFkZXJzID0gbmV3IEF4aW9zSGVhZGVycyh7XG4gICAgICAgICAgICAuLi5heGlvc0NvbmZpZy5oZWFkZXJzLFxuICAgICAgICAgICAgLi4uaGVhZGVycyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvcHRpb25zLmRlYnVnKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZXF1ZXN0OlwiLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIHVybDogZnVsbHlRdWFsaWZpZWRVUkwsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogYXhpb3NDb25maWcuaGVhZGVycyxcbiAgICAgICAgICAgICAgICBkYXRhOiBheGlvc0NvbmZpZy5kYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF4aW9zQ29uZmlnO1xuICAgIH0pO1xuICAgIGlmIChvcHRpb25zLmRlYnVnKSB7XG4gICAgICAgIGF4aW9zQ2xpZW50LmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVzcG9uc2U6XCIsIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgZGF0YTogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgd2UgaGF2ZSBhY2Nlc3MgdG8gdGhlIGVycm9yIHJlc3BvbnNlIGRldGFpbHNcbiAgICAgICAgICAgIGNvbnN0IGVycm9yRGV0YWlscyA9IHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IGVycm9yLnJlc3BvbnNlPy5zdGF0dXMsXG4gICAgICAgICAgICAgICAgc3RhdHVzVGV4dDogZXJyb3IucmVzcG9uc2U/LnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogZXJyb3IucmVzcG9uc2U/LmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgZGF0YTogZXJyb3IucmVzcG9uc2U/LmRhdGEsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBjYXVzZTogZXJyb3IuY2F1c2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJSZXNwb25zZSBFcnJvcjpcIiwgZXJyb3JEZXRhaWxzKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXhpb3NDbGllbnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoQXV0aC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/hooks/axios/withAuth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/hash.js":
/*!****************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/hash.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authHash: () => (/* binding */ authHash)\n/* harmony export */ });\n/* harmony import */ var uncrypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uncrypto */ \"(ssr)/./node_modules/uncrypto/dist/crypto.node.mjs\");\n/**\n * @module Hash\n */\n\n/**\n * Auth-specific hash function using uncrypto for Edge runtime compatibility.\n * Computes SHA-256 hash of the given data.\n *\n * @param data - The data to hash\n * @returns Promise that resolves to the hex-encoded hash\n */\nconst authHash = async (data) => {\n    const hashBuffer = await uncrypto__WEBPACK_IMPORTED_MODULE_0__.subtle.digest(\"SHA-256\", data);\n    return Buffer.from(hashBuffer).toString(\"hex\");\n};\n//# sourceMappingURL=hash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hdXRoL3V0aWxzL2hhc2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLDZCQUE2Qiw0Q0FBTTtBQUNuQztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vYXV0aC91dGlscy9oYXNoLmpzP2FmMmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIEhhc2hcbiAqL1xuaW1wb3J0IHsgc3VidGxlIH0gZnJvbSBcInVuY3J5cHRvXCI7XG4vKipcbiAqIEF1dGgtc3BlY2lmaWMgaGFzaCBmdW5jdGlvbiB1c2luZyB1bmNyeXB0byBmb3IgRWRnZSBydW50aW1lIGNvbXBhdGliaWxpdHkuXG4gKiBDb21wdXRlcyBTSEEtMjU2IGhhc2ggb2YgdGhlIGdpdmVuIGRhdGEuXG4gKlxuICogQHBhcmFtIGRhdGEgLSBUaGUgZGF0YSB0byBoYXNoXG4gKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGhleC1lbmNvZGVkIGhhc2hcbiAqL1xuZXhwb3J0IGNvbnN0IGF1dGhIYXNoID0gYXN5bmMgKGRhdGEpID0+IHtcbiAgICBjb25zdCBoYXNoQnVmZmVyID0gYXdhaXQgc3VidGxlLmRpZ2VzdChcIlNIQS0yNTZcIiwgZGF0YSk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGhhc2hCdWZmZXIpLnRvU3RyaW5nKFwiaGV4XCIpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2guanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/http.js":
/*!****************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/http.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAuthHeaders: () => (/* binding */ getAuthHeaders),\n/* harmony export */   getCorrelationData: () => (/* binding */ getCorrelationData)\n/* harmony export */ });\n/* harmony import */ var _jwt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jwt.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/jwt.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../version.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/version.js\");\n/**\n * @module HTTP\n */\n\n\n/**\n * Gets authentication headers for a request.\n *\n * @param options - The configuration options for generating auth headers\n * @returns Object containing the authentication headers\n */\nasync function getAuthHeaders(options) {\n    const headers = {};\n    // Generate and add JWT token\n    const jwt = await (0,_jwt_js__WEBPACK_IMPORTED_MODULE_0__.generateJwt)({\n        apiKeyId: options.apiKeyId,\n        apiKeySecret: options.apiKeySecret,\n        requestMethod: options.requestMethod,\n        requestHost: options.requestHost,\n        requestPath: options.requestPath,\n        expiresIn: options.expiresIn,\n        audience: options.audience,\n    });\n    headers[\"Authorization\"] = `Bearer ${jwt}`;\n    headers[\"Content-Type\"] = \"application/json\";\n    // Add wallet auth if needed\n    if (requiresWalletAuth(options.requestMethod, options.requestPath)) {\n        if (!options.walletSecret) {\n            throw new Error(\"Wallet Secret not configured. Please set the CDP_WALLET_SECRET environment variable, or pass it as an option to the CdpClient constructor.\");\n        }\n        const walletAuthToken = await (0,_jwt_js__WEBPACK_IMPORTED_MODULE_0__.generateWalletJwt)({\n            walletSecret: options.walletSecret,\n            requestMethod: options.requestMethod,\n            requestHost: options.requestHost,\n            requestPath: options.requestPath,\n            requestData: options.requestBody || {},\n        });\n        headers[\"X-Wallet-Auth\"] = walletAuthToken;\n    }\n    // Add correlation data\n    headers[\"Correlation-Context\"] = getCorrelationData(options.source, options.sourceVersion);\n    return headers;\n}\n/**\n * Returns true if the request indicated by the method and URL requires wallet authentication.\n *\n * @param requestMethod - The HTTP method of the request\n * @param requestPath - The URL path of the request\n * @returns True if the request requires wallet authentication, false otherwise\n */\nfunction requiresWalletAuth(requestMethod, requestPath) {\n    return ((requestPath?.includes(\"/accounts\") || requestPath?.includes(\"/spend-permissions\")) &&\n        (requestMethod === \"POST\" || requestMethod === \"DELETE\" || requestMethod === \"PUT\"));\n}\n/**\n * Returns encoded correlation data including the SDK version and language.\n *\n * @param source - The source identifier for the request\n * @param sourceVersion - The version of the source making the request\n * @returns Encoded correlation data as a query string\n */\nfunction getCorrelationData(source, sourceVersion) {\n    const data = {\n        sdk_version: _version_js__WEBPACK_IMPORTED_MODULE_1__.version,\n        sdk_language: \"typescript\",\n        source: source || \"sdk-auth\",\n    };\n    if (sourceVersion) {\n        data[\"source_version\"] = sourceVersion;\n    }\n    return Object.keys(data)\n        .map(key => `${key}=${encodeURIComponent(data[key])}`)\n        .join(\",\");\n}\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hdXRoL3V0aWxzL2h0dHAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUMwRDtBQUNmO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLHNCQUFzQixvREFBVztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx5Q0FBeUMsSUFBSTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsMERBQWlCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EscUJBQXFCLGdEQUFPO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLElBQUksR0FBRyw4QkFBOEI7QUFDNUQ7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2F1dGgvdXRpbHMvaHR0cC5qcz8wOWY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBIVFRQXG4gKi9cbmltcG9ydCB7IGdlbmVyYXRlV2FsbGV0Snd0LCBnZW5lcmF0ZUp3dCB9IGZyb20gXCIuL2p3dC5qc1wiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuLi8uLi92ZXJzaW9uLmpzXCI7XG4vKipcbiAqIEdldHMgYXV0aGVudGljYXRpb24gaGVhZGVycyBmb3IgYSByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgZ2VuZXJhdGluZyBhdXRoIGhlYWRlcnNcbiAqIEByZXR1cm5zIE9iamVjdCBjb250YWluaW5nIHRoZSBhdXRoZW50aWNhdGlvbiBoZWFkZXJzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBdXRoSGVhZGVycyhvcHRpb25zKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIC8vIEdlbmVyYXRlIGFuZCBhZGQgSldUIHRva2VuXG4gICAgY29uc3Qgand0ID0gYXdhaXQgZ2VuZXJhdGVKd3Qoe1xuICAgICAgICBhcGlLZXlJZDogb3B0aW9ucy5hcGlLZXlJZCxcbiAgICAgICAgYXBpS2V5U2VjcmV0OiBvcHRpb25zLmFwaUtleVNlY3JldCxcbiAgICAgICAgcmVxdWVzdE1ldGhvZDogb3B0aW9ucy5yZXF1ZXN0TWV0aG9kLFxuICAgICAgICByZXF1ZXN0SG9zdDogb3B0aW9ucy5yZXF1ZXN0SG9zdCxcbiAgICAgICAgcmVxdWVzdFBhdGg6IG9wdGlvbnMucmVxdWVzdFBhdGgsXG4gICAgICAgIGV4cGlyZXNJbjogb3B0aW9ucy5leHBpcmVzSW4sXG4gICAgICAgIGF1ZGllbmNlOiBvcHRpb25zLmF1ZGllbmNlLFxuICAgIH0pO1xuICAgIGhlYWRlcnNbXCJBdXRob3JpemF0aW9uXCJdID0gYEJlYXJlciAke2p3dH1gO1xuICAgIGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgICAvLyBBZGQgd2FsbGV0IGF1dGggaWYgbmVlZGVkXG4gICAgaWYgKHJlcXVpcmVzV2FsbGV0QXV0aChvcHRpb25zLnJlcXVlc3RNZXRob2QsIG9wdGlvbnMucmVxdWVzdFBhdGgpKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy53YWxsZXRTZWNyZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldhbGxldCBTZWNyZXQgbm90IGNvbmZpZ3VyZWQuIFBsZWFzZSBzZXQgdGhlIENEUF9XQUxMRVRfU0VDUkVUIGVudmlyb25tZW50IHZhcmlhYmxlLCBvciBwYXNzIGl0IGFzIGFuIG9wdGlvbiB0byB0aGUgQ2RwQ2xpZW50IGNvbnN0cnVjdG9yLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3YWxsZXRBdXRoVG9rZW4gPSBhd2FpdCBnZW5lcmF0ZVdhbGxldEp3dCh7XG4gICAgICAgICAgICB3YWxsZXRTZWNyZXQ6IG9wdGlvbnMud2FsbGV0U2VjcmV0LFxuICAgICAgICAgICAgcmVxdWVzdE1ldGhvZDogb3B0aW9ucy5yZXF1ZXN0TWV0aG9kLFxuICAgICAgICAgICAgcmVxdWVzdEhvc3Q6IG9wdGlvbnMucmVxdWVzdEhvc3QsXG4gICAgICAgICAgICByZXF1ZXN0UGF0aDogb3B0aW9ucy5yZXF1ZXN0UGF0aCxcbiAgICAgICAgICAgIHJlcXVlc3REYXRhOiBvcHRpb25zLnJlcXVlc3RCb2R5IHx8IHt9LFxuICAgICAgICB9KTtcbiAgICAgICAgaGVhZGVyc1tcIlgtV2FsbGV0LUF1dGhcIl0gPSB3YWxsZXRBdXRoVG9rZW47XG4gICAgfVxuICAgIC8vIEFkZCBjb3JyZWxhdGlvbiBkYXRhXG4gICAgaGVhZGVyc1tcIkNvcnJlbGF0aW9uLUNvbnRleHRcIl0gPSBnZXRDb3JyZWxhdGlvbkRhdGEob3B0aW9ucy5zb3VyY2UsIG9wdGlvbnMuc291cmNlVmVyc2lvbik7XG4gICAgcmV0dXJuIGhlYWRlcnM7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcmVxdWVzdCBpbmRpY2F0ZWQgYnkgdGhlIG1ldGhvZCBhbmQgVVJMIHJlcXVpcmVzIHdhbGxldCBhdXRoZW50aWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gcmVxdWVzdE1ldGhvZCAtIFRoZSBIVFRQIG1ldGhvZCBvZiB0aGUgcmVxdWVzdFxuICogQHBhcmFtIHJlcXVlc3RQYXRoIC0gVGhlIFVSTCBwYXRoIG9mIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSByZXF1ZXN0IHJlcXVpcmVzIHdhbGxldCBhdXRoZW50aWNhdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmZ1bmN0aW9uIHJlcXVpcmVzV2FsbGV0QXV0aChyZXF1ZXN0TWV0aG9kLCByZXF1ZXN0UGF0aCkge1xuICAgIHJldHVybiAoKHJlcXVlc3RQYXRoPy5pbmNsdWRlcyhcIi9hY2NvdW50c1wiKSB8fCByZXF1ZXN0UGF0aD8uaW5jbHVkZXMoXCIvc3BlbmQtcGVybWlzc2lvbnNcIikpICYmXG4gICAgICAgIChyZXF1ZXN0TWV0aG9kID09PSBcIlBPU1RcIiB8fCByZXF1ZXN0TWV0aG9kID09PSBcIkRFTEVURVwiIHx8IHJlcXVlc3RNZXRob2QgPT09IFwiUFVUXCIpKTtcbn1cbi8qKlxuICogUmV0dXJucyBlbmNvZGVkIGNvcnJlbGF0aW9uIGRhdGEgaW5jbHVkaW5nIHRoZSBTREsgdmVyc2lvbiBhbmQgbGFuZ3VhZ2UuXG4gKlxuICogQHBhcmFtIHNvdXJjZSAtIFRoZSBzb3VyY2UgaWRlbnRpZmllciBmb3IgdGhlIHJlcXVlc3RcbiAqIEBwYXJhbSBzb3VyY2VWZXJzaW9uIC0gVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYWtpbmcgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIEVuY29kZWQgY29ycmVsYXRpb24gZGF0YSBhcyBhIHF1ZXJ5IHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29ycmVsYXRpb25EYXRhKHNvdXJjZSwgc291cmNlVmVyc2lvbikge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIHNka192ZXJzaW9uOiB2ZXJzaW9uLFxuICAgICAgICBzZGtfbGFuZ3VhZ2U6IFwidHlwZXNjcmlwdFwiLFxuICAgICAgICBzb3VyY2U6IHNvdXJjZSB8fCBcInNkay1hdXRoXCIsXG4gICAgfTtcbiAgICBpZiAoc291cmNlVmVyc2lvbikge1xuICAgICAgICBkYXRhW1wic291cmNlX3ZlcnNpb25cIl0gPSBzb3VyY2VWZXJzaW9uO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZGF0YSlcbiAgICAgICAgLm1hcChrZXkgPT4gYCR7a2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudChkYXRhW2tleV0pfWApXG4gICAgICAgIC5qb2luKFwiLFwiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/jwt.js":
/*!***************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/jwt.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateJwt: () => (/* binding */ generateJwt),\n/* harmony export */   generateWalletJwt: () => (/* binding */ generateWalletJwt)\n/* harmony export */ });\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jose */ \"(ssr)/./node_modules/jose/dist/webapi/key/import.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jose */ \"(ssr)/./node_modules/jose/dist/webapi/jwt/sign.js\");\n/* harmony import */ var uncrypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uncrypto */ \"(ssr)/./node_modules/uncrypto/dist/crypto.node.mjs\");\n/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hash.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/hash.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n/* harmony import */ var _utils_sortKeys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/sortKeys.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/sortKeys.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/errors.js\");\n/**\n * @module JWT\n */\n\n\n\n\n\n\n/**\n * Generates a JWT (also known as a Bearer token) for authenticating with Coinbase's REST APIs.\n * Supports both EC (ES256) and Ed25519 (EdDSA) keys. Also supports JWTs meant for\n * websocket connections by allowing requestMethod, requestHost, and requestPath to all be\n * null, in which case the 'uris' claim is omitted from the JWT.\n *\n * @param options - The configuration options for generating the JWT\n * @returns The generated JWT (Bearer token) string\n * @throws {Error} If required parameters are missing, invalid, or if JWT signing fails\n */\nasync function generateJwt(options) {\n    // Validate required parameters\n    if (!options.apiKeyId) {\n        throw new Error(\"Key name is required\");\n    }\n    if (!options.apiKeySecret) {\n        throw new Error(\"Private key is required\");\n    }\n    // Check if we have a REST API request or a websocket connection\n    const hasAllRequestParams = Boolean(options.requestMethod && options.requestHost && options.requestPath);\n    const hasNoRequestParams = (options.requestMethod === undefined || options.requestMethod === null) &&\n        (options.requestHost === undefined || options.requestHost === null) &&\n        (options.requestPath === undefined || options.requestPath === null);\n    // Ensure we either have all request parameters or none (for websocket)\n    if (!hasAllRequestParams && !hasNoRequestParams) {\n        throw new Error(\"Either all request details (method, host, path) must be provided, or all must be null for JWTs intended for websocket connections\");\n    }\n    const now = Math.floor(Date.now() / 1000);\n    const expiresIn = options.expiresIn || 120; // Default to 120 seconds if not specified\n    // Prepare the JWT payload\n    const claims = {\n        sub: options.apiKeyId,\n        iss: \"cdp\",\n        aud: options.audience || [\"cdp_service\"],\n    };\n    // Add the uris claim only for REST API requests\n    if (hasAllRequestParams) {\n        claims.uris = [`${options.requestMethod} ${options.requestHost}${options.requestPath}`];\n    }\n    // Generate random nonce for the header\n    const randomNonce = nonce();\n    // Determine if we're using EC or Edwards key based on the key format\n    if (await isValidECKey(options.apiKeySecret)) {\n        return await buildECJWT(options.apiKeySecret, options.apiKeyId, claims, now, expiresIn, randomNonce);\n    }\n    else if (isValidEd25519Key(options.apiKeySecret)) {\n        return await buildEdwardsJWT(options.apiKeySecret, options.apiKeyId, claims, now, expiresIn, randomNonce);\n    }\n    else {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.UserInputValidationError(\"Invalid key format - must be either PEM EC key or base64 Ed25519 key\");\n    }\n}\n/**\n * Generates a wallet authentication JWT for the given API endpoint URL.\n * Used for authenticating with specific endpoints that require wallet authentication.\n *\n * @param options - The configuration options for generating the JWT\n * @returns The generated JWT (Bearer token) string\n * @throws {UndefinedWalletSecretError} If the Wallet Secret is not defined.\n * @throws {InvalidWalletSecretFormatError} If the private key is not in the correct format or signing fails.\n */\nasync function generateWalletJwt(options) {\n    if (!options.walletSecret) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.UndefinedWalletSecretError(\"Wallet Secret is not defined\");\n    }\n    const uri = `${options.requestMethod} ${options.requestHost}${options.requestPath}`;\n    const now = Math.floor(Date.now() / 1000);\n    const claims = {\n        uris: [uri],\n    };\n    const shouldIncludeReqHash = typeof options.requestData === \"object\" &&\n        Object.keys(options.requestData).length > 0 &&\n        Object.values(options.requestData).some(value => value !== undefined);\n    if (shouldIncludeReqHash) {\n        const sortedData = (0,_utils_sortKeys_js__WEBPACK_IMPORTED_MODULE_2__.sortKeys)(options.requestData);\n        claims.reqHash = await (0,_hash_js__WEBPACK_IMPORTED_MODULE_3__.authHash)(Buffer.from(JSON.stringify(sortedData)));\n    }\n    try {\n        // Convert base64 DER to PEM format for jose\n        const derBuffer = Buffer.from(options.walletSecret, \"base64\");\n        const pemKey = `-----BEGIN PRIVATE KEY-----\\n${derBuffer\n            .toString(\"base64\")\n            .match(/.{1,64}/g)\n            ?.join(\"\\n\")}\\n-----END PRIVATE KEY-----`;\n        const ecKey = await (0,jose__WEBPACK_IMPORTED_MODULE_4__.importPKCS8)(pemKey, \"ES256\");\n        return await new jose__WEBPACK_IMPORTED_MODULE_5__.SignJWT(claims)\n            .setProtectedHeader({ alg: \"ES256\", typ: \"JWT\" })\n            .setIssuedAt(now)\n            .setNotBefore(now)\n            .setJti(nonce())\n            .sign(ecKey);\n    }\n    catch (error) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.InvalidWalletSecretFormatError(\"Could not create the EC key: \" + error);\n    }\n}\n/**\n * Determines if a string could be a valid Ed25519 key\n *\n * @param str - The string to test\n * @returns True if the string could be a valid Ed25519 key, false otherwise\n */\nfunction isValidEd25519Key(str) {\n    try {\n        const decoded = Buffer.from(str, \"base64\");\n        return decoded.length === 64;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Determines if a string is a valid EC private key in PEM format\n *\n * @param str - The string to test\n * @returns True if the string is a valid EC private key in PEM format\n */\nasync function isValidECKey(str) {\n    try {\n        // Try to import the key with jose - if it works, it's a valid EC key\n        await (0,jose__WEBPACK_IMPORTED_MODULE_4__.importPKCS8)(str, \"ES256\");\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Builds a JWT using an EC key.\n *\n * @param privateKey - The EC private key in PEM format\n * @param keyName - The key name/ID\n * @param claims - The JWT claims\n * @param now - Current timestamp in seconds\n * @param expiresIn - Number of seconds until the token expires\n * @param nonce - Random nonce for the JWT header\n * @returns A JWT token signed with an EC key\n * @throws {Error} If key conversion, import, or signing fails\n */\nasync function buildECJWT(privateKey, keyName, claims, now, expiresIn, nonce) {\n    try {\n        // Import the key directly with jose\n        const ecKey = await (0,jose__WEBPACK_IMPORTED_MODULE_4__.importPKCS8)(privateKey, \"ES256\");\n        // Sign and return the JWT\n        return await new jose__WEBPACK_IMPORTED_MODULE_5__.SignJWT(claims)\n            .setProtectedHeader({ alg: \"ES256\", kid: keyName, typ: \"JWT\", nonce })\n            .setIssuedAt(Math.floor(now))\n            .setNotBefore(Math.floor(now))\n            .setExpirationTime(Math.floor(now + expiresIn))\n            .sign(ecKey);\n    }\n    catch (error) {\n        throw new Error(`Failed to generate EC JWT: ${error.message}`);\n    }\n}\n/**\n * Builds a JWT using an Ed25519 key.\n *\n * @param privateKey - The Ed25519 private key in base64 format\n * @param keyName - The key name/ID\n * @param claims - The JWT claims\n * @param now - Current timestamp in seconds\n * @param expiresIn - Number of seconds until the token expires\n * @param nonce - Random nonce for the JWT header\n * @returns A JWT token using an Ed25519 key\n * @throws {Error} If key parsing, import, or signing fails\n */\nasync function buildEdwardsJWT(privateKey, keyName, claims, now, expiresIn, nonce) {\n    try {\n        // Decode the base64 key (expecting 64 bytes: 32 for seed + 32 for public key)\n        const decoded = Buffer.from(privateKey, \"base64\");\n        if (decoded.length !== 64) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.UserInputValidationError(\"Invalid Ed25519 key length\");\n        }\n        const seed = decoded.subarray(0, 32);\n        const publicKey = decoded.subarray(32);\n        // Create JWK from the key components\n        const jwk = {\n            kty: \"OKP\",\n            crv: \"Ed25519\",\n            d: seed.toString(\"base64url\"),\n            x: publicKey.toString(\"base64url\"),\n        };\n        // Import the key for signing\n        const key = await (0,jose__WEBPACK_IMPORTED_MODULE_4__.importJWK)(jwk, \"EdDSA\");\n        // Sign and return the JWT\n        return await new jose__WEBPACK_IMPORTED_MODULE_5__.SignJWT(claims)\n            .setProtectedHeader({ alg: \"EdDSA\", kid: keyName, typ: \"JWT\", nonce })\n            .setIssuedAt(Math.floor(now))\n            .setNotBefore(Math.floor(now))\n            .setExpirationTime(Math.floor(now + expiresIn))\n            .sign(key);\n    }\n    catch (error) {\n        throw new Error(`Failed to generate Ed25519 JWT: ${error.message}`);\n    }\n}\n/**\n * Generates a random nonce for the JWT.\n *\n * @returns {string} The generated nonce.\n */\nfunction nonce() {\n    const bytes = new Uint8Array(16);\n    (0,uncrypto__WEBPACK_IMPORTED_MODULE_6__.getRandomValues)(bytes);\n    return Buffer.from(bytes).toString(\"hex\");\n}\n//# sourceMappingURL=jwt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hdXRoL3V0aWxzL2p3dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDdUQ7QUFDWjtBQUNOO0FBQ3NCO0FBQ1I7QUFDdUM7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHVCQUF1QixFQUFFLG9CQUFvQixFQUFFLG9CQUFvQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdFQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw0QkFBNEI7QUFDeEMsWUFBWSxnQ0FBZ0M7QUFDNUM7QUFDTztBQUNQO0FBQ0Esa0JBQWtCLGtFQUEwQjtBQUM1QztBQUNBLG1CQUFtQix1QkFBdUIsRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0I7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw0REFBUTtBQUNuQywrQkFBK0Isa0RBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQSxzQkFBc0IsS0FBSztBQUMzQix5QkFBeUI7QUFDekIsNEJBQTRCLGlEQUFXO0FBQ3ZDLHlCQUF5Qix5Q0FBTztBQUNoQyxrQ0FBa0MsMEJBQTBCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixzRUFBOEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaURBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaURBQVc7QUFDdkM7QUFDQSx5QkFBeUIseUNBQU87QUFDaEMsa0NBQWtDLCtDQUErQztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsY0FBYztBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdFQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLCtDQUFTO0FBQ25DO0FBQ0EseUJBQXlCLHlDQUFPO0FBQ2hDLGtDQUFrQywrQ0FBK0M7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGNBQWM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxJQUFJLHlEQUFlO0FBQ25CO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9hdXRoL3V0aWxzL2p3dC5qcz8xYjY1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBKV1RcbiAqL1xuaW1wb3J0IHsgU2lnbkpXVCwgaW1wb3J0UEtDUzgsIGltcG9ydEpXSyB9IGZyb20gXCJqb3NlXCI7XG5pbXBvcnQgeyBnZXRSYW5kb21WYWx1ZXMgfSBmcm9tIFwidW5jcnlwdG9cIjtcbmltcG9ydCB7IGF1dGhIYXNoIH0gZnJvbSBcIi4vaGFzaC5qc1wiO1xuaW1wb3J0IHsgVXNlcklucHV0VmFsaWRhdGlvbkVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9ycy5qc1wiO1xuaW1wb3J0IHsgc29ydEtleXMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvc29ydEtleXMuanNcIjtcbmltcG9ydCB7IEludmFsaWRXYWxsZXRTZWNyZXRGb3JtYXRFcnJvciwgVW5kZWZpbmVkV2FsbGV0U2VjcmV0RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzLmpzXCI7XG4vKipcbiAqIEdlbmVyYXRlcyBhIEpXVCAoYWxzbyBrbm93biBhcyBhIEJlYXJlciB0b2tlbikgZm9yIGF1dGhlbnRpY2F0aW5nIHdpdGggQ29pbmJhc2UncyBSRVNUIEFQSXMuXG4gKiBTdXBwb3J0cyBib3RoIEVDIChFUzI1NikgYW5kIEVkMjU1MTkgKEVkRFNBKSBrZXlzLiBBbHNvIHN1cHBvcnRzIEpXVHMgbWVhbnQgZm9yXG4gKiB3ZWJzb2NrZXQgY29ubmVjdGlvbnMgYnkgYWxsb3dpbmcgcmVxdWVzdE1ldGhvZCwgcmVxdWVzdEhvc3QsIGFuZCByZXF1ZXN0UGF0aCB0byBhbGwgYmVcbiAqIG51bGwsIGluIHdoaWNoIGNhc2UgdGhlICd1cmlzJyBjbGFpbSBpcyBvbWl0dGVkIGZyb20gdGhlIEpXVC5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGdlbmVyYXRpbmcgdGhlIEpXVFxuICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCBKV1QgKEJlYXJlciB0b2tlbikgc3RyaW5nXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgcmVxdWlyZWQgcGFyYW1ldGVycyBhcmUgbWlzc2luZywgaW52YWxpZCwgb3IgaWYgSldUIHNpZ25pbmcgZmFpbHNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlSnd0KG9wdGlvbnMpIHtcbiAgICAvLyBWYWxpZGF0ZSByZXF1aXJlZCBwYXJhbWV0ZXJzXG4gICAgaWYgKCFvcHRpb25zLmFwaUtleUlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIktleSBuYW1lIGlzIHJlcXVpcmVkXCIpO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuYXBpS2V5U2VjcmV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByaXZhdGUga2V5IGlzIHJlcXVpcmVkXCIpO1xuICAgIH1cbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgUkVTVCBBUEkgcmVxdWVzdCBvciBhIHdlYnNvY2tldCBjb25uZWN0aW9uXG4gICAgY29uc3QgaGFzQWxsUmVxdWVzdFBhcmFtcyA9IEJvb2xlYW4ob3B0aW9ucy5yZXF1ZXN0TWV0aG9kICYmIG9wdGlvbnMucmVxdWVzdEhvc3QgJiYgb3B0aW9ucy5yZXF1ZXN0UGF0aCk7XG4gICAgY29uc3QgaGFzTm9SZXF1ZXN0UGFyYW1zID0gKG9wdGlvbnMucmVxdWVzdE1ldGhvZCA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMucmVxdWVzdE1ldGhvZCA9PT0gbnVsbCkgJiZcbiAgICAgICAgKG9wdGlvbnMucmVxdWVzdEhvc3QgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLnJlcXVlc3RIb3N0ID09PSBudWxsKSAmJlxuICAgICAgICAob3B0aW9ucy5yZXF1ZXN0UGF0aCA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMucmVxdWVzdFBhdGggPT09IG51bGwpO1xuICAgIC8vIEVuc3VyZSB3ZSBlaXRoZXIgaGF2ZSBhbGwgcmVxdWVzdCBwYXJhbWV0ZXJzIG9yIG5vbmUgKGZvciB3ZWJzb2NrZXQpXG4gICAgaWYgKCFoYXNBbGxSZXF1ZXN0UGFyYW1zICYmICFoYXNOb1JlcXVlc3RQYXJhbXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWl0aGVyIGFsbCByZXF1ZXN0IGRldGFpbHMgKG1ldGhvZCwgaG9zdCwgcGF0aCkgbXVzdCBiZSBwcm92aWRlZCwgb3IgYWxsIG11c3QgYmUgbnVsbCBmb3IgSldUcyBpbnRlbmRlZCBmb3Igd2Vic29ja2V0IGNvbm5lY3Rpb25zXCIpO1xuICAgIH1cbiAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbiAgICBjb25zdCBleHBpcmVzSW4gPSBvcHRpb25zLmV4cGlyZXNJbiB8fCAxMjA7IC8vIERlZmF1bHQgdG8gMTIwIHNlY29uZHMgaWYgbm90IHNwZWNpZmllZFxuICAgIC8vIFByZXBhcmUgdGhlIEpXVCBwYXlsb2FkXG4gICAgY29uc3QgY2xhaW1zID0ge1xuICAgICAgICBzdWI6IG9wdGlvbnMuYXBpS2V5SWQsXG4gICAgICAgIGlzczogXCJjZHBcIixcbiAgICAgICAgYXVkOiBvcHRpb25zLmF1ZGllbmNlIHx8IFtcImNkcF9zZXJ2aWNlXCJdLFxuICAgIH07XG4gICAgLy8gQWRkIHRoZSB1cmlzIGNsYWltIG9ubHkgZm9yIFJFU1QgQVBJIHJlcXVlc3RzXG4gICAgaWYgKGhhc0FsbFJlcXVlc3RQYXJhbXMpIHtcbiAgICAgICAgY2xhaW1zLnVyaXMgPSBbYCR7b3B0aW9ucy5yZXF1ZXN0TWV0aG9kfSAke29wdGlvbnMucmVxdWVzdEhvc3R9JHtvcHRpb25zLnJlcXVlc3RQYXRofWBdO1xuICAgIH1cbiAgICAvLyBHZW5lcmF0ZSByYW5kb20gbm9uY2UgZm9yIHRoZSBoZWFkZXJcbiAgICBjb25zdCByYW5kb21Ob25jZSA9IG5vbmNlKCk7XG4gICAgLy8gRGV0ZXJtaW5lIGlmIHdlJ3JlIHVzaW5nIEVDIG9yIEVkd2FyZHMga2V5IGJhc2VkIG9uIHRoZSBrZXkgZm9ybWF0XG4gICAgaWYgKGF3YWl0IGlzVmFsaWRFQ0tleShvcHRpb25zLmFwaUtleVNlY3JldCkpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGJ1aWxkRUNKV1Qob3B0aW9ucy5hcGlLZXlTZWNyZXQsIG9wdGlvbnMuYXBpS2V5SWQsIGNsYWltcywgbm93LCBleHBpcmVzSW4sIHJhbmRvbU5vbmNlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNWYWxpZEVkMjU1MTlLZXkob3B0aW9ucy5hcGlLZXlTZWNyZXQpKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBidWlsZEVkd2FyZHNKV1Qob3B0aW9ucy5hcGlLZXlTZWNyZXQsIG9wdGlvbnMuYXBpS2V5SWQsIGNsYWltcywgbm93LCBleHBpcmVzSW4sIHJhbmRvbU5vbmNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBVc2VySW5wdXRWYWxpZGF0aW9uRXJyb3IoXCJJbnZhbGlkIGtleSBmb3JtYXQgLSBtdXN0IGJlIGVpdGhlciBQRU0gRUMga2V5IG9yIGJhc2U2NCBFZDI1NTE5IGtleVwiKTtcbiAgICB9XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHdhbGxldCBhdXRoZW50aWNhdGlvbiBKV1QgZm9yIHRoZSBnaXZlbiBBUEkgZW5kcG9pbnQgVVJMLlxuICogVXNlZCBmb3IgYXV0aGVudGljYXRpbmcgd2l0aCBzcGVjaWZpYyBlbmRwb2ludHMgdGhhdCByZXF1aXJlIHdhbGxldCBhdXRoZW50aWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGdlbmVyYXRpbmcgdGhlIEpXVFxuICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCBKV1QgKEJlYXJlciB0b2tlbikgc3RyaW5nXG4gKiBAdGhyb3dzIHtVbmRlZmluZWRXYWxsZXRTZWNyZXRFcnJvcn0gSWYgdGhlIFdhbGxldCBTZWNyZXQgaXMgbm90IGRlZmluZWQuXG4gKiBAdGhyb3dzIHtJbnZhbGlkV2FsbGV0U2VjcmV0Rm9ybWF0RXJyb3J9IElmIHRoZSBwcml2YXRlIGtleSBpcyBub3QgaW4gdGhlIGNvcnJlY3QgZm9ybWF0IG9yIHNpZ25pbmcgZmFpbHMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVdhbGxldEp3dChvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLndhbGxldFNlY3JldCkge1xuICAgICAgICB0aHJvdyBuZXcgVW5kZWZpbmVkV2FsbGV0U2VjcmV0RXJyb3IoXCJXYWxsZXQgU2VjcmV0IGlzIG5vdCBkZWZpbmVkXCIpO1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBgJHtvcHRpb25zLnJlcXVlc3RNZXRob2R9ICR7b3B0aW9ucy5yZXF1ZXN0SG9zdH0ke29wdGlvbnMucmVxdWVzdFBhdGh9YDtcbiAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbiAgICBjb25zdCBjbGFpbXMgPSB7XG4gICAgICAgIHVyaXM6IFt1cmldLFxuICAgIH07XG4gICAgY29uc3Qgc2hvdWxkSW5jbHVkZVJlcUhhc2ggPSB0eXBlb2Ygb3B0aW9ucy5yZXF1ZXN0RGF0YSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zLnJlcXVlc3REYXRhKS5sZW5ndGggPiAwICYmXG4gICAgICAgIE9iamVjdC52YWx1ZXMob3B0aW9ucy5yZXF1ZXN0RGF0YSkuc29tZSh2YWx1ZSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkKTtcbiAgICBpZiAoc2hvdWxkSW5jbHVkZVJlcUhhc2gpIHtcbiAgICAgICAgY29uc3Qgc29ydGVkRGF0YSA9IHNvcnRLZXlzKG9wdGlvbnMucmVxdWVzdERhdGEpO1xuICAgICAgICBjbGFpbXMucmVxSGFzaCA9IGF3YWl0IGF1dGhIYXNoKEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KHNvcnRlZERhdGEpKSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIENvbnZlcnQgYmFzZTY0IERFUiB0byBQRU0gZm9ybWF0IGZvciBqb3NlXG4gICAgICAgIGNvbnN0IGRlckJ1ZmZlciA9IEJ1ZmZlci5mcm9tKG9wdGlvbnMud2FsbGV0U2VjcmV0LCBcImJhc2U2NFwiKTtcbiAgICAgICAgY29uc3QgcGVtS2V5ID0gYC0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxcbiR7ZGVyQnVmZmVyXG4gICAgICAgICAgICAudG9TdHJpbmcoXCJiYXNlNjRcIilcbiAgICAgICAgICAgIC5tYXRjaCgvLnsxLDY0fS9nKVxuICAgICAgICAgICAgPy5qb2luKFwiXFxuXCIpfVxcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1gO1xuICAgICAgICBjb25zdCBlY0tleSA9IGF3YWl0IGltcG9ydFBLQ1M4KHBlbUtleSwgXCJFUzI1NlwiKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyBTaWduSldUKGNsYWltcylcbiAgICAgICAgICAgIC5zZXRQcm90ZWN0ZWRIZWFkZXIoeyBhbGc6IFwiRVMyNTZcIiwgdHlwOiBcIkpXVFwiIH0pXG4gICAgICAgICAgICAuc2V0SXNzdWVkQXQobm93KVxuICAgICAgICAgICAgLnNldE5vdEJlZm9yZShub3cpXG4gICAgICAgICAgICAuc2V0SnRpKG5vbmNlKCkpXG4gICAgICAgICAgICAuc2lnbihlY0tleSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFdhbGxldFNlY3JldEZvcm1hdEVycm9yKFwiQ291bGQgbm90IGNyZWF0ZSB0aGUgRUMga2V5OiBcIiArIGVycm9yKTtcbiAgICB9XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYSBzdHJpbmcgY291bGQgYmUgYSB2YWxpZCBFZDI1NTE5IGtleVxuICpcbiAqIEBwYXJhbSBzdHIgLSBUaGUgc3RyaW5nIHRvIHRlc3RcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHN0cmluZyBjb3VsZCBiZSBhIHZhbGlkIEVkMjU1MTkga2V5LCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEVkMjU1MTlLZXkoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IEJ1ZmZlci5mcm9tKHN0ciwgXCJiYXNlNjRcIik7XG4gICAgICAgIHJldHVybiBkZWNvZGVkLmxlbmd0aCA9PT0gNjQ7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHN0cmluZyBpcyBhIHZhbGlkIEVDIHByaXZhdGUga2V5IGluIFBFTSBmb3JtYXRcbiAqXG4gKiBAcGFyYW0gc3RyIC0gVGhlIHN0cmluZyB0byB0ZXN0XG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBzdHJpbmcgaXMgYSB2YWxpZCBFQyBwcml2YXRlIGtleSBpbiBQRU0gZm9ybWF0XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGlzVmFsaWRFQ0tleShzdHIpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBUcnkgdG8gaW1wb3J0IHRoZSBrZXkgd2l0aCBqb3NlIC0gaWYgaXQgd29ya3MsIGl0J3MgYSB2YWxpZCBFQyBrZXlcbiAgICAgICAgYXdhaXQgaW1wb3J0UEtDUzgoc3RyLCBcIkVTMjU2XCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBCdWlsZHMgYSBKV1QgdXNpbmcgYW4gRUMga2V5LlxuICpcbiAqIEBwYXJhbSBwcml2YXRlS2V5IC0gVGhlIEVDIHByaXZhdGUga2V5IGluIFBFTSBmb3JtYXRcbiAqIEBwYXJhbSBrZXlOYW1lIC0gVGhlIGtleSBuYW1lL0lEXG4gKiBAcGFyYW0gY2xhaW1zIC0gVGhlIEpXVCBjbGFpbXNcbiAqIEBwYXJhbSBub3cgLSBDdXJyZW50IHRpbWVzdGFtcCBpbiBzZWNvbmRzXG4gKiBAcGFyYW0gZXhwaXJlc0luIC0gTnVtYmVyIG9mIHNlY29uZHMgdW50aWwgdGhlIHRva2VuIGV4cGlyZXNcbiAqIEBwYXJhbSBub25jZSAtIFJhbmRvbSBub25jZSBmb3IgdGhlIEpXVCBoZWFkZXJcbiAqIEByZXR1cm5zIEEgSldUIHRva2VuIHNpZ25lZCB3aXRoIGFuIEVDIGtleVxuICogQHRocm93cyB7RXJyb3J9IElmIGtleSBjb252ZXJzaW9uLCBpbXBvcnQsIG9yIHNpZ25pbmcgZmFpbHNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gYnVpbGRFQ0pXVChwcml2YXRlS2V5LCBrZXlOYW1lLCBjbGFpbXMsIG5vdywgZXhwaXJlc0luLCBub25jZSkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEltcG9ydCB0aGUga2V5IGRpcmVjdGx5IHdpdGggam9zZVxuICAgICAgICBjb25zdCBlY0tleSA9IGF3YWl0IGltcG9ydFBLQ1M4KHByaXZhdGVLZXksIFwiRVMyNTZcIik7XG4gICAgICAgIC8vIFNpZ24gYW5kIHJldHVybiB0aGUgSldUXG4gICAgICAgIHJldHVybiBhd2FpdCBuZXcgU2lnbkpXVChjbGFpbXMpXG4gICAgICAgICAgICAuc2V0UHJvdGVjdGVkSGVhZGVyKHsgYWxnOiBcIkVTMjU2XCIsIGtpZDoga2V5TmFtZSwgdHlwOiBcIkpXVFwiLCBub25jZSB9KVxuICAgICAgICAgICAgLnNldElzc3VlZEF0KE1hdGguZmxvb3Iobm93KSlcbiAgICAgICAgICAgIC5zZXROb3RCZWZvcmUoTWF0aC5mbG9vcihub3cpKVxuICAgICAgICAgICAgLnNldEV4cGlyYXRpb25UaW1lKE1hdGguZmxvb3Iobm93ICsgZXhwaXJlc0luKSlcbiAgICAgICAgICAgIC5zaWduKGVjS2V5KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGdlbmVyYXRlIEVDIEpXVDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbn1cbi8qKlxuICogQnVpbGRzIGEgSldUIHVzaW5nIGFuIEVkMjU1MTkga2V5LlxuICpcbiAqIEBwYXJhbSBwcml2YXRlS2V5IC0gVGhlIEVkMjU1MTkgcHJpdmF0ZSBrZXkgaW4gYmFzZTY0IGZvcm1hdFxuICogQHBhcmFtIGtleU5hbWUgLSBUaGUga2V5IG5hbWUvSURcbiAqIEBwYXJhbSBjbGFpbXMgLSBUaGUgSldUIGNsYWltc1xuICogQHBhcmFtIG5vdyAtIEN1cnJlbnQgdGltZXN0YW1wIGluIHNlY29uZHNcbiAqIEBwYXJhbSBleHBpcmVzSW4gLSBOdW1iZXIgb2Ygc2Vjb25kcyB1bnRpbCB0aGUgdG9rZW4gZXhwaXJlc1xuICogQHBhcmFtIG5vbmNlIC0gUmFuZG9tIG5vbmNlIGZvciB0aGUgSldUIGhlYWRlclxuICogQHJldHVybnMgQSBKV1QgdG9rZW4gdXNpbmcgYW4gRWQyNTUxOSBrZXlcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBrZXkgcGFyc2luZywgaW1wb3J0LCBvciBzaWduaW5nIGZhaWxzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkRWR3YXJkc0pXVChwcml2YXRlS2V5LCBrZXlOYW1lLCBjbGFpbXMsIG5vdywgZXhwaXJlc0luLCBub25jZSkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIERlY29kZSB0aGUgYmFzZTY0IGtleSAoZXhwZWN0aW5nIDY0IGJ5dGVzOiAzMiBmb3Igc2VlZCArIDMyIGZvciBwdWJsaWMga2V5KVxuICAgICAgICBjb25zdCBkZWNvZGVkID0gQnVmZmVyLmZyb20ocHJpdmF0ZUtleSwgXCJiYXNlNjRcIik7XG4gICAgICAgIGlmIChkZWNvZGVkLmxlbmd0aCAhPT0gNjQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VySW5wdXRWYWxpZGF0aW9uRXJyb3IoXCJJbnZhbGlkIEVkMjU1MTkga2V5IGxlbmd0aFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWVkID0gZGVjb2RlZC5zdWJhcnJheSgwLCAzMik7XG4gICAgICAgIGNvbnN0IHB1YmxpY0tleSA9IGRlY29kZWQuc3ViYXJyYXkoMzIpO1xuICAgICAgICAvLyBDcmVhdGUgSldLIGZyb20gdGhlIGtleSBjb21wb25lbnRzXG4gICAgICAgIGNvbnN0IGp3ayA9IHtcbiAgICAgICAgICAgIGt0eTogXCJPS1BcIixcbiAgICAgICAgICAgIGNydjogXCJFZDI1NTE5XCIsXG4gICAgICAgICAgICBkOiBzZWVkLnRvU3RyaW5nKFwiYmFzZTY0dXJsXCIpLFxuICAgICAgICAgICAgeDogcHVibGljS2V5LnRvU3RyaW5nKFwiYmFzZTY0dXJsXCIpLFxuICAgICAgICB9O1xuICAgICAgICAvLyBJbXBvcnQgdGhlIGtleSBmb3Igc2lnbmluZ1xuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBpbXBvcnRKV0soandrLCBcIkVkRFNBXCIpO1xuICAgICAgICAvLyBTaWduIGFuZCByZXR1cm4gdGhlIEpXVFxuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFNpZ25KV1QoY2xhaW1zKVxuICAgICAgICAgICAgLnNldFByb3RlY3RlZEhlYWRlcih7IGFsZzogXCJFZERTQVwiLCBraWQ6IGtleU5hbWUsIHR5cDogXCJKV1RcIiwgbm9uY2UgfSlcbiAgICAgICAgICAgIC5zZXRJc3N1ZWRBdChNYXRoLmZsb29yKG5vdykpXG4gICAgICAgICAgICAuc2V0Tm90QmVmb3JlKE1hdGguZmxvb3Iobm93KSlcbiAgICAgICAgICAgIC5zZXRFeHBpcmF0aW9uVGltZShNYXRoLmZsb29yKG5vdyArIGV4cGlyZXNJbikpXG4gICAgICAgICAgICAuc2lnbihrZXkpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZ2VuZXJhdGUgRWQyNTUxOSBKV1Q6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSBub25jZSBmb3IgdGhlIEpXVC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZ2VuZXJhdGVkIG5vbmNlLlxuICovXG5mdW5jdGlvbiBub25jZSgpIHtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICBnZXRSYW5kb21WYWx1ZXMoYnl0ZXMpO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlcykudG9TdHJpbmcoXCJoZXhcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qd3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/utils/jwt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/cdp.js":
/*!***********************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/client/cdp.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CdpClient: () => (/* binding */ CdpClient)\n/* harmony export */ });\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../analytics.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\");\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/index.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../version.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/version.js\");\n/* harmony import */ var _end_user_endUser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./end-user/endUser.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/end-user/endUser.js\");\n/* harmony import */ var _evm_evm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./evm/evm.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/evm/evm.js\");\n/* harmony import */ var _policies_policies_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./policies/policies.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/policies/policies.js\");\n/* harmony import */ var _solana_solana_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./solana/solana.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/solana/solana.js\");\n\n\n\n\n\n\n\n/**\n * The main client for interacting with the CDP API.\n */\nclass CdpClient {\n    /** Namespace containing all EVM methods. */\n    evm;\n    /** Namespace containing all Solana methods. */\n    solana;\n    /** Namespace containing all Policies methods. */\n    policies;\n    /** Namespace containing all end user methods. */\n    endUser;\n    /**\n     * The CdpClient is the main class for interacting with the CDP API.\n     *\n     * There are a few required parameters that are configured in the [CDP Portal](https://portal.cdp.coinbase.com/projects/api-keys):\n     * - **CDP Secret API Key** (`apiKeyId` & `apiKeySecret`): These are used to authenticate requests to the entire suite of\n     *   APIs offered on Coinbase Developer Platform.\n     *   [Read more about CDP API keys](https://docs.cdp.coinbase.com/get-started/docs/cdp-api-keys).\n     * - **Wallet Secret** (`walletSecret`): This secret is used specifically to authenticate requests to `POST`, and `DELETE`\n     *   endpoints in the EVM and Solana Account APIs.\n     *\n     * These parameters can be set as environment variables:\n     * ```\n     * CDP_API_KEY_ID=your-api-key-id\n     * CDP_API_KEY_SECRET=your-api-key-secret\n     * CDP_WALLET_SECRET=your-wallet-secret\n     * ```\n     *\n     * Or passed as options to the constructor:\n     *\n     * ```typescript\n     * const cdp = new CdpClient({\n     *   apiKeyId: \"your-api-key-id\",\n     *   apiKeySecret: \"your-api-key-secret\",\n     *   walletSecret: \"your-wallet-secret\",\n     * });\n     * ```\n     *\n     * The CdpClient is namespaced by chain type: `evm` or `solana`.\n     *\n     * As an example, to create a new EVM account, use `cdp.evm.createAccount()`.\n     *\n     * To create a new Solana account, use `cdp.solana.createAccount()`.\n     *\n     * @param {CdpClientOptions} [options] - Configuration options for the CdpClient.\n     */\n    constructor(options = {}) {\n        if (Number(process.versions.node.split(\".\")[0]) < 19) {\n            throw new Error(`\nNode.js version ${process.versions.node} is not supported. CDP SDK requires Node.js version 19 or higher. Please upgrade your Node.js version to use the CDP SDK.\nWe recommend using https://github.com/Schniz/fnm for managing your Node.js version.\n        `);\n        }\n        const apiKeyId = options.apiKeyId ?? process.env.CDP_API_KEY_ID ?? process.env.CDP_API_KEY_NAME;\n        const apiKeySecret = options.apiKeySecret ?? process.env.CDP_API_KEY_SECRET;\n        const walletSecret = options.walletSecret ?? process.env.CDP_WALLET_SECRET;\n        if (!apiKeyId || !apiKeySecret) {\n            throw new Error(`\n\\nMissing required CDP Secret API Key configuration parameters.\n\nYou can set them as environment variables:\n\nCDP_API_KEY_ID=your-api-key-id\nCDP_API_KEY_SECRET=your-api-key-secret\n\nYou can also pass them as options to the constructor:\n\nconst cdp = new CdpClient({\n  apiKeyId: \"your-api-key-id\",\n  apiKeySecret: \"your-api-key-secret\",\n});\n\nIf you're performing write operations, make sure to also set your wallet secret:\n\nCDP_WALLET_SECRET=your-wallet-secret\n\nThis is also available as an option to the constructor:\n\nconst cdp = new CdpClient({\n  apiKeyId: \"your-api-key-id\",\n  apiKeySecret: \"your-api-key-secret\",\n  walletSecret: \"your-wallet-secret\",\n});\n\nFor more information, see: https://github.com/coinbase/cdp-sdk/blob/main/typescript/README.md#api-keys.\n`);\n        }\n        _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_0__.CdpOpenApiClient.configure({\n            ...options,\n            apiKeyId,\n            apiKeySecret,\n            walletSecret,\n            source: \"sdk\",\n            sourceVersion: _version_js__WEBPACK_IMPORTED_MODULE_1__.version,\n        });\n        if (process.env.DISABLE_CDP_ERROR_REPORTING !== \"true\" ||\n            process.env.DISABLE_CDP_USAGE_TRACKING !== \"true\") {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.identifier = apiKeyId;\n        }\n        if (process.env.DISABLE_CDP_ERROR_REPORTING !== \"true\") {\n            _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.wrapClassWithErrorTracking(CdpClient);\n            _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.wrapClassWithErrorTracking(_evm_evm_js__WEBPACK_IMPORTED_MODULE_3__.EvmClient);\n            _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.wrapClassWithErrorTracking(_solana_solana_js__WEBPACK_IMPORTED_MODULE_4__.SolanaClient);\n            _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.wrapClassWithErrorTracking(_policies_policies_js__WEBPACK_IMPORTED_MODULE_5__.PoliciesClient);\n        }\n        this.evm = new _evm_evm_js__WEBPACK_IMPORTED_MODULE_3__.EvmClient();\n        this.solana = new _solana_solana_js__WEBPACK_IMPORTED_MODULE_4__.SolanaClient();\n        this.policies = new _policies_policies_js__WEBPACK_IMPORTED_MODULE_5__.PoliciesClient();\n        this.endUser = new _end_user_endUser_js__WEBPACK_IMPORTED_MODULE_6__.CDPEndUserClient();\n    }\n}\n//# sourceMappingURL=cdp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9jbGllbnQvY2RwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTRDO0FBQ2tCO0FBQ3RCO0FBQ2lCO0FBQ2hCO0FBQ2U7QUFDTjtBQUNsRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSxrQkFBa0IsdUJBQXVCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0VBQWdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsZ0RBQU87QUFDbEMsU0FBUztBQUNUO0FBQ0E7QUFDQSxZQUFZLG9EQUFTO0FBQ3JCO0FBQ0E7QUFDQSxZQUFZLG9EQUFTO0FBQ3JCLFlBQVksb0RBQVMsNEJBQTRCLGtEQUFTO0FBQzFELFlBQVksb0RBQVMsNEJBQTRCLDJEQUFZO0FBQzdELFlBQVksb0RBQVMsNEJBQTRCLGlFQUFjO0FBQy9EO0FBQ0EsdUJBQXVCLGtEQUFTO0FBQ2hDLDBCQUEwQiwyREFBWTtBQUN0Qyw0QkFBNEIsaUVBQWM7QUFDMUMsMkJBQTJCLGtFQUFnQjtBQUMzQztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vY2xpZW50L2NkcC5qcz9lODY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFuYWx5dGljcyB9IGZyb20gXCIuLi9hbmFseXRpY3MuanNcIjtcbmltcG9ydCB7IENkcE9wZW5BcGlDbGllbnQgfSBmcm9tIFwiLi4vb3BlbmFwaS1jbGllbnQvaW5kZXguanNcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vdmVyc2lvbi5qc1wiO1xuaW1wb3J0IHsgQ0RQRW5kVXNlckNsaWVudCB9IGZyb20gXCIuL2VuZC11c2VyL2VuZFVzZXIuanNcIjtcbmltcG9ydCB7IEV2bUNsaWVudCB9IGZyb20gXCIuL2V2bS9ldm0uanNcIjtcbmltcG9ydCB7IFBvbGljaWVzQ2xpZW50IH0gZnJvbSBcIi4vcG9saWNpZXMvcG9saWNpZXMuanNcIjtcbmltcG9ydCB7IFNvbGFuYUNsaWVudCB9IGZyb20gXCIuL3NvbGFuYS9zb2xhbmEuanNcIjtcbi8qKlxuICogVGhlIG1haW4gY2xpZW50IGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBDRFAgQVBJLlxuICovXG5leHBvcnQgY2xhc3MgQ2RwQ2xpZW50IHtcbiAgICAvKiogTmFtZXNwYWNlIGNvbnRhaW5pbmcgYWxsIEVWTSBtZXRob2RzLiAqL1xuICAgIGV2bTtcbiAgICAvKiogTmFtZXNwYWNlIGNvbnRhaW5pbmcgYWxsIFNvbGFuYSBtZXRob2RzLiAqL1xuICAgIHNvbGFuYTtcbiAgICAvKiogTmFtZXNwYWNlIGNvbnRhaW5pbmcgYWxsIFBvbGljaWVzIG1ldGhvZHMuICovXG4gICAgcG9saWNpZXM7XG4gICAgLyoqIE5hbWVzcGFjZSBjb250YWluaW5nIGFsbCBlbmQgdXNlciBtZXRob2RzLiAqL1xuICAgIGVuZFVzZXI7XG4gICAgLyoqXG4gICAgICogVGhlIENkcENsaWVudCBpcyB0aGUgbWFpbiBjbGFzcyBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgQ0RQIEFQSS5cbiAgICAgKlxuICAgICAqIFRoZXJlIGFyZSBhIGZldyByZXF1aXJlZCBwYXJhbWV0ZXJzIHRoYXQgYXJlIGNvbmZpZ3VyZWQgaW4gdGhlIFtDRFAgUG9ydGFsXShodHRwczovL3BvcnRhbC5jZHAuY29pbmJhc2UuY29tL3Byb2plY3RzL2FwaS1rZXlzKTpcbiAgICAgKiAtICoqQ0RQIFNlY3JldCBBUEkgS2V5KiogKGBhcGlLZXlJZGAgJiBgYXBpS2V5U2VjcmV0YCk6IFRoZXNlIGFyZSB1c2VkIHRvIGF1dGhlbnRpY2F0ZSByZXF1ZXN0cyB0byB0aGUgZW50aXJlIHN1aXRlIG9mXG4gICAgICogICBBUElzIG9mZmVyZWQgb24gQ29pbmJhc2UgRGV2ZWxvcGVyIFBsYXRmb3JtLlxuICAgICAqICAgW1JlYWQgbW9yZSBhYm91dCBDRFAgQVBJIGtleXNdKGh0dHBzOi8vZG9jcy5jZHAuY29pbmJhc2UuY29tL2dldC1zdGFydGVkL2RvY3MvY2RwLWFwaS1rZXlzKS5cbiAgICAgKiAtICoqV2FsbGV0IFNlY3JldCoqIChgd2FsbGV0U2VjcmV0YCk6IFRoaXMgc2VjcmV0IGlzIHVzZWQgc3BlY2lmaWNhbGx5IHRvIGF1dGhlbnRpY2F0ZSByZXF1ZXN0cyB0byBgUE9TVGAsIGFuZCBgREVMRVRFYFxuICAgICAqICAgZW5kcG9pbnRzIGluIHRoZSBFVk0gYW5kIFNvbGFuYSBBY2NvdW50IEFQSXMuXG4gICAgICpcbiAgICAgKiBUaGVzZSBwYXJhbWV0ZXJzIGNhbiBiZSBzZXQgYXMgZW52aXJvbm1lbnQgdmFyaWFibGVzOlxuICAgICAqIGBgYFxuICAgICAqIENEUF9BUElfS0VZX0lEPXlvdXItYXBpLWtleS1pZFxuICAgICAqIENEUF9BUElfS0VZX1NFQ1JFVD15b3VyLWFwaS1rZXktc2VjcmV0XG4gICAgICogQ0RQX1dBTExFVF9TRUNSRVQ9eW91ci13YWxsZXQtc2VjcmV0XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBPciBwYXNzZWQgYXMgb3B0aW9ucyB0byB0aGUgY29uc3RydWN0b3I6XG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgY2RwID0gbmV3IENkcENsaWVudCh7XG4gICAgICogICBhcGlLZXlJZDogXCJ5b3VyLWFwaS1rZXktaWRcIixcbiAgICAgKiAgIGFwaUtleVNlY3JldDogXCJ5b3VyLWFwaS1rZXktc2VjcmV0XCIsXG4gICAgICogICB3YWxsZXRTZWNyZXQ6IFwieW91ci13YWxsZXQtc2VjcmV0XCIsXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGUgQ2RwQ2xpZW50IGlzIG5hbWVzcGFjZWQgYnkgY2hhaW4gdHlwZTogYGV2bWAgb3IgYHNvbGFuYWAuXG4gICAgICpcbiAgICAgKiBBcyBhbiBleGFtcGxlLCB0byBjcmVhdGUgYSBuZXcgRVZNIGFjY291bnQsIHVzZSBgY2RwLmV2bS5jcmVhdGVBY2NvdW50KClgLlxuICAgICAqXG4gICAgICogVG8gY3JlYXRlIGEgbmV3IFNvbGFuYSBhY2NvdW50LCB1c2UgYGNkcC5zb2xhbmEuY3JlYXRlQWNjb3VudCgpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Q2RwQ2xpZW50T3B0aW9uc30gW29wdGlvbnNdIC0gQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgQ2RwQ2xpZW50LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAoTnVtYmVyKHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdChcIi5cIilbMF0pIDwgMTkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXG5Ob2RlLmpzIHZlcnNpb24gJHtwcm9jZXNzLnZlcnNpb25zLm5vZGV9IGlzIG5vdCBzdXBwb3J0ZWQuIENEUCBTREsgcmVxdWlyZXMgTm9kZS5qcyB2ZXJzaW9uIDE5IG9yIGhpZ2hlci4gUGxlYXNlIHVwZ3JhZGUgeW91ciBOb2RlLmpzIHZlcnNpb24gdG8gdXNlIHRoZSBDRFAgU0RLLlxuV2UgcmVjb21tZW5kIHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9TY2huaXovZm5tIGZvciBtYW5hZ2luZyB5b3VyIE5vZGUuanMgdmVyc2lvbi5cbiAgICAgICAgYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXBpS2V5SWQgPSBvcHRpb25zLmFwaUtleUlkID8/IHByb2Nlc3MuZW52LkNEUF9BUElfS0VZX0lEID8/IHByb2Nlc3MuZW52LkNEUF9BUElfS0VZX05BTUU7XG4gICAgICAgIGNvbnN0IGFwaUtleVNlY3JldCA9IG9wdGlvbnMuYXBpS2V5U2VjcmV0ID8/IHByb2Nlc3MuZW52LkNEUF9BUElfS0VZX1NFQ1JFVDtcbiAgICAgICAgY29uc3Qgd2FsbGV0U2VjcmV0ID0gb3B0aW9ucy53YWxsZXRTZWNyZXQgPz8gcHJvY2Vzcy5lbnYuQ0RQX1dBTExFVF9TRUNSRVQ7XG4gICAgICAgIGlmICghYXBpS2V5SWQgfHwgIWFwaUtleVNlY3JldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcblxcbk1pc3NpbmcgcmVxdWlyZWQgQ0RQIFNlY3JldCBBUEkgS2V5IGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycy5cblxuWW91IGNhbiBzZXQgdGhlbSBhcyBlbnZpcm9ubWVudCB2YXJpYWJsZXM6XG5cbkNEUF9BUElfS0VZX0lEPXlvdXItYXBpLWtleS1pZFxuQ0RQX0FQSV9LRVlfU0VDUkVUPXlvdXItYXBpLWtleS1zZWNyZXRcblxuWW91IGNhbiBhbHNvIHBhc3MgdGhlbSBhcyBvcHRpb25zIHRvIHRoZSBjb25zdHJ1Y3RvcjpcblxuY29uc3QgY2RwID0gbmV3IENkcENsaWVudCh7XG4gIGFwaUtleUlkOiBcInlvdXItYXBpLWtleS1pZFwiLFxuICBhcGlLZXlTZWNyZXQ6IFwieW91ci1hcGkta2V5LXNlY3JldFwiLFxufSk7XG5cbklmIHlvdSdyZSBwZXJmb3JtaW5nIHdyaXRlIG9wZXJhdGlvbnMsIG1ha2Ugc3VyZSB0byBhbHNvIHNldCB5b3VyIHdhbGxldCBzZWNyZXQ6XG5cbkNEUF9XQUxMRVRfU0VDUkVUPXlvdXItd2FsbGV0LXNlY3JldFxuXG5UaGlzIGlzIGFsc28gYXZhaWxhYmxlIGFzIGFuIG9wdGlvbiB0byB0aGUgY29uc3RydWN0b3I6XG5cbmNvbnN0IGNkcCA9IG5ldyBDZHBDbGllbnQoe1xuICBhcGlLZXlJZDogXCJ5b3VyLWFwaS1rZXktaWRcIixcbiAgYXBpS2V5U2VjcmV0OiBcInlvdXItYXBpLWtleS1zZWNyZXRcIixcbiAgd2FsbGV0U2VjcmV0OiBcInlvdXItd2FsbGV0LXNlY3JldFwiLFxufSk7XG5cbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9jb2luYmFzZS9jZHAtc2RrL2Jsb2IvbWFpbi90eXBlc2NyaXB0L1JFQURNRS5tZCNhcGkta2V5cy5cbmApO1xuICAgICAgICB9XG4gICAgICAgIENkcE9wZW5BcGlDbGllbnQuY29uZmlndXJlKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBhcGlLZXlJZCxcbiAgICAgICAgICAgIGFwaUtleVNlY3JldCxcbiAgICAgICAgICAgIHdhbGxldFNlY3JldCxcbiAgICAgICAgICAgIHNvdXJjZTogXCJzZGtcIixcbiAgICAgICAgICAgIHNvdXJjZVZlcnNpb246IHZlcnNpb24sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuRElTQUJMRV9DRFBfRVJST1JfUkVQT1JUSU5HICE9PSBcInRydWVcIiB8fFxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuRElTQUJMRV9DRFBfVVNBR0VfVFJBQ0tJTkcgIT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICBBbmFseXRpY3MuaWRlbnRpZmllciA9IGFwaUtleUlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5ESVNBQkxFX0NEUF9FUlJPUl9SRVBPUlRJTkcgIT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICBBbmFseXRpY3Mud3JhcENsYXNzV2l0aEVycm9yVHJhY2tpbmcoQ2RwQ2xpZW50KTtcbiAgICAgICAgICAgIEFuYWx5dGljcy53cmFwQ2xhc3NXaXRoRXJyb3JUcmFja2luZyhFdm1DbGllbnQpO1xuICAgICAgICAgICAgQW5hbHl0aWNzLndyYXBDbGFzc1dpdGhFcnJvclRyYWNraW5nKFNvbGFuYUNsaWVudCk7XG4gICAgICAgICAgICBBbmFseXRpY3Mud3JhcENsYXNzV2l0aEVycm9yVHJhY2tpbmcoUG9saWNpZXNDbGllbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXZtID0gbmV3IEV2bUNsaWVudCgpO1xuICAgICAgICB0aGlzLnNvbGFuYSA9IG5ldyBTb2xhbmFDbGllbnQoKTtcbiAgICAgICAgdGhpcy5wb2xpY2llcyA9IG5ldyBQb2xpY2llc0NsaWVudCgpO1xuICAgICAgICB0aGlzLmVuZFVzZXIgPSBuZXcgQ0RQRW5kVXNlckNsaWVudCgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNkcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/cdp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/end-user/endUser.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/client/end-user/endUser.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CDPEndUserClient: () => (/* binding */ CDPEndUserClient)\n/* harmony export */ });\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../analytics.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\");\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/index.js\");\n\n\n/**\n * The CDP end user client.\n */\nclass CDPEndUserClient {\n    /**\n     * Validates an end user's access token. Throws an error if the access token is invalid.\n     *\n     * @param options - The options for validating an access token.\n     *\n     * @returns The end user object if the access token is valid.\n     */\n    async validateAccessToken(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n            action: \"validate_access_token\",\n        });\n        const { accessToken } = options;\n        return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_1__.CdpOpenApiClient.validateEndUserAccessToken({\n            accessToken,\n        });\n    }\n}\n//# sourceMappingURL=endUser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9jbGllbnQvZW5kLXVzZXIvZW5kVXNlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0M7QUFDa0I7QUFDakU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxvREFBUztBQUNqQjtBQUNBLFNBQVM7QUFDVCxnQkFBZ0IsY0FBYztBQUM5QixlQUFlLHNFQUFnQjtBQUMvQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vY2xpZW50L2VuZC11c2VyL2VuZFVzZXIuanM/ZTc0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmFseXRpY3MgfSBmcm9tIFwiLi4vLi4vYW5hbHl0aWNzLmpzXCI7XG5pbXBvcnQgeyBDZHBPcGVuQXBpQ2xpZW50IH0gZnJvbSBcIi4uLy4uL29wZW5hcGktY2xpZW50L2luZGV4LmpzXCI7XG4vKipcbiAqIFRoZSBDRFAgZW5kIHVzZXIgY2xpZW50LlxuICovXG5leHBvcnQgY2xhc3MgQ0RQRW5kVXNlckNsaWVudCB7XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIGFuIGVuZCB1c2VyJ3MgYWNjZXNzIHRva2VuLiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGFjY2VzcyB0b2tlbiBpcyBpbnZhbGlkLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdmFsaWRhdGluZyBhbiBhY2Nlc3MgdG9rZW4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgZW5kIHVzZXIgb2JqZWN0IGlmIHRoZSBhY2Nlc3MgdG9rZW4gaXMgdmFsaWQuXG4gICAgICovXG4gICAgYXN5bmMgdmFsaWRhdGVBY2Nlc3NUb2tlbihvcHRpb25zKSB7XG4gICAgICAgIEFuYWx5dGljcy50cmFja0FjdGlvbih7XG4gICAgICAgICAgICBhY3Rpb246IFwidmFsaWRhdGVfYWNjZXNzX3Rva2VuXCIsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IGFjY2Vzc1Rva2VuIH0gPSBvcHRpb25zO1xuICAgICAgICByZXR1cm4gQ2RwT3BlbkFwaUNsaWVudC52YWxpZGF0ZUVuZFVzZXJBY2Nlc3NUb2tlbih7XG4gICAgICAgICAgICBhY2Nlc3NUb2tlbixcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5kVXNlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/end-user/endUser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/evm/evm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/client/evm/evm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EvmClient: () => (/* binding */ EvmClient)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/typedData.js\");\n/* harmony import */ var _accounts_evm_toEvmServerAccount_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../accounts/evm/toEvmServerAccount.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toEvmServerAccount.js\");\n/* harmony import */ var _accounts_evm_toEvmSmartAccount_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../accounts/evm/toEvmSmartAccount.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/evm/toEvmSmartAccount.js\");\n/* harmony import */ var _actions_evm_getUserOperation_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../actions/evm/getUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/getUserOperation.js\");\n/* harmony import */ var _actions_evm_listSpendPermissions_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../actions/evm/listSpendPermissions.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listSpendPermissions.js\");\n/* harmony import */ var _actions_evm_listTokenBalances_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../actions/evm/listTokenBalances.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/listTokenBalances.js\");\n/* harmony import */ var _actions_evm_requestFaucet_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../actions/evm/requestFaucet.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/requestFaucet.js\");\n/* harmony import */ var _actions_evm_sendTransaction_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../actions/evm/sendTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendTransaction.js\");\n/* harmony import */ var _actions_evm_sendUserOperation_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../actions/evm/sendUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/sendUserOperation.js\");\n/* harmony import */ var _actions_evm_spend_permissions_resolveSpendPermission_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../actions/evm/spend-permissions/resolveSpendPermission.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/spend-permissions/resolveSpendPermission.js\");\n/* harmony import */ var _actions_evm_swap_createSwapQuote_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../actions/evm/swap/createSwapQuote.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/createSwapQuote.js\");\n/* harmony import */ var _actions_evm_swap_getSwapPrice_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../actions/evm/swap/getSwapPrice.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/swap/getSwapPrice.js\");\n/* harmony import */ var _actions_evm_waitForUserOperation_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../actions/evm/waitForUserOperation.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/waitForUserOperation.js\");\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../analytics.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../constants.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/constants.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n/* harmony import */ var _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../openapi-client/errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/errors.js\");\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/index.js\");\n/* harmony import */ var _spend_permissions_constants_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../spend-permissions/constants.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/spend-permissions/constants.js\");\n/* harmony import */ var _utils_export_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/export.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/export.js\");\n/**\n * @module Client\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The namespace containing all EVM methods.\n */\nclass EvmClient {\n    /**\n     * Creates a new CDP EVM account.\n     *\n     * @param {CreateServerAccountOptions} [options] - Optional parameters for creating the account.\n     * @param {string} [options.name] - A name for the account to create.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the newly created account.\n     *\n     * @example **Without arguments**\n     *          ```ts\n     *          const account = await cdp.evm.createAccount();\n     *          ```\n     *\n     * @example **With a name**\n     *          ```ts\n     *          const account = await cdp.evm.createAccount({ name: \"MyAccount\" });\n     *          ```\n     *\n     * @example **With an idempotency key**\n     *          ```ts\n     *          const idempotencyKey = uuidv4();\n     *\n     *          // First call\n     *          await cdp.evm.createAccount({\n     *            idempotencyKey,\n     *          });\n     *\n     *          // Second call with the same idempotency key will return the same account\n     *          await cdp.evm.createAccount({\n     *            idempotencyKey,\n     *          });\n     *          ```\n     */\n    async createAccount(options = {}) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"create_account\",\n            accountType: \"evm_server\",\n        });\n        return this._createAccountInternal(options);\n    }\n    /**\n     * Imports a CDP EVM account from an external source.\n     *\n     * @param {ImportServerAccountOptions} options - Parameters for importing the account.\n     * @param {string} options.privateKey - The private key of the account to import.\n     * @param {string} [options.name] - A name for the account to import.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the imported account.\n     *\n     * @example **Without arguments**\n     *          ```ts\n     *          const account = await cdp.evm.importAccount({\n     *            privateKey: \"0x123456\"\n     *          });\n     *          ```\n     *\n     * @example **With a name**\n     *          ```ts\n     *          const account = await cdp.evm.importAccount({\n     *            privateKey: \"0x123456\",\n     *            name: \"MyAccount\"\n     *          });\n     *          ```\n     *\n     * @example **With an idempotency key**\n     *          ```ts\n     *          const idempotencyKey = uuidv4();\n     *\n     *          // First call\n     *          await cdp.evm.importAccount({\n     *            privateKey: \"0x123456\",\n     *            idempotencyKey,\n     *          });\n     *\n     *          // Second call with the same idempotency key will return the same account\n     *          await cdp.evm.importAccount({\n     *            privateKey: \"0x123456\"\n     *            idempotencyKey,\n     *          });\n     *          ```\n     */\n    async importAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"import_account\",\n            accountType: \"evm_server\",\n        });\n        const encryptionPublicKey = options.encryptionPublicKey || _constants_js__WEBPACK_IMPORTED_MODULE_2__.ImportAccountPublicRSAKey;\n        const privateKeyHex = options.privateKey.startsWith(\"0x\")\n            ? options.privateKey.slice(2)\n            : options.privateKey;\n        if (!/^[0-9a-fA-F]+$/.test(privateKeyHex)) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.UserInputValidationError(\"Private key must be a valid hexadecimal string\");\n        }\n        try {\n            const privateKeyBytes = Buffer.from(privateKeyHex, \"hex\");\n            const encryptedPrivateKey = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.publicEncrypt)({\n                key: encryptionPublicKey,\n                padding: crypto__WEBPACK_IMPORTED_MODULE_0__.constants.RSA_PKCS1_OAEP_PADDING,\n                oaepHash: \"sha256\",\n            }, privateKeyBytes);\n            const openApiAccount = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.importEvmAccount({\n                name: options.name,\n                encryptedPrivateKey: encryptedPrivateKey.toString(\"base64\"),\n            }, options.idempotencyKey);\n            const account = (0,_accounts_evm_toEvmServerAccount_js__WEBPACK_IMPORTED_MODULE_5__.toEvmServerAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n                account: openApiAccount,\n            });\n            _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.wrapObjectMethodsWithErrorTracking(account);\n            return account;\n        }\n        catch (error) {\n            if (error instanceof _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_6__.APIError) {\n                throw error;\n            }\n            throw new Error(`Failed to import account: ${String(error)}`);\n        }\n    }\n    /**\n     * Exports a CDP EVM account's private key.\n     * It is important to store the private key in a secure place after it's exported.\n     *\n     * @param {ExportServerAccountOptions} options - Parameters for exporting the account.\n     * @param {string} [options.address] - The address of the account to export.\n     * @param {string} [options.name] - The name of the account to export.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the exported account’s 32-byte private key as a hex string, without the \"0x\" prefix.\n     *\n     * @example **With an address**\n     * ```ts\n     * const privateKey = await cdp.evm.exportAccount({\n     *   address: \"0x1234567890123456789012345678901234567890\",\n     * });\n     * ```\n     *\n     * @example **With a name**\n     * ```ts\n     * const privateKey = await cdp.evm.exportAccount({\n     *   name: \"MyAccount\",\n     * });\n     * ```\n     */\n    async exportAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"export_account\",\n            accountType: \"evm_server\",\n        });\n        const { publicKey, privateKey } = await (0,_utils_export_js__WEBPACK_IMPORTED_MODULE_7__.generateExportEncryptionKeyPair)();\n        const { encryptedPrivateKey } = await (async () => {\n            if (options.address) {\n                return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.exportEvmAccount(options.address, {\n                    exportEncryptionKey: publicKey,\n                }, options.idempotencyKey);\n            }\n            if (options.name) {\n                return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.exportEvmAccountByName(options.name, {\n                    exportEncryptionKey: publicKey,\n                }, options.idempotencyKey);\n            }\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.UserInputValidationError(\"Either address or name must be provided\");\n        })();\n        return (0,_utils_export_js__WEBPACK_IMPORTED_MODULE_7__.decryptWithPrivateKey)(privateKey, encryptedPrivateKey);\n    }\n    /**\n     * Creates a new CDP EVM smart account.\n     *\n     * @param {CreateSmartAccountOptions} options - Parameters for creating the smart account.\n     * @param {Account} options.owner - The owner of the smart account.\n     * The owner can be any Ethereum account with signing capabilities,\n     * such as a CDP EVM account or a Viem LocalAccount.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the newly created smart account.\n     *\n     * @example **With a CDP EVM Account as the owner**\n     *          ```ts\n     *          const account = await cdp.evm.createAccount();\n     *          const smartAccount = await cdp.evm.createSmartAccount({\n     *            owner: account,\n     *          });\n     *          ```\n     *\n     * @example **With a Viem LocalAccount as the owner**\n     *          ```ts\n     *          // See https://viem.sh/docs/accounts/local/privateKeyToAccount\n     *          const privateKey = generatePrivateKey();\n     *          const account = privateKeyToAccount(privateKey);\n     *          const smartAccount = await client.evm.createSmartAccount({\n     *            owner: account,\n     *          });\n     *          ```\n     *\n     * @example **With an idempotency key**\n     *          ```ts\n     *          const idempotencyKey = uuidv4();\n     *\n     *          // First call\n     *          await cdp.evm.createSmartAccount({\n     *            owner: account,\n     *            idempotencyKey,\n     *          });\n     *\n     *          // Second call with the same idempotency key will return the same smart account\n     *          await cdp.evm.createSmartAccount({\n     *            owner: account,\n     *            idempotencyKey,\n     *          ```\n     */\n    async createSmartAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"create_smart_account\",\n            accountType: \"evm_smart\",\n        });\n        return this._createSmartAccountInternal(options);\n    }\n    /**\n     * Creates a spend permission for a smart account.\n     *\n     * @param {CreateSpendPermissionOptions} options - Parameters for creating the spend permission.\n     * @param {SpendPermission} options.spendPermission - The spend permission to create.\n     * @param {string} [options.idempotencyKey] - The idempotency key to use for the spend permission.\n     *\n     * @returns A promise that resolves to the spend permission.\n     *\n     * @example\n     * ```ts\n     * const userOperation = await cdp.evm.createSpendPermission({\n     *   spendPermission,\n     *   network: \"base-sepolia\",\n     * });\n     * ```\n     */\n    async createSpendPermission(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"create_spend_permission\",\n        });\n        const resolvedSpendPermission = (0,_actions_evm_spend_permissions_resolveSpendPermission_js__WEBPACK_IMPORTED_MODULE_8__.resolveSpendPermission)(options.spendPermission, options.network);\n        const userOperation = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.createSpendPermission(resolvedSpendPermission.account, {\n            spender: resolvedSpendPermission.spender,\n            token: resolvedSpendPermission.token,\n            allowance: resolvedSpendPermission.allowance.toString(),\n            period: resolvedSpendPermission.period.toString(),\n            start: resolvedSpendPermission.start.toString(),\n            end: resolvedSpendPermission.end.toString(),\n            salt: resolvedSpendPermission.salt.toString(),\n            extraData: resolvedSpendPermission.extraData,\n            network: options.network,\n            paymasterUrl: options.paymasterUrl,\n        }, options.idempotencyKey);\n        return {\n            network: userOperation.network,\n            userOpHash: userOperation.userOpHash,\n            status: userOperation.status,\n            calls: userOperation.calls.map(call => ({\n                to: call.to,\n                value: BigInt(call.value),\n                data: call.data,\n            })),\n        };\n    }\n    /**\n     * Revokes a spend permission for a smart account.\n     *\n     * @param {RevokeSpendPermissionOptions} options - Parameters for revoking the spend permission.\n     * @param {string} options.address - The address of the smart account.\n     * @param {string} options.permissionHash - The hash of the spend permission to revoke.\n     * @param {string} options.network - The network of the spend permission.\n     * @param {string} [options.paymasterUrl] - The paymaster URL of the spend permission.\n     *\n     * @returns A promise that resolves to the user operation.\n     *\n     * @example\n     * ```ts\n     * const userOperation = await cdp.evm.revokeSpendPermission({\n     *   address: \"0x1234567890123456789012345678901234567890\",\n     *   permissionHash: \"0x1234567890123456789012345678901234567890123456789012345678901234\",\n     *   network: \"base-sepolia\",\n     * });\n     * ```\n     */\n    async revokeSpendPermission(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"revoke_spend_permission\",\n        });\n        const userOperation = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.revokeSpendPermission(options.address, {\n            network: options.network,\n            permissionHash: options.permissionHash,\n            paymasterUrl: options.paymasterUrl,\n        }, options.idempotencyKey);\n        return {\n            network: userOperation.network,\n            userOpHash: userOperation.userOpHash,\n            status: userOperation.status,\n            calls: userOperation.calls.map(call => ({\n                to: call.to,\n                value: BigInt(call.value),\n                data: call.data,\n            })),\n        };\n    }\n    /**\n     * Gets a CDP EVM account.\n     *\n     * @param {GetServerAccountOptions} options - Parameters for getting the account.\n     * Either `address` or `name` must be provided.\n     * If both are provided, lookup will be done by `address` and `name` will be ignored.\n     * @param {string} [options.address] - The address of the account to get.\n     * @param {string} [options.name] - The name of the account to get.\n     *\n     * @returns A promise that resolves to the account.\n     *\n     * @example **Get an account by address**\n     *          ```ts\n     *          const account = await cdp.evm.getAccount({\n     *            address: \"0x1234567890123456789012345678901234567890\",\n     *          });\n     *          ```\n     *\n     * @example **Get an account by name**\n     *          ```ts\n     *          const account = await cdp.evm.getAccount({\n     *            name: \"MyAccount\",\n     *          });\n     *          ```\n     */\n    async getAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"get_account\",\n            accountType: \"evm_server\",\n        });\n        return this._getAccountInternal(options);\n    }\n    /**\n     * Gets a CDP EVM smart account.\n     *\n     * @param {GetSmartAccountOptions} options - Parameters for getting the smart account.\n     * Either `address` or `name` must be provided.\n     * If both are provided, lookup will be done by `address` and `name` will be ignored.\n     * @param {string} [options.address] - The address of the smart account to get.\n     * @param {string} [options.name] - The name of the smart account to get.\n     * @param {Account} options.owner - The owner of the smart account.\n     * You must pass the signing-capable owner of the smart account so that the returned smart account\n     * can be functional.\n     *\n     * @returns A promise that resolves to the smart account.\n     *\n     * @example\n     * ```ts\n     * const smartAccount = await cdp.evm.getSmartAccount({\n     *   address: \"0x1234567890123456789012345678901234567890\",\n     *   owner: account,\n     * });\n     * ```\n     */\n    async getSmartAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"get_smart_account\",\n        });\n        return this._getSmartAccountInternal(options);\n    }\n    /**\n     * Gets a CDP EVM account, or creates one if it doesn't exist.\n     *\n     * @param {GetOrCreateServerAccountOptions} options - Parameters for getting or creating the account.\n     * @param {string} [options.name] - The name of the account to get or create.\n     *\n     * @returns A promise that resolves to the account.\n     *\n     * @example\n     * ```ts\n     * const account = await cdp.evm.getOrCreateAccount({\n     *   name: \"MyAccount\",\n     * });\n     * ```\n     */\n    async getOrCreateAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"get_or_create_account\",\n            accountType: \"evm_server\",\n        });\n        try {\n            const account = await this._getAccountInternal(options);\n            return account;\n        }\n        catch (error) {\n            // If it failed because the account doesn't exist, create it\n            const doesAccountNotExist = error instanceof _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_6__.APIError && error.statusCode === 404;\n            if (doesAccountNotExist) {\n                try {\n                    const account = await this._createAccountInternal(options);\n                    return account;\n                }\n                catch (error) {\n                    // If it failed because the account already exists, get the existing account\n                    const doesAccountAlreadyExist = error instanceof _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_6__.APIError && error.statusCode === 409;\n                    if (doesAccountAlreadyExist) {\n                        const account = await this._getAccountInternal(options);\n                        return account;\n                    }\n                    throw error;\n                }\n            }\n            throw error;\n        }\n    }\n    /**\n     * Gets a CDP EVM smart account, or creates one if it doesn't exist.\n     * This method first attempts to retrieve an existing smart account with the given parameters.\n     * If no account exists, it creates a new one with the specified owner.\n     *\n     * @param {GetOrCreateSmartAccountOptions} options - Configuration options for getting or creating the smart account.\n     * @param {string} [options.name] - The name of the smart account to get or create.\n     * @param {Account} options.owner - The owner of the smart account.\n     *\n     * @returns {Promise<SmartAccount>} A promise that resolves to the retrieved or newly created smart account.\n     *\n     * @example\n     * ```ts\n     * const smartAccount = await cdp.evm.getOrCreateSmartAccount({\n     *   name: \"MySmartAccount\",\n     *   owner: account,\n     * });\n     * ```\n     */\n    async getOrCreateSmartAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"get_or_create_smart_account\",\n            accountType: \"evm_smart\",\n        });\n        try {\n            const account = await this._getSmartAccountInternal(options);\n            return account;\n        }\n        catch (error) {\n            // If it failed because the account doesn't exist, create it\n            const doesAccountNotExist = error instanceof _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_6__.APIError && error.statusCode === 404;\n            if (doesAccountNotExist) {\n                try {\n                    const account = await this._createSmartAccountInternal(options);\n                    return account;\n                }\n                catch (error) {\n                    // If it failed because the account already exists, get the existing account\n                    const doesAccountAlreadyExist = error instanceof _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_6__.APIError && error.statusCode === 409;\n                    if (doesAccountAlreadyExist) {\n                        const account = await this._getSmartAccountInternal(options);\n                        return account;\n                    }\n                    throw error;\n                }\n            }\n            throw error;\n        }\n    }\n    /**\n     * Gets the price for a swap between two tokens on an EVM network.\n     *\n     * @param {GetSwapPriceOptions} options - The options for getting a swap price.\n     *\n     * @returns {Promise<GetSwapPriceResult | SwapUnavailableResult>} A promise that resolves to the swap price result or a response indicating that liquidity is unavailable.\n     *\n     * @example\n     * ```typescript\n     * const price = await cdp.evm.getSwapPrice({\n     *   network: \"ethereum-mainnet\",\n     *   toToken: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\n     *   fromToken: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", // WETH\n     *   fromAmount: BigInt(\"1000000000000000000\"), // 1 WETH\n     *   taker: \"0x1234567890123456789012345678901234567890\"\n     * });\n     * ```\n     */\n    async getSwapPrice(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"get_swap_price\",\n            properties: {\n                network: options.network,\n            },\n        });\n        return (0,_actions_evm_swap_getSwapPrice_js__WEBPACK_IMPORTED_MODULE_9__.getSwapPrice)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Creates a quote for a swap between two tokens on an EVM network.\n     *\n     * @param {CreateSwapQuoteOptions} options - The options for creating a swap quote.\n     *\n     * @returns {Promise<CreateSwapQuoteResult | SwapUnavailableResult>} A promise that resolves to the swap quote result or a response indicating that liquidity is unavailable.\n     *\n     * @example\n     * ```typescript\n     * const swapQuote = await cdp.evm.createSwapQuote({\n     *   network: \"ethereum\",\n     *   toToken: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC\n     *   fromToken: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", // WETH\n     *   fromAmount: BigInt(\"1000000000000000000\"), // 1 WETH\n     *   taker: \"0x1234567890123456789012345678901234567890\"\n     * });\n     * ```\n     */\n    async createSwapQuote(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"create_swap_quote\",\n            properties: {\n                network: options.network,\n            },\n        });\n        return (0,_actions_evm_swap_createSwapQuote_js__WEBPACK_IMPORTED_MODULE_10__.createSwapQuote)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Gets a user operation for a smart account by user operation hash.\n     *\n     * @param {GetUserOperationOptions} options - Parameters for getting the user operation.\n     * @param {SmartAccount} options.smartAccount - The smart account signing the user operation.\n     * @param {string} options.userOpHash - The user operation hash.\n     *\n     * @returns A promise that resolves to the user operation.\n     *\n     * @example\n     * ```ts\n     * const userOp = await cdp.evm.getUserOperation({\n     *   smartAccount,\n     *   userOpHash: \"0x1234567890123456789012345678901234567890123456789012345678901234\",\n     * });\n     * ```\n     */\n    async getUserOperation(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"get_user_operation\",\n        });\n        return (0,_actions_evm_getUserOperation_js__WEBPACK_IMPORTED_MODULE_11__.getUserOperation)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Lists CDP EVM accounts.\n     *\n     * @param {ListServerAccountsOptions} [options] - Optional parameters for listing the accounts.\n     * @param {number} [options.pageSize] - The number of accounts to return.\n     * @param {string} [options.pageToken] - The page token to begin listing from.\n     * This is obtained by previous calls to this method.\n     *\n     * @returns A promise that resolves to an array of accounts, and a token to paginate through the accounts.\n     *\n     * @example\n     * ```ts\n     * const accounts = await cdp.evm.listAccounts();\n     * ```\n     *\n     * @example **With pagination**\n     *          ```ts\n     *          let page = await cdp.evm.listAccounts();\n     *\n     *          while (page.nextPageToken) {\n     *            page = await cdp.evm.listAccounts({ pageToken: page.nextPageToken });\n     *          }\n     *          ```\n     */\n    async listAccounts(options = {}) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"list_accounts\",\n            accountType: \"evm_server\",\n        });\n        const ethAccounts = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.listEvmAccounts({\n            pageSize: options.pageSize,\n            pageToken: options.pageToken,\n        });\n        return {\n            accounts: ethAccounts.accounts.map(account => {\n                const evmAccount = (0,_accounts_evm_toEvmServerAccount_js__WEBPACK_IMPORTED_MODULE_5__.toEvmServerAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n                    account,\n                });\n                _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.wrapObjectMethodsWithErrorTracking(evmAccount);\n                return evmAccount;\n            }),\n            nextPageToken: ethAccounts.nextPageToken,\n        };\n    }\n    /**\n     * Lists CDP EVM token balances.\n     *\n     * @param {ListTokenBalancesOptions} options - Parameters for listing the token balances.\n     * @param {number} [options.pageSize] - The number of token balances to return.\n     * @param {string} [options.pageToken] - The page token to begin listing from.\n     * This is obtained by previous calls to this method.\n     *\n     * @returns A promise that resolves to an array of token balances, and a token to paginate through the token balances.\n     *\n     * @example\n     * ```ts\n     * const tokenBalances = await cdp.evm.listTokenBalances({\n     *   address: \"0x1234567890123456789012345678901234567890\",\n     *   network: \"base-sepolia\",\n     * });\n     * ```\n     *\n     * @example\n     * **With pagination**\n     * ```ts\n     * let page = await cdp.evm.listTokenBalances({\n     *   address: \"0x1234567890123456789012345678901234567890\",\n     *   network: \"base-sepolia\",\n     * });\n     *\n     * while (page.nextPageToken) {\n     *   page = await cdp.evm.listTokenBalances({\n     *     address: \"0x1234567890123456789012345678901234567890\",\n     *     network: \"base-sepolia\",\n     *     pageToken: page.nextPageToken,\n     *   });\n     * }\n     */\n    async listTokenBalances(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"list_token_balances\",\n            properties: {\n                network: options.network,\n            },\n        });\n        return (0,_actions_evm_listTokenBalances_js__WEBPACK_IMPORTED_MODULE_12__.listTokenBalances)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Lists CDP EVM smart accounts.\n     *\n     * @param {ListSmartAccountsOptions} options - Parameters for listing the smart accounts.\n     * @param {number} [options.pageSize] - The number of smart accounts to return.\n     * @param {string} [options.pageToken] - The page token to begin listing from.\n     * This is obtained by previous calls to this method.\n     *\n     * @returns A promise that resolves to an array of smart accounts, and a token to paginate through the smart accounts.\n     *\n     * @example\n     * ```ts\n     * const smartAccounts = await cdp.evm.listSmartAccounts();\n     * ```\n     *\n     * @example **With pagination**\n     *          ```ts\n     *          let page = await cdp.evm.listSmartAccounts();\n     *\n     *          while (page.nextPageToken) {\n     *            page = await cdp.evm.listSmartAccounts({ pageToken: page.nextPageToken });\n     *          }\n     *          ```\n     */\n    async listSmartAccounts(options = {}) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"list_smart_accounts\",\n        });\n        const smartAccounts = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.listEvmSmartAccounts({\n            pageSize: options.pageSize,\n            pageToken: options.pageToken,\n        });\n        return {\n            accounts: smartAccounts.accounts.map(account => ({\n                address: account.address,\n                owners: [account.owners[0]],\n                type: \"evm-smart\",\n                policies: account.policies,\n            })),\n            nextPageToken: smartAccounts.nextPageToken,\n        };\n    }\n    /**\n     * Lists the spend permissions for a smart account.\n     *\n     * @param {ListSpendPermissionsOptions} options - Parameters for listing the spend permissions.\n     * @param {string} options.address - The address of the smart account.\n     * @param {number} [options.pageSize] - The number of spend permissions to return.\n     * @param {string} [options.pageToken] - The page token to return the next page of spend permissions.\n     *\n     * @returns A promise that resolves to the spend permissions.\n     */\n    async listSpendPermissions(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"list_spend_permissions\",\n        });\n        return (0,_actions_evm_listSpendPermissions_js__WEBPACK_IMPORTED_MODULE_13__.listSpendPermissions)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Prepares a user operation for a smart account.\n     *\n     * @param {PrepareUserOperationOptions} options - Parameters for preparing the user operation.\n     * @param {SmartAccount} options.smartAccount - The smart account signing the user operation.\n     * @param {string} options.network - The network to prepare the user operation for.\n     * @param {EvmCall[]} options.calls - The calls to include in the user operation.\n     * @param {string} [options.paymasterUrl] - The optional paymaster URL to use for the user operation.\n     *\n     * @returns A promise that resolves to the user operation hash.\n     *\n     * @example\n     * ```ts\n     * const userOp = await cdp.evm.prepareUserOperation({\n     *   smartAccount,\n     *   network: \"base-sepolia\",\n     *   calls: [\n     *     {\n     *       to: \"0x1234567890123456789012345678901234567890\",\n     *       value: parseEther(\"0.000001\"),\n     *       data: \"0x\",\n     *     },\n     *   ],\n     * });\n     * ```\n     */\n    async prepareUserOperation(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"prepare_user_operation\",\n            properties: {\n                network: options.network,\n            },\n        });\n        const userOp = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.prepareUserOperation(options.smartAccount.address, {\n            network: options.network,\n            calls: options.calls.map(call => ({\n                to: call.to,\n                value: call.value.toString(),\n                data: call.data,\n            })),\n            paymasterUrl: options.paymasterUrl,\n        });\n        return {\n            network: userOp.network,\n            userOpHash: userOp.userOpHash,\n            status: userOp.status,\n            calls: userOp.calls.map(call => ({\n                to: call.to,\n                value: BigInt(call.value),\n                data: call.data,\n            })),\n        };\n    }\n    /**\n     * Requests funds from an EVM faucet.\n     *\n     * @param {RequestFaucetOptions} options - Parameters for requesting funds from the EVM faucet.\n     * @param {string} options.address - The address to request funds for.\n     * @param {string} options.network - The network to request funds from.\n     * @param {string} options.token - The token to request funds for.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the transaction hash.\n     *\n     * @example\n     * ```ts\n     * const result = await cdp.evm.requestFaucet({\n     *   address: \"0x1234567890123456789012345678901234567890\",\n     *   network: \"base-sepolia\",\n     *   token: \"eth\",\n     * });\n     * ```\n     */\n    async requestFaucet(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"request_faucet\",\n            properties: {\n                network: options.network,\n            },\n        });\n        return (0,_actions_evm_requestFaucet_js__WEBPACK_IMPORTED_MODULE_14__.requestFaucet)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Signs an EVM transaction and sends it to the specified network using the Coinbase API.\n     * This method handles nonce management and gas estimation automatically.\n     *\n     * @param {SendTransactionOptions} options - Configuration options for sending the transaction.\n     * @returns A promise that resolves to the transaction hash.\n     *\n     * @example\n     * **Sending an RLP-encoded transaction**\n     * ```ts\n     * import { parseEther, serializeTransaction } from \"viem\";\n     * import { baseSepolia } from \"viem/chains\";\n     *\n     * const { transactionHash } = await cdp.evm.sendTransaction({\n     *   address: account.address,\n     *   transaction: serializeTransaction({\n     *     to: \"0x4252e0c9A3da5A2700e7d91cb50aEf522D0C6Fe8\",\n     *     value: parseEther(\"0.000001\"),\n     *     chainId: baseSepolia.id,\n     *     // Fields below are optional, CDP API will populate them if omitted.\n     *     // nonce\n     *     // maxPriorityFeePerGas\n     *     // maxFeePerGas\n     *     // gas\n     *   }),\n     *   network: \"base-sepolia\",\n     * });\n     * ```\n     * @example\n     * **Sending an EIP-1559 transaction request object**\n     * ```ts\n     * const { transactionHash } = await cdp.evm.sendTransaction({\n     *   address: account.address,\n     *   transaction: {\n     *     to: \"0x4252e0c9A3da5A2700e7d91cb50aEf522D0C6Fe8\",\n     *     value: parseEther(\"0.000001\"),\n     *     // Fields below are optional, CDP API will populate them if omitted.\n     *     // nonce\n     *     // maxPriorityFeePerGas\n     *     // maxFeePerGas\n     *     // gas\n     *   },\n     *   network: \"base-sepolia\",\n     * });\n     * ```\n     */\n    async sendTransaction(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"send_transaction\",\n            properties: {\n                network: options.network,\n            },\n        });\n        return (0,_actions_evm_sendTransaction_js__WEBPACK_IMPORTED_MODULE_15__.sendTransaction)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Sends a user operation.\n     *\n     * @param {SendUserOperationOptions} options - Parameters for sending the user operation.\n     * @param {SmartAccount} options.smartAccount - The smart account sending the user operation.\n     * @param {string} options.network - The network to send the user operation on.\n     * @param {EvmCall[]} options.calls - The calls to include in the user operation.\n     * @param {string} [options.paymasterUrl] - The optional paymaster URL to use for the user operation.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to an object containing the smart account address,\n     * the user operation hash, and the status of the user operation.\n     *\n     * @example\n     * ```ts\n     * const userOp = await cdp.evm.sendUserOperation({\n     *   smartAccount,\n     *   network: \"base-sepolia\",\n     *   calls: [\n     *     {\n     *       to: \"0x1234567890123456789012345678901234567890\",\n     *       value: parseEther(\"0.000001\"),\n     *       data: \"0x\",\n     *     },\n     *   ],\n     * });\n     * ```\n     */\n    async sendUserOperation(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"send_user_operation\",\n            properties: {\n                network: options.network,\n            },\n        });\n        return (0,_actions_evm_sendUserOperation_js__WEBPACK_IMPORTED_MODULE_16__.sendUserOperation)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            smartAccount: options.smartAccount,\n            network: options.network,\n            calls: options.calls,\n            paymasterUrl: options.paymasterUrl,\n            idempotencyKey: options.idempotencyKey,\n        });\n    }\n    /**\n     * Signs an EVM hash.\n     *\n     * @param {SignHashOptions} options - Parameters for signing the hash.\n     * @param {string} options.address - The address to sign the hash for.\n     * @param {string} options.hash - The hash to sign.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the signature.\n     *\n     * @example\n     * ```ts\n     * // Create a new EVM server account to sign with\n     * const ethAccount = await cdp.createEvmServerAccount({});\n     *\n     * const signature = await cdp.evm.signHash({\n     *   address: ethAccount.address,\n     *   hash: \"0x1234567890123456789012345678901234567890123456789012345678901234\",\n     * });\n     * ```\n     */\n    async signHash(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"sign_hash\",\n        });\n        const signature = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.signEvmHash(options.address, {\n            hash: options.hash,\n        }, options.idempotencyKey);\n        return {\n            signature: signature.signature,\n        };\n    }\n    /**\n     * Signs an EIP-191 message.\n     *\n     * @param {SignMessageOptions} options - Parameters for signing the message.\n     * @param {string} options.address - The address to sign the message for.\n     * @param {string} options.message - The message to sign.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the signature.\n     *\n     * @example\n     * ```ts\n     * // Create a new EVM server account to sign with\n     * const ethAccount = await cdp.createEvmServerAccount({});\n     *\n     * const signature = await cdp.evm.signMessage({\n     *   address: ethAccount.address,\n     *   message: \"Hello, world!\",\n     * });\n     * ```\n     */\n    async signMessage(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"sign_message\",\n        });\n        const signature = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.signEvmMessage(options.address, {\n            message: options.message,\n        }, options.idempotencyKey);\n        return {\n            signature: signature.signature,\n        };\n    }\n    /**\n     * Signs an EIP-712 message.\n     *\n     * @param {SignTypedDataOptions} options - Parameters for signing the EIP-712 message.\n     * @returns A promise that resolves to the signature.\n     *\n     * @example\n     * ```ts\n     * const signature = await cdp.evm.signTypedData({\n     *   address: account.address,\n     *   domain: {\n     *     name: \"Permit2\",\n     *     chainId: 1,\n     *     verifyingContract: \"0x000000000022D473030F116dDEE9F6B43aC78BA3\",\n     *   },\n     *   types: {\n     *     EIP712Domain: [\n     *       { name: \"name\", type: \"string\" },\n     *       { name: \"chainId\", type: \"uint256\" },\n     *       { name: \"verifyingContract\", type: \"address\" },\n     *     ],\n     *     PermitTransferFrom: [\n     *       { name: \"permitted\", type: \"TokenPermissions\" },\n     *       { name: \"spender\", type: \"address\" },\n     *       { name: \"nonce\", type: \"uint256\" },\n     *       { name: \"deadline\", type: \"uint256\" },\n     *     ],\n     *     TokenPermissions: [\n     *       { name: \"token\", type: \"address\" },\n     *       { name: \"amount\", type: \"uint256\" },\n     *     ],\n     *   },\n     *   primaryType: \"PermitTransferFrom\",\n     *   message: {\n     *     permitted: {\n     *       token: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n     *       amount: \"1000000\",\n     *     },\n     *     spender: \"0xFfFfFfFFfFFfFFfFFfFFFFFffFFFffffFfFFFfFf\",\n     *     nonce: \"0\",\n     *     deadline: \"1717123200\",\n     *   },\n     * });\n     * ```\n     */\n    async signTypedData(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"sign_typed_data\",\n        });\n        const { domain, message, primaryType } = options;\n        const types = {\n            EIP712Domain: (0,viem__WEBPACK_IMPORTED_MODULE_17__.getTypesForEIP712Domain)({ domain }),\n            ...options.types,\n        };\n        const openApiMessage = {\n            domain,\n            types,\n            primaryType,\n            message,\n        };\n        const signature = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.signEvmTypedData(options.address, openApiMessage, options.idempotencyKey);\n        return {\n            signature: signature.signature,\n        };\n    }\n    /**\n     * Signs an EVM transaction.\n     *\n     * @param {SignTransactionOptions} options - Configuration options for signing the transaction.\n     * @returns A promise that resolves to the signature.\n     *\n     * @example\n     * ```ts\n     * import { parseEther, serializeTransaction } from \"viem\";\n     * import { baseSepolia } from \"viem/chains\";\n     *\n     * // Create a new EVM server account to sign with\n     * const ethAccount = await cdp.createEvmServerAccount({});\n     *\n     * const serializedTx = serializeTransaction(\n     *   {\n     *     chainId: baseSepolia.id,\n     *     data: \"0x\",\n     *     to: \"0x4252e0c9A3da5A2700e7d91cb50aEf522D0C6Fe8\",\n     *     type: \"eip1559\",\n     *     value: parseEther(\"0.000001\"),\n     *   },\n     * );\n     *\n     * const signature = await cdp.evm.signTransaction({\n     *   address: ethAccount.address,\n     *   transaction: serializedTx,\n     * });\n     * ```\n     */\n    async signTransaction(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"sign_transaction\",\n        });\n        const signature = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.signEvmTransaction(options.address, {\n            transaction: options.transaction,\n        }, options.idempotencyKey);\n        return {\n            signature: signature.signedTransaction,\n        };\n    }\n    /**\n     * Updates a CDP EVM account.\n     *\n     * @param {UpdateEvmAccountOptions} [options] - Optional parameters for creating the account.\n     * @param {string} options.address - The address of the account to update\n     * @param {UpdateEvmAccountBody} options.update - An object containing account fields to update.\n     * @param {string} [options.update.name] - The new name for the account.\n     * @param {string} [options.update.accountPolicy] - The ID of a Policy to apply to the account.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the updated account.\n     *\n     * @example **With a name**\n     *          ```ts\n     *          const account = await cdp.evm.updateAccount({ address: \"0x...\", update: { name: \"New Name\" } });\n     *          ```\n     *\n     * @example **With an account policy**\n     *          ```ts\n     *          const account = await cdp.evm.updateAccount({ address: \"0x...\", update: { accountPolicy: \"73bcaeeb-d7af-4615-b064-42b5fe83a31e\" } });\n     *          ```\n     *\n     * @example **With an idempotency key**\n     *          ```ts\n     *          const idempotencyKey = uuidv4();\n     *\n     *          // First call\n     *          await cdp.evm.updateAccount({\n     *            address: \"0x...\",\n     *            update: { accountPolicy: \"73bcaeeb-d7af-4615-b064-42b5fe83a31e\" },\n     *            idempotencyKey,\n     *          });\n     *\n     *          // Second call with the same idempotency key will not update\n     *          await cdp.evm.updateAccount({\n     *            address: '0x...',\n     *            update: { name: \"\" },\n     *            idempotencyKey,\n     *          });\n     *          ```\n     */\n    async updateAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"update_account\",\n        });\n        const openApiAccount = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.updateEvmAccount(options.address, options.update, options.idempotencyKey);\n        const account = (0,_accounts_evm_toEvmServerAccount_js__WEBPACK_IMPORTED_MODULE_5__.toEvmServerAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            account: openApiAccount,\n        });\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.wrapObjectMethodsWithErrorTracking(account);\n        return account;\n    }\n    /**\n     * Updates a CDP EVM smart account.\n     *\n     * @param {UpdateEvmSmartAccountOptions} [options] - Optional parameters for updating the account.\n     * @param {string} options.address - The address of the account to update\n     * @param {UpdateEvmSmartAccount} options.update - An object containing account fields to update.\n     * @param {string} options.owner - The owner of the account.\n     * @param {string} [options.update.name] - The new name for the account.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the updated account.\n     */\n    async updateSmartAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"update_smart_account\",\n        });\n        const openApiSmartAccount = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.updateEvmSmartAccount(options.address, options.update, options.idempotencyKey);\n        const smartAccount = (0,_accounts_evm_toEvmSmartAccount_js__WEBPACK_IMPORTED_MODULE_18__.toEvmSmartAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            smartAccount: openApiSmartAccount,\n            owner: options.owner,\n        });\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.wrapObjectMethodsWithErrorTracking(smartAccount);\n        return smartAccount;\n    }\n    /**\n     * Waits for a user operation to complete or fail.\n     *\n     * @param {WaitForUserOperationOptions} options - Parameters for waiting for the user operation.\n     * @param {string} options.smartAccountAddress - The address of the smart account.\n     * @param {string} options.userOpHash - The user operation hash.\n     * @param {WaitOptions} [options.waitOptions] - Optional parameters for the wait operation.\n     *\n     * @returns A promise that resolves to the transaction receipt.\n     *\n     * @example\n     * ```ts\n     * // Send a user operation and get the user operation hash\n     * const { userOpHash } = await cdp.evm.sendUserOperation({\n     *   smartAccount,\n     *   network: \"base-sepolia\",\n     *   calls: [\n     *     {\n     *       to: \"0x0000000000000000000000000000000000000000\",\n     *       value: parseEther(\"0.000001\"),\n     *       data: \"0x\",\n     *     },\n     *   ],\n     * });\n     *\n     * // Wait for the user operation to complete or fail\n     * const result = await cdp.evm.waitForUserOperation({\n     *   smartAccountAddress: smartAccount.address,\n     *   userOpHash: userOp.userOpHash,\n     * });\n     * ```\n     */\n    async waitForUserOperation(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.trackAction({\n            action: \"wait_for_user_operation\",\n        });\n        return (0,_actions_evm_waitForUserOperation_js__WEBPACK_IMPORTED_MODULE_19__.waitForUserOperation)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            ...options,\n        });\n    }\n    /**\n     * Internal method to create an account without tracking analytics.\n     * Used internally by composite operations to avoid double-counting.\n     *\n     * @param {CreateServerAccountOptions} options - Parameters for creating the account.\n     * @returns {Promise<ServerAccount>} A promise that resolves to the newly created account.\n     */\n    async _createAccountInternal(options = {}) {\n        const openApiAccount = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.createEvmAccount({\n            name: options.name,\n            accountPolicy: options.accountPolicy,\n        }, options.idempotencyKey);\n        const account = (0,_accounts_evm_toEvmServerAccount_js__WEBPACK_IMPORTED_MODULE_5__.toEvmServerAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            account: openApiAccount,\n        });\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.wrapObjectMethodsWithErrorTracking(account);\n        return account;\n    }\n    /**\n     * Internal method to get an account without tracking analytics.\n     * Used internally by composite operations to avoid double-counting.\n     *\n     * @param {GetServerAccountOptions} options - Parameters for getting the account.\n     * @returns {Promise<ServerAccount>} A promise that resolves to the account.\n     */\n    async _getAccountInternal(options) {\n        const openApiAccount = await (() => {\n            if (options.address) {\n                return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.getEvmAccount(options.address);\n            }\n            if (options.name) {\n                return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.getEvmAccountByName(options.name);\n            }\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.UserInputValidationError(\"Either address or name must be provided\");\n        })();\n        const account = (0,_accounts_evm_toEvmServerAccount_js__WEBPACK_IMPORTED_MODULE_5__.toEvmServerAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            account: openApiAccount,\n        });\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.wrapObjectMethodsWithErrorTracking(account);\n        return account;\n    }\n    /**\n     * Internal method to create a smart account without tracking analytics.\n     * Used internally by composite operations to avoid double-counting.\n     *\n     * @param {CreateSmartAccountOptions} options - Parameters for creating the smart account.\n     * @returns {Promise<SmartAccount>} A promise that resolves to the newly created smart account.\n     */\n    async _createSmartAccountInternal(options) {\n        const owners = [options.owner.address];\n        if (options.enableSpendPermissions) {\n            owners.push(_spend_permissions_constants_js__WEBPACK_IMPORTED_MODULE_20__.SPEND_PERMISSION_MANAGER_ADDRESS);\n        }\n        const openApiSmartAccount = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.createEvmSmartAccount({\n            owners: owners,\n            name: options.name,\n        }, options.idempotencyKey);\n        const smartAccount = (0,_accounts_evm_toEvmSmartAccount_js__WEBPACK_IMPORTED_MODULE_18__.toEvmSmartAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            smartAccount: openApiSmartAccount,\n            owner: options.owner,\n        });\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.wrapObjectMethodsWithErrorTracking(smartAccount);\n        return smartAccount;\n    }\n    /**\n     * Internal method to get a smart account without tracking analytics.\n     * Used internally by composite operations to avoid double-counting.\n     *\n     * @param {GetSmartAccountOptions} options - Parameters for getting the smart account.\n     * @returns {Promise<SmartAccount>} A promise that resolves to the smart account.\n     */\n    async _getSmartAccountInternal(options) {\n        const openApiSmartAccount = await (async () => {\n            if (options.address) {\n                return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.getEvmSmartAccount(options.address);\n            }\n            else if (options.name) {\n                return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.getEvmSmartAccountByName(options.name);\n            }\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.UserInputValidationError(\"Either address or name must be provided\");\n        })();\n        if (!openApiSmartAccount.owners.includes(options.owner.address)) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.UserInputValidationError(`Owner mismatch: The provided owner address is not an owner of the smart account. Please use a valid owner for this smart account.\n\nSmart Account Address: ${openApiSmartAccount.address}\nSmart Account Owners: ${openApiSmartAccount.owners.join(\", \")}\nProvided Owner Address: ${options.owner.address}\\n`);\n        }\n        const smartAccount = (0,_accounts_evm_toEvmSmartAccount_js__WEBPACK_IMPORTED_MODULE_18__.toEvmSmartAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            smartAccount: openApiSmartAccount,\n            owner: options.owner,\n        });\n        _analytics_js__WEBPACK_IMPORTED_MODULE_1__.Analytics.wrapObjectMethodsWithErrorTracking(smartAccount);\n        return smartAccount;\n    }\n}\n//# sourceMappingURL=evm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/evm/evm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/policies/policies.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/client/policies/policies.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PoliciesClient: () => (/* binding */ PoliciesClient)\n/* harmony export */ });\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../analytics.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\");\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/index.js\");\n/* harmony import */ var _policies_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../policies/types.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/policies/types.js\");\n/**\n * @module Client\n */\n\n\n\n/**\n * The namespace containing all Policy methods.\n */\nclass PoliciesClient {\n    /**\n     * Lists policies belonging to the developer's CDP Project.\n     * Can be filtered by scope (project or account).\n     *\n     * @param {ListPoliciesOptions} [options] - Options for filtering and paginating the results\n     * @param {string} [options.scope] - Filter policies by scope ('project' or 'account')\n     * @param {number} [options.pageSize] - Maximum number of policies to return\n     * @param {string} [options.pageToken] - Pagination cursor for fetching next page of results\n     *\n     * @returns {Promise<ListPoliciesResult>} A paginated list of policies\n     *\n     * @example **List all policies**\n     *          ```ts\n     *          const { policies } = await cdp.policies.listPolicies();\n     *          ```\n     *\n     * @example **Filter by scope**\n     *          ```ts\n     *          const { policies } = await cdp.policies.listPolicies({\n     *            scope: 'project'\n     *          });\n     *          ```\n     *\n     * @example **With pagination**\n     *          ```ts\n     *          // Get first page\n     *          const firstPage = await cdp.policies.listPolicies({\n     *            pageSize: 10\n     *          });\n     *\n     *          // Get next page using cursor\n     *          const nextPage = await cdp.policies.listPolicies({\n     *            pageSize: 10,\n     *            pageToken: firstPage.pageToken\n     *          });\n     *          ```\n     */\n    async listPolicies(options = {}) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n            action: \"list_policies\",\n            properties: {\n                scope: options.scope,\n            },\n        });\n        return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_1__.CdpOpenApiClient.listPolicies(options);\n    }\n    /**\n     * Creates a new policy that can be used to govern the behavior of projects and accounts.\n     *\n     * @param {CreatePolicyOptions} options - Options for creating the policy\n     * @param {CreatePolicyBody} options.policy - The policy configuration to create\n     * @param {string} [options.policy.description] - Description of the policy's purpose\n     * @param {Rule[]} options.policy.rules - Rules that define the policy behavior\n     * @param {string} [options.idempotencyKey] - An idempotency key to prevent duplicate policy creation\n     *\n     * @returns {Promise<Policy>} The created policy\n     * @throws {ZodError<typeof CreatePolicyBodySchema>} When the policy is invalid\n     *\n     * @example **Creating a new EVM policy**\n     *          ```ts\n     *          const policy = await cdp.policies.createPolicy({\n     *            policy: {\n     *              scope: \"account\",\n     *              description: \"Limits the amount of ETH in transaction\",\n     *              rules: [\n     *                {\n     *                  action: \"reject\",\n     *                  operation: \"signEvmTransaction\",\n     *                  criteria: [\n     *                    {\n     *                      type: \"ethValue\",\n     *                      ethValue: \"1000000000000000000\",\n     *                      operator: \">\",\n     *                    },\n     *                  ],\n     *                },\n     *              ],\n     *            }\n     *          });\n     *          ```\n     *\n     * @example **Creating a new Solana policy**\n     *          ```ts\n     *          const policy = await cdp.policies.createPolicy({\n     *            policy: {\n     *              scope: \"account\",\n     *              description: \"Limits SOL transfers and SPL token operations\",\n     *              rules: [\n     *                {\n     *                  action: \"reject\",\n     *                  operation: \"signSolTransaction\",\n     *                  criteria: [\n     *                    {\n     *                      type: \"solValue\",\n     *                      solValue: \"1000000000\", // 1 SOL in lamports\n     *                      operator: \">\",\n     *                    },\n     *                    {\n     *                      type: \"solAddress\",\n     *                      addresses: [\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\"],\n     *                      operator: \"in\",\n     *                    },\n     *                  ],\n     *                },\n     *                {\n     *                  action: \"accept\",\n     *                  operation: \"sendSolTransaction\",\n     *                  criteria: [\n     *                    {\n     *                      type: \"mintAddress\",\n     *                      addresses: [\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"], // USDC mint\n     *                      operator: \"in\",\n     *                    },\n     *                  ],\n     *                },\n     *              ],\n     *            }\n     *          });\n     *          ```\n     *\n     * @example **With idempotency key**\n     *          ```ts\n     *          const idempotencyKey = uuidv4();\n     *\n     *          // First call creates the policy\n     *          const policy = await cdp.policies.createPolicy({\n     *            policy: {\n     *              scope: \"account\",\n     *              description: \"Limits the amount of ETH in transaction\",\n     *              rules: [\n     *                {\n     *                  action: \"reject\",\n     *                  operation: \"signEvmTransaction\",\n     *                  criteria: [\n     *                    {\n     *                      type: \"ethValue\",\n     *                      ethValue: \"1000000000000000000\",\n     *                      operator: \">\",\n     *                    },\n     *                  ],\n     *                },\n     *              ],\n     *            },\n     *            idempotencyKey\n     *          });\n     *\n     *          // Second call with same key returns the same policy\n     *          const samePolicy = await cdp.policies.createPolicy({\n     *            policy: { ... },\n     *            idempotencyKey\n     *          });\n     *          ```\n     */\n    async createPolicy(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n            action: \"create_policy\",\n            properties: {\n                scope: options.policy.scope,\n            },\n        });\n        _policies_types_js__WEBPACK_IMPORTED_MODULE_2__.CreatePolicyBodySchema.parse(options.policy);\n        return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_1__.CdpOpenApiClient.createPolicy(\n        // There are arbitrary differences between the abitype Abi and the openapi Abi\n        options.policy, options.idempotencyKey);\n    }\n    /**\n     * Retrieves a policy by its unique identifier.\n     *\n     * @param {GetPolicyByIdOptions} options - Options containing the policy ID to retrieve\n     * @param {string} options.id - The unique identifier of the policy to retrieve\n     *\n     * @returns {Promise<Policy>} The requested policy\n     *\n     * @example **Retrieving a policy by ID**\n     *          ```ts\n     *          const policy = await cdp.policies.getPolicyById({\n     *            id: \"__ID__\"\n     *          });\n     *\n     *          console.log(policy.name);\n     *          console.log(policy.rules);\n     *          ```\n     */\n    async getPolicyById(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n            action: \"get_policy_by_id\",\n        });\n        return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_1__.CdpOpenApiClient.getPolicyById(options.id);\n    }\n    /**\n     * Deletes a policy by its unique identifier.\n     * If a policy is referenced by an active project or account, this operation will fail.\n     *\n     * @param {DeletePolicyOptions} options - Options containing the policy ID to delete\n     * @param {string} options.id - The unique identifier of the policy to delete\n     * @param {string} [options.idempotencyKey] - An idempotency key to prevent duplicate deletion\n     *\n     * @returns {Promise<void>} Void on successful deletion\n     *\n     * @example **Deleting a policy**\n     *          ```ts\n     *          await cdp.policies.deletePolicy({\n     *            id: \"__ID__\"\n     *          });\n     *          ```\n     *\n     * @example **With idempotency key**\n     *          ```ts\n     *          const idempotencyKey = uuidv4();\n     *\n     *          // This operation is idempotent with the key\n     *          await cdp.policies.deletePolicy({\n     *            id: \"__ID__\",\n     *            idempotencyKey\n     *          });\n     *          ```\n     */\n    async deletePolicy(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n            action: \"delete_policy\",\n        });\n        return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_1__.CdpOpenApiClient.deletePolicy(options.id, options.idempotencyKey);\n    }\n    /**\n     * Updates an existing policy by its unique identifier.\n     * This will apply the updated policy to any project or accounts that are currently using it.\n     *\n     * @param {UpdatePolicyOptions} options - Options containing the policy ID and updated policy data\n     * @param {string} options.id - The unique identifier of the policy to update\n     * @param {UpdatePolicyBody} options.policy - The updated policy configuration\n     * @param {string} [options.policy.description] - Updated description of the policy's purpose\n     * @param {Rule[]} [options.policy.rules] - Updated rules that define the policy behavior\n     * @param {string} [options.idempotencyKey] - An idempotency key to prevent duplicate updates\n     *\n     * @returns {Promise<Policy>} The updated policy\n     * @throws {ZodError<typeof UpdatePolicyBodySchema>} When the updated policy is invalid\n     *\n     * @example **Updating an EVM policy**\n     *          ```ts\n     *          const updatedPolicy = await cdp.policies.updatePolicy({\n     *            id: \"__ID__\",\n     *            policy: {\n     *              description: \"Now with lower transaction limits\",\n     *              rules: [\n     *                {\n     *                  action: \"reject\",\n     *                  operation: \"signEvmTransaction\",\n     *                  criteria: [\n     *                    {\n     *                      type: \"ethValue\",\n     *                      ethValue: \"1000000000\",\n     *                      operator: \">\",\n     *                    },\n     *                  ],\n     *                },\n     *              ],\n     *            },\n     *          });\n     *          ```\n     *\n     * @example **Updating a Solana policy**\n     *          ```ts\n     *          const updatedPolicy = await cdp.policies.updatePolicy({\n     *            id: \"__ID__\",\n     *            policy: {\n     *              description: \"Updated Solana transaction limits\",\n     *              rules: [\n     *                {\n     *                  action: \"reject\",\n     *                  operation: \"signSolTransaction\",\n     *                  criteria: [\n     *                    {\n     *                      type: \"splValue\",\n     *                      splValue: \"1000000\", // SPL token amount\n     *                      operator: \">=\",\n     *                    },\n     *                    {\n     *                      type: \"mintAddress\",\n     *                      addresses: [\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"], // USDC mint\n     *                      operator: \"in\",\n     *                    },\n     *                  ],\n     *                },\n     *              ],\n     *            },\n     *          });\n     *          ```\n     *\n     * @example **With idempotency key**\n     *          ```ts\n     *          const idempotencyKey = uuidv4();\n     *\n     *          // This operation is idempotent with the key\n     *          await cdp.policies.updatePolicy({\n     *            id: \"__ID__\",\n     *            policy: {\n     *              description: \"Modified Policy\",\n     *              rules: { ... }\n     *            },\n     *            idempotencyKey\n     *          });\n     *          ```\n     */\n    async updatePolicy(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_0__.Analytics.trackAction({\n            action: \"update_policy\",\n        });\n        _policies_types_js__WEBPACK_IMPORTED_MODULE_2__.UpdatePolicyBodySchema.parse(options.policy);\n        return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_1__.CdpOpenApiClient.updatePolicy(options.id, \n        // There are arbitrary differences between the abitype Abi and the openapi Abi\n        options.policy, options.idempotencyKey);\n    }\n}\n//# sourceMappingURL=policies.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/policies/policies.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/solana/solana.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/client/solana/solana.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SolanaClient: () => (/* binding */ SolanaClient)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/src/esm/index.js\");\n/* harmony import */ var _accounts_solana_toSolanaAccount_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../accounts/solana/toSolanaAccount.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/accounts/solana/toSolanaAccount.js\");\n/* harmony import */ var _actions_solana_requestFaucet_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../actions/solana/requestFaucet.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/requestFaucet.js\");\n/* harmony import */ var _actions_solana_sendTransaction_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../actions/solana/sendTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/sendTransaction.js\");\n/* harmony import */ var _actions_solana_signMessage_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../actions/solana/signMessage.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/signMessage.js\");\n/* harmony import */ var _actions_solana_signTransaction_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../actions/solana/signTransaction.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/solana/signTransaction.js\");\n/* harmony import */ var _analytics_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../analytics.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/analytics.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../constants.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/constants.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n/* harmony import */ var _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../openapi-client/errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/errors.js\");\n/* harmony import */ var _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../openapi-client/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/index.js\");\n/* harmony import */ var _utils_export_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/export.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/export.js\");\n/**\n * @module Client\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The namespace containing all Solana methods.\n */\nclass SolanaClient {\n    /**\n     * Creates a new Solana account.\n     *\n     * @param {CreateAccountOptions} options - Parameters for creating the Solana account.\n     * @param {string} [options.name] - The name of the account.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the newly created account.\n     *\n     * @example **Without arguments**\n     *          ```ts\n     *          const account = await cdp.solana.createAccount();\n     *          ```\n     *\n     * @example **With a name**\n     *          ```ts\n     *          const account = await cdp.solana.createAccount({ name: \"MyAccount\" });\n     *          ```\n     *\n     * @example **With an idempotency key**\n     *          ```ts\n     *          const idempotencyKey = uuidv4();\n     *\n     *          // First call\n     *          await cdp.solana.createAccount({ idempotencyKey });\n     *\n     *          // Second call with the same idempotency key will return the same account\n     *          await cdp.solana.createAccount({ idempotencyKey });\n     *          ```\n     */\n    async createAccount(options = {}) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"create_account\",\n            accountType: \"solana\",\n        });\n        return this._createAccountInternal(options);\n    }\n    /**\n     * Exports a CDP Solana account's private key.\n     * It is important to store the private key in a secure place after it's exported.\n     *\n     * @param {ExportAccountOptions} options - Parameters for exporting the Solana account.\n     * @param {string} [options.address] - The address of the account.\n     * @param {string} [options.name] - The name of the account.\n     *\n     * @returns A promise that resolves to the exported account's full 64-byte private key as a base58 encoded string.\n     *\n     * @example **With an address**\n     * ```ts\n     * const privateKey = await cdp.solana.exportAccount({\n     *   address: \"1234567890123456789012345678901234567890\",\n     * });\n     * ```\n     *\n     * @example **With a name**\n     * ```ts\n     * const privateKey = await cdp.solana.exportAccount({\n     *   name: \"MyAccount\",\n     * });\n     * ```\n     */\n    async exportAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"export_account\",\n            accountType: \"solana\",\n        });\n        const { publicKey, privateKey } = await (0,_utils_export_js__WEBPACK_IMPORTED_MODULE_3__.generateExportEncryptionKeyPair)();\n        const { encryptedPrivateKey } = await (async () => {\n            if (options.address) {\n                return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.exportSolanaAccount(options.address, {\n                    exportEncryptionKey: publicKey,\n                }, options.idempotencyKey);\n            }\n            if (options.name) {\n                return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.exportSolanaAccountByName(options.name, {\n                    exportEncryptionKey: publicKey,\n                }, options.idempotencyKey);\n            }\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_5__.UserInputValidationError(\"Either address or name must be provided\");\n        })();\n        const decryptedPrivateKey = (0,_utils_export_js__WEBPACK_IMPORTED_MODULE_3__.decryptWithPrivateKey)(privateKey, encryptedPrivateKey);\n        return (0,_utils_export_js__WEBPACK_IMPORTED_MODULE_3__.formatSolanaPrivateKey)(decryptedPrivateKey);\n    }\n    /**\n     * Imports a Solana account using a private key.\n     * The private key will be encrypted before being stored securely.\n     *\n     * @param {ImportAccountOptions} options - Parameters for importing the Solana account.\n     * @param {string} options.privateKey - The private key to import (32 or 64 bytes). Can be a base58 encoded string or raw bytes.\n     * @param {string} [options.name] - The name of the account.\n     * @param {string} [options.encryptionPublicKey] - The RSA public key for encrypting the private key.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the imported account.\n     *\n     * @example **Import with private key only**\n     *          ```ts\n     *          const account = await cdp.solana.importAccount({\n     *            privateKey: \"3Kzjw8qSxx8bQkV7EHrVFWYiPyNLbBVxtVe1Q5h2zKZY8DdcuT2dKxyz9kU5vQrP\",\n     *          });\n     *          ```\n     *\n     * @example **Import with name**\n     *          ```ts\n     *          const account = await cdp.solana.importAccount({\n     *            privateKey: \"3Kzjw8qSxx8bQkV7EHrVFWYiPyNLbBVxtVe1Q5h2zKZY8DdcuT2dKxyz9kU5vQrP\",\n     *            name: \"ImportedAccount\",\n     *          });\n     *          ```\n     *\n     * @example **Import with idempotency key**\n     *          ```ts\n     *          const idempotencyKey = uuidv4();\n     *\n     *          const account = await cdp.solana.importAccount({\n     *            privateKey: \"3Kzjw8qSxx8bQkV7EHrVFWYiPyNLbBVxtVe1Q5h2zKZY8DdcuT2dKxyz9kU5vQrP\",\n     *            name: \"ImportedAccount\",\n     *            idempotencyKey,\n     *          });\n     *          ```\n     */\n    async importAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"import_account\",\n            accountType: \"solana\",\n        });\n        let privateKeyBytes = new Uint8Array();\n        if (typeof options.privateKey === \"string\") {\n            privateKeyBytes = bs58__WEBPACK_IMPORTED_MODULE_1__[\"default\"].decode(options.privateKey);\n        }\n        else {\n            privateKeyBytes = options.privateKey;\n        }\n        if (privateKeyBytes.length !== 32 && privateKeyBytes.length !== 64) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_5__.UserInputValidationError(\"Invalid private key length\");\n        }\n        if (privateKeyBytes.length === 64) {\n            privateKeyBytes = privateKeyBytes.subarray(0, 32);\n        }\n        const encryptionPublicKey = options.encryptionPublicKey || _constants_js__WEBPACK_IMPORTED_MODULE_6__.ImportAccountPublicRSAKey;\n        const encryptedPrivateKey = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.publicEncrypt)({\n            key: encryptionPublicKey,\n            padding: crypto__WEBPACK_IMPORTED_MODULE_0__.constants.RSA_PKCS1_OAEP_PADDING,\n            oaepHash: \"sha256\",\n        }, privateKeyBytes);\n        const openApiAccount = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.importSolanaAccount({\n            encryptedPrivateKey: encryptedPrivateKey.toString(\"base64\"),\n            name: options.name,\n        }, options.idempotencyKey);\n        const account = (0,_accounts_solana_toSolanaAccount_js__WEBPACK_IMPORTED_MODULE_7__.toSolanaAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            account: openApiAccount,\n        });\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.wrapObjectMethodsWithErrorTracking(account);\n        return account;\n    }\n    /**\n     * Gets a Solana account by its address.\n     *\n     * @param {GetAccountOptions} options - Parameters for getting the Solana account.\n     * Either `address` or `name` must be provided.\n     * If both are provided, lookup will be done by `address` and `name` will be ignored.\n     * @param {string} [options.address] - The address of the account.\n     * @param {string} [options.name] - The name of the account.\n     *\n     * @returns A promise that resolves to the account.\n     *\n     * @example **Get an account by address**\n     *          ```ts\n     *          const account = await cdp.solana.getAccount({\n     *            address: \"1234567890123456789012345678901234567890\",\n     *          });\n     *          ```\n     *\n     * @example **Get an account by name**\n     *          ```ts\n     *          const account = await cdp.solana.getAccount({\n     *            name: \"MyAccount\",\n     *          });\n     *          ```\n     */\n    async getAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"get_account\",\n            accountType: \"solana\",\n        });\n        return this._getAccountInternal(options);\n    }\n    /**\n     * Gets a Solana account by its address.\n     *\n     * @param {GetOrCreateAccountOptions} options - Parameters for getting or creating the Solana account.\n     * @param {string} options.name - The name of the account.\n     *\n     * @returns A promise that resolves to the account.\n     *\n     * @example\n     * ```ts\n     * const account = await cdp.solana.getOrCreateAccount({\n     *   name: \"MyAccount\",\n     * });\n     * ```\n     */\n    async getOrCreateAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"get_or_create_account\",\n            accountType: \"solana\",\n        });\n        try {\n            const account = await this._getAccountInternal(options);\n            return account;\n        }\n        catch (error) {\n            // If it failed because the account doesn't exist, create it\n            const doesAccountNotExist = error instanceof _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_8__.APIError && error.statusCode === 404;\n            if (doesAccountNotExist) {\n                try {\n                    const account = await this._createAccountInternal(options);\n                    return account;\n                }\n                catch (error) {\n                    // If it failed because the account already exists, get the existing account\n                    const doesAccountAlreadyExist = error instanceof _openapi_client_errors_js__WEBPACK_IMPORTED_MODULE_8__.APIError && error.statusCode === 409;\n                    if (doesAccountAlreadyExist) {\n                        const account = await this._getAccountInternal(options);\n                        return account;\n                    }\n                    throw error;\n                }\n            }\n            throw error;\n        }\n    }\n    /**\n     * Lists all Solana accounts.\n     *\n     * @param {ListAccountsOptions} options - Parameters for listing the Solana accounts.\n     * @param {number} [options.pageSize] - The number of accounts to return.\n     * @param {string} [options.pageToken] - The page token to begin listing from.\n     * This is obtained by previous calls to this method.\n     *\n     * @returns A promise that resolves to an array of Solana account instances.\n     *\n     * @example **Without arguments**\n     *          ```ts\n     *          const accounts = await cdp.solana.listAccounts();\n     *          ```\n     *\n     * @example **With pagination**\n     *          ```ts\n     *          let page = await cdp.solana.listAccounts();\n     *\n     *          while (page.nextPageToken) {\n     *            page = await cdp.solana.listAccounts({ pageToken: page.nextPageToken });\n     *          }\n     *\n     *          page.accounts.forEach(account => console.log(account));\n     *          ```\n     * }\n     * ```\n     */\n    async listAccounts(options = {}) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"list_accounts\",\n            accountType: \"solana\",\n        });\n        const solAccounts = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.listSolanaAccounts({\n            pageSize: options.pageSize,\n            pageToken: options.pageToken,\n        });\n        return {\n            accounts: solAccounts.accounts.map(account => {\n                const solanaAccount = (0,_accounts_solana_toSolanaAccount_js__WEBPACK_IMPORTED_MODULE_7__.toSolanaAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n                    account,\n                });\n                _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.wrapObjectMethodsWithErrorTracking(solanaAccount);\n                return solanaAccount;\n            }),\n            nextPageToken: solAccounts.nextPageToken,\n        };\n    }\n    /**\n     * Requests funds from a Solana faucet.\n     *\n     * @param {RequestFaucetOptions} options - Parameters for requesting funds from the Solana faucet.\n     * @param {string} options.address - The address to request funds for.\n     * @param {string} options.token - The token to request funds for.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the transaction signature.\n     *\n     * @example\n     *          ```ts\n     *          const signature = await cdp.solana.requestFaucet({\n     *            address: \"1234567890123456789012345678901234567890\",\n     *            token: \"sol\",\n     *          });\n     *          ```\n     */\n    async requestFaucet(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"request_faucet\",\n            accountType: \"solana\",\n        });\n        return (0,_actions_solana_requestFaucet_js__WEBPACK_IMPORTED_MODULE_9__.requestFaucet)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Signs a message.\n     *\n     * @param {SignMessageOptions} options - Parameters for signing the message.\n     * @param {string} options.address - The address to sign the message for.\n     * @param {string} options.message - The message to sign.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the signature.\n     *\n     * @example\n     * ```ts\n     * // Create a Solana account\n     * const account = await cdp.solana.createAccount();\n     *\n     * // When you want to sign a message, you can do so by address\n     * const signature = await cdp.solana.signMessage({\n     *   address: account.address,\n     *   message: \"Hello, world!\",\n     * });\n     * ```\n     */\n    async signMessage(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"sign_message\",\n            accountType: \"solana\",\n        });\n        return (0,_actions_solana_signMessage_js__WEBPACK_IMPORTED_MODULE_10__.signMessage)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Signs a transaction.\n     *\n     * @param {SignTransactionOptions} options - Parameters for signing the transaction.\n     * @param {string} options.address - The address to sign the transaction for.\n     * @param {string} options.transaction - The transaction to sign.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the signature.\n     *\n     * @example\n     * ```ts\n     * // Create a Solana account\n     * const account = await cdp.solana.createAccount();\n     *\n     * // Add your transaction instructions here\n     * const transaction = new Transaction()\n     *\n     * // Make sure to set requireAllSignatures to false, since signing will be done through the API\n     * const serializedTransaction = transaction.serialize({\n     *   requireAllSignatures: false,\n     * });\n     *\n     * // Base64 encode the serialized transaction\n     * const transaction = Buffer.from(serializedTransaction).toString(\"base64\");\n     *\n     * // When you want to sign a transaction, you can do so by address and base64 encoded transaction\n     * const signature = await cdp.solana.signTransaction({\n     *   address: account.address,\n     *   transaction,\n     * });\n     * ```\n     */\n    async signTransaction(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"sign_transaction\",\n            accountType: \"solana\",\n        });\n        return (0,_actions_solana_signTransaction_js__WEBPACK_IMPORTED_MODULE_11__.signTransaction)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Updates a CDP Solana account.\n     *\n     * @param {UpdateSolanaAccountOptions} [options] - Optional parameters for creating the account.\n     * @param {string} options.address - The address of the account to update\n     * @param {UpdateSolanaAccountBody} options.update - An object containing account fields to update.\n     * @param {string} [options.update.name] - The new name for the account.\n     * @param {string} [options.update.accountPolicy] - The ID of a Policy to apply to the account.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the updated account.\n     *\n     * @example **With a name**\n     *          ```ts\n     *          const account = await cdp.sol.updateAccount({ address: \"...\", update: { name: \"New Name\" } });\n     *          ```\n     *\n     * @example **With an account policy**\n     *          ```ts\n     *          const account = await cdp.sol.updateAccount({ address: \"...\", update: { accountPolicy: \"73bcaeeb-d7af-4615-b064-42b5fe83a31e\" } });\n     *          ```\n     *\n     * @example **With an idempotency key**\n     *          ```ts\n     *          const idempotencyKey = uuidv4();\n     *\n     *          // First call\n     *          await cdp.sol.updateAccount({\n     *            address: \"0x...\",\n     *            update: { accountPolicy: \"73bcaeeb-d7af-4615-b064-42b5fe83a31e\" },\n     *            idempotencyKey,\n     *          });\n     *\n     *          // Second call with the same idempotency key will not update\n     *          await cdp.sol.updateAccount({\n     *            address: '0x...',\n     *            update: { name: \"\" },\n     *            idempotencyKey,\n     *          });\n     *          ```\n     */\n    async updateAccount(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"update_account\",\n            accountType: \"solana\",\n        });\n        const openApiAccount = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.updateSolanaAccount(options.address, options.update, options.idempotencyKey);\n        const account = (0,_accounts_solana_toSolanaAccount_js__WEBPACK_IMPORTED_MODULE_7__.toSolanaAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            account: openApiAccount,\n        });\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.wrapObjectMethodsWithErrorTracking(account);\n        return account;\n    }\n    /**\n     * Sends a Solana transaction using the Coinbase API.\n     *\n     * @param {SendTransactionOptions} options - Parameters for sending the Solana transaction.\n     * @param {string} options.network - The network to send the transaction to.\n     * @param {string} options.transaction - The base64 encoded transaction to send.\n     * @param {string} [options.idempotencyKey] - An idempotency key.\n     *\n     * @returns A promise that resolves to the transaction result.\n     *\n     * @example\n     * ```ts\n     * const signature = await cdp.solana.sendTransaction({\n     *   network: \"solana-devnet\",\n     *   transaction: \"...\",\n     * });\n     * ```\n     */\n    async sendTransaction(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"send_transaction\",\n            accountType: \"solana\",\n            properties: {\n                network: options.network,\n            },\n        });\n        return (0,_actions_solana_sendTransaction_js__WEBPACK_IMPORTED_MODULE_12__.sendTransaction)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, options);\n    }\n    /**\n     * Lists the token balances for a Solana account.\n     *\n     * @param {ListTokenBalancesOptions} options - Parameters for listing the Solana token balances.\n     * @param {string} options.address - The address of the account to list token balances for.\n     * @param {string} [options.network] - The network to list token balances for. Defaults to \"solana\".\n     * @param {number} [options.pageSize] - The number of token balances to return.\n     * @param {string} [options.pageToken] - The page token to begin listing from.\n     * This is obtained by previous calls to this method.\n     *\n     * @returns A promise that resolves to an array of Solana token balance instances.\n     *\n     * @example\n     * ```ts\n     * const balances = await cdp.solana.listTokenBalances({ address: \"...\", network: \"solana-devnet\" });\n     * ```\n     */\n    async listTokenBalances(options) {\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.trackAction({\n            action: \"list_token_balances\",\n            accountType: \"solana\",\n            properties: {\n                network: options.network,\n            },\n        });\n        const tokenBalances = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.listSolanaTokenBalances(options.network || \"solana\", options.address, {\n            pageSize: options.pageSize,\n            pageToken: options.pageToken,\n        });\n        return {\n            balances: tokenBalances.balances.map(balance => {\n                return {\n                    amount: {\n                        amount: BigInt(balance.amount.amount),\n                        decimals: balance.amount.decimals,\n                    },\n                    token: {\n                        mintAddress: balance.token.mintAddress,\n                        name: balance.token.name,\n                        symbol: balance.token.symbol,\n                    },\n                };\n            }),\n            nextPageToken: tokenBalances.nextPageToken,\n        };\n    }\n    /**\n     * Internal method to create a Solana account without tracking analytics.\n     * Used internally by composite operations to avoid double-counting.\n     *\n     * @param {CreateAccountOptions} options - Parameters for creating the account.\n     * @returns {Promise<SolanaAccount>} A promise that resolves to the newly created account.\n     */\n    async _createAccountInternal(options = {}) {\n        const openApiAccount = await _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.createSolanaAccount({\n            name: options.name,\n            accountPolicy: options.accountPolicy,\n        }, options.idempotencyKey);\n        const account = (0,_accounts_solana_toSolanaAccount_js__WEBPACK_IMPORTED_MODULE_7__.toSolanaAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            account: openApiAccount,\n        });\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.wrapObjectMethodsWithErrorTracking(account);\n        return account;\n    }\n    /**\n     * Internal method to get a Solana account without tracking analytics.\n     * Used internally by composite operations to avoid double-counting.\n     *\n     * @param {GetAccountOptions} options - Parameters for getting the account.\n     * @returns {Promise<SolanaAccount>} A promise that resolves to the account.\n     */\n    async _getAccountInternal(options) {\n        const openApiAccount = await (() => {\n            if (options.address) {\n                return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.getSolanaAccount(options.address);\n            }\n            if (options.name) {\n                return _openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient.getSolanaAccountByName(options.name);\n            }\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_5__.UserInputValidationError(\"Either address or name must be provided\");\n        })();\n        const account = (0,_accounts_solana_toSolanaAccount_js__WEBPACK_IMPORTED_MODULE_7__.toSolanaAccount)(_openapi_client_index_js__WEBPACK_IMPORTED_MODULE_4__.CdpOpenApiClient, {\n            account: openApiAccount,\n        });\n        _analytics_js__WEBPACK_IMPORTED_MODULE_2__.Analytics.wrapObjectMethodsWithErrorTracking(account);\n        return account;\n    }\n}\n//# sourceMappingURL=solana.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/client/solana/solana.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_DOCS_PAGE_URL: () => (/* binding */ ERROR_DOCS_PAGE_URL),\n/* harmony export */   ImportAccountPublicRSAKey: () => (/* binding */ ImportAccountPublicRSAKey)\n/* harmony export */ });\n/**\n * The URL to the Coinbase CDP API error docs page.\n */\nconst ERROR_DOCS_PAGE_URL = \"https://docs.cdp.coinbase.com/api-reference/v2/errors\";\n/**\n * The public RSA key used to encrypt the private key when importing an EVM or Solana account.\n */\nconst ImportAccountPublicRSAKey = `-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA2Fxydgm/ryYk0IexQIuL\n9DKyiIk2WmS36AZ83a9Z0QX53qdveg08b05g1Qr+o+COoYOT/FDi8anRGAs7rIyS\nuigrjHR6VrmFjnGrrTr3MINwC9cYQFHwET8YVGRq+BB3iFTB1kIb9XJ/vT2sk1xP\nhJ6JihEwSl4DgbeVjqw59wYqrNg355oa8EdFqkmfGU2tpbM56F8iv1F+shwkGo3y\nGhW/UOQ5OLauXvsqo8ranwsK+lqFblLEMlNtn1VSJeO2vMxryeKFrY2ob8VqGchC\nftPJiLWs2Du6juw4C1rOWwSMlXzZ6cNMHkxdTcEHMr3C2TEHgzjZY41whMwNTB8q\n/pxXnIbH77caaviRs4R/POe8cSsznalXj85LULvFWOIHp0w+jEYSii9Rp9XtHWAH\nnrK/O/SVDtT1ohp2F+Zg1mojTgKfLOyGdOUXTi95naDTuG770rSjHdL80tJBz1Fd\n+1pzGTGXGHLZQLX5YZm5iuy2cebWfF09VjIoCIlDB2++tr4M+O0Z1X1ZE0J5Ackq\nrOluAFalaKynyH3KMyRg+NuLmibu5OmcMjCLK3D4X1YLiN2OK8/bbpEL8JYroDwb\nEXIUW5mGS06YxfSUsxHzL9Tj00+GMm/Gvl0+4/+Vn8IXVHjQOSPNEy3EnqCiH/OW\n8v0IMC32CeGrX7mGbU+MzlsCAwEAAQ==\n-----END PUBLIC KEY-----`;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9jb25zdGFudHMuanM/YmVkOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBVUkwgdG8gdGhlIENvaW5iYXNlIENEUCBBUEkgZXJyb3IgZG9jcyBwYWdlLlxuICovXG5leHBvcnQgY29uc3QgRVJST1JfRE9DU19QQUdFX1VSTCA9IFwiaHR0cHM6Ly9kb2NzLmNkcC5jb2luYmFzZS5jb20vYXBpLXJlZmVyZW5jZS92Mi9lcnJvcnNcIjtcbi8qKlxuICogVGhlIHB1YmxpYyBSU0Ega2V5IHVzZWQgdG8gZW5jcnlwdCB0aGUgcHJpdmF0ZSBrZXkgd2hlbiBpbXBvcnRpbmcgYW4gRVZNIG9yIFNvbGFuYSBhY2NvdW50LlxuICovXG5leHBvcnQgY29uc3QgSW1wb3J0QWNjb3VudFB1YmxpY1JTQUtleSA9IGAtLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxuTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUEyRnh5ZGdtL3J5WWswSWV4UUl1TFxuOURLeWlJazJXbVMzNkFaODNhOVowUVg1M3FkdmVnMDhiMDVnMVFyK28rQ09vWU9UL0ZEaThhblJHQXM3ckl5U1xudWlncmpIUjZWcm1Gam5HcnJUcjNNSU53QzljWVFGSHdFVDhZVkdScStCQjNpRlRCMWtJYjlYSi92VDJzazF4UFxuaEo2SmloRXdTbDREZ2JlVmpxdzU5d1lxck5nMzU1b2E4RWRGcWttZkdVMnRwYk01NkY4aXYxRitzaHdrR28zeVxuR2hXL1VPUTVPTGF1WHZzcW84cmFud3NLK2xxRmJsTEVNbE50bjFWU0plTzJ2TXhyeWVLRnJZMm9iOFZxR2NoQ1xuZnRQSmlMV3MyRHU2anV3NEMxck9Xd1NNbFh6WjZjTk1Ia3hkVGNFSE1yM0MyVEVIZ3pqWlk0MXdoTXdOVEI4cVxuL3B4WG5JYkg3N2NhYXZpUnM0Ui9QT2U4Y1Nzem5hbFhqODVMVUx2RldPSUhwMHcrakVZU2lpOVJwOVh0SFdBSFxubnJLL08vU1ZEdFQxb2hwMkYrWmcxbW9qVGdLZkxPeUdkT1VYVGk5NW5hRFR1Rzc3MHJTakhkTDgwdEpCejFGZFxuKzFwekdUR1hHSExaUUxYNVlabTVpdXkyY2ViV2ZGMDlWaklvQ0lsREIyKyt0cjRNK08wWjFYMVpFMEo1QWNrcVxuck9sdUFGYWxhS3lueUgzS015UmcrTnVMbWlidTVPbWNNakNMSzNENFgxWUxpTjJPSzgvYmJwRUw4Sllyb0R3YlxuRVhJVVc1bUdTMDZZeGZTVXN4SHpMOVRqMDArR01tL0d2bDArNC8rVm44SVhWSGpRT1NQTkV5M0VucUNpSC9PV1xuOHYwSU1DMzJDZUdyWDdtR2JVK016bHNDQXdFQUFRPT1cbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLWA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js":
/*!*******************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/errors.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   UserInputValidationError: () => (/* binding */ UserInputValidationError)\n/* harmony export */ });\n/**\n * TimeoutError is thrown when an operation times out.\n */\nclass TimeoutError extends Error {\n    /**\n     * Initializes a new TimeoutError instance.\n     *\n     * @param message - The error message.\n     */\n    constructor(message = \"Timeout Error\") {\n        super(message);\n        this.name = \"TimeoutError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, TimeoutError);\n        }\n    }\n}\n/**\n * UserInputValidationError is thrown when validation of a user-supplied input fails.\n */\nclass UserInputValidationError extends Error {\n    /**\n     * Initializes a new UserInputValidationError instance.\n     *\n     * @param message - The user input validation error message.\n     */\n    constructor(message) {\n        super(message);\n        this.name = \"UserInputValidationError\";\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, UserInputValidationError);\n        }\n    }\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL2Vycm9ycy5qcz83NWM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGltZW91dEVycm9yIGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiB0aW1lcyBvdXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYSBuZXcgVGltZW91dEVycm9yIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlID0gXCJUaW1lb3V0IEVycm9yXCIpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiVGltZW91dEVycm9yXCI7XG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgVGltZW91dEVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVXNlcklucHV0VmFsaWRhdGlvbkVycm9yIGlzIHRocm93biB3aGVuIHZhbGlkYXRpb24gb2YgYSB1c2VyLXN1cHBsaWVkIGlucHV0IGZhaWxzLlxuICovXG5leHBvcnQgY2xhc3MgVXNlcklucHV0VmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgbmV3IFVzZXJJbnB1dFZhbGlkYXRpb25FcnJvciBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIHVzZXIgaW5wdXQgdmFsaWRhdGlvbiBlcnJvciBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiVXNlcklucHV0VmFsaWRhdGlvbkVycm9yXCI7XG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgVXNlcklucHV0VmFsaWRhdGlvbkVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cdpApiClient: () => (/* binding */ cdpApiClient),\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   configure: () => (/* binding */ configure)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios-retry */ \"(ssr)/./node_modules/axios-retry/dist/esm/index.js\");\n/* harmony import */ var _auth_hooks_axios_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../auth/hooks/axios/index.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/auth/hooks/axios/withAuth.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/constants.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/errors.js\");\n// eslint-disable-next-line import/no-named-as-default\n\n\n\n\n\nlet axiosInstance;\nlet config = undefined;\n/**\n * Configures the CDP client with the given options.\n *\n * @param {CdpOptions} options - The CDP options.\n */\nconst configure = (options) => {\n    const baseURL = options.basePath || \"https://api.cdp.coinbase.com/platform\";\n    config = {\n        ...options,\n        basePath: baseURL,\n    };\n    axiosInstance = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n        baseURL,\n    });\n    (0,axios_retry__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(axiosInstance, {\n        retryDelay: axios_retry__WEBPACK_IMPORTED_MODULE_0__.exponentialDelay,\n    });\n    axiosInstance = (0,_auth_hooks_axios_index_js__WEBPACK_IMPORTED_MODULE_2__.withAuth)(axiosInstance, {\n        apiKeyId: options.apiKeyId,\n        apiKeySecret: options.apiKeySecret,\n        source: options.source || \"sdk-openapi-client\",\n        sourceVersion: options.sourceVersion,\n        walletSecret: options.walletSecret,\n        expiresIn: options.expiresIn,\n        debug: options.debugging,\n    });\n};\n/**\n * Adds an idempotency key to request config if provided\n *\n * @param config - The Axios request configuration.\n * @param idempotencyKey - The idempotency key.\n * @returns The Axios request configuration with the idempotency key.\n */\nconst addIdempotencyKey = (config, idempotencyKey) => {\n    if (!idempotencyKey) {\n        return config;\n    }\n    return {\n        ...config,\n        headers: {\n            ...(config.headers || {}),\n            \"X-Idempotency-Key\": idempotencyKey,\n        },\n    };\n};\n/**\n * Mutates the given Axios request configuration to add the CDP API key signature\n * to the request headers.\n *\n * @param {AxiosRequestConfig} config - The Axios request configuration.\n * @param idempotencyKey - The idempotency key.\n * @returns {Promise<T>} A promise that resolves to the response data.\n * @throws {APIError} If the request fails.\n */\nconst cdpApiClient = async (config, idempotencyKey) => {\n    validateCall(config);\n    // Add idempotency key to the request headers if provided\n    const configWithIdempotencyKey = addIdempotencyKey(config, idempotencyKey);\n    try {\n        const response = await axiosInstance(configWithIdempotencyKey);\n        return response.data;\n    }\n    catch (error) {\n        // eslint-disable-next-line import/no-named-as-default-member\n        if (axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(error) && !error.response) {\n            // Network-level errors (no response received)\n            const errorMessage = (error.message || \"\").toLowerCase();\n            const errorCode = error.code?.toLowerCase();\n            // Categorize network errors based on error messages and codes\n            if (errorCode === \"econnrefused\" || errorMessage.includes(\"connection refused\")) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.NetworkError(\"network_connection_failed\", \"Unable to connect to CDP service. The service may be unavailable.\", { code: error.code, message: error.message, retryable: true }, error.cause);\n            }\n            else if (errorCode === \"etimedout\" ||\n                errorCode === \"econnaborted\" ||\n                errorMessage.includes(\"timeout\")) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.NetworkError(\"network_timeout\", \"Request timed out. Please try again.\", { code: error.code, message: error.message, retryable: true }, error.cause);\n            }\n            else if (errorCode === \"enotfound\" || errorMessage.includes(\"getaddrinfo\")) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.NetworkError(\"network_dns_failure\", \"DNS resolution failed. Please check your network connection.\", { code: error.code, message: error.message, retryable: false }, error.cause);\n            }\n            else if (errorMessage.includes(\"network error\") || errorMessage.includes(\"econnreset\")) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.NetworkError(\"network_connection_failed\", \"Network error occurred. Please check your connection and try again.\", { code: error.code, message: error.message, retryable: true }, error.cause);\n            }\n            else {\n                // Generic network error\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.NetworkError(\"unknown\", error.cause instanceof Error ? error.cause.message : error.message, { code: error.code, message: error.message, retryable: true }, error.cause);\n            }\n        }\n        // eslint-disable-next-line import/no-named-as-default-member\n        if (axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isAxiosError(error) && error.response) {\n            if ((0,_errors_js__WEBPACK_IMPORTED_MODULE_3__.isOpenAPIError)(error.response.data)) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.APIError(error.response.status, error.response.data.errorType, error.response.data.errorMessage, error.response.data.correlationId, error.response.data.errorLink, error.cause);\n            }\n            else {\n                const statusCode = error.response.status;\n                const responseData = error.response.data;\n                // Check for gateway-level errors that might indicate network issues\n                const isGatewayError = responseData &&\n                    typeof responseData === \"string\" &&\n                    (responseData.toLowerCase().includes(\"forbidden\") ||\n                        responseData.toLowerCase().includes(\"ip\") ||\n                        responseData.toLowerCase().includes(\"blocked\") ||\n                        responseData.toLowerCase().includes(\"gateway\"));\n                switch (statusCode) {\n                    case 401:\n                        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.APIError(statusCode, \"unauthorized\", \"Unauthorized.\", undefined, `${_constants_js__WEBPACK_IMPORTED_MODULE_4__.ERROR_DOCS_PAGE_URL}#unauthorized`, error.cause);\n                    case 403:\n                        // Special handling for IP blocklist and other gateway-level 403s\n                        if (isGatewayError) {\n                            throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.NetworkError(\"network_ip_blocked\", \"Access denied. Your IP address may be blocked or restricted.\", {\n                                code: \"IP_BLOCKED\",\n                                message: typeof responseData === \"string\" ? responseData : JSON.stringify(responseData),\n                                retryable: false,\n                            }, error.cause);\n                        }\n                        // Regular 403 forbidden error\n                        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.APIError(statusCode, \"unauthorized\", \"Forbidden. You don't have permission to access this resource.\", undefined, `${_constants_js__WEBPACK_IMPORTED_MODULE_4__.ERROR_DOCS_PAGE_URL}#forbidden`, error.cause);\n                    case 404:\n                        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.APIError(statusCode, \"not_found\", \"API not found.\", undefined, `${_constants_js__WEBPACK_IMPORTED_MODULE_4__.ERROR_DOCS_PAGE_URL}#not_found`, error.cause);\n                    case 502:\n                        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.APIError(statusCode, \"bad_gateway\", \"Bad gateway.\", undefined, `${_constants_js__WEBPACK_IMPORTED_MODULE_4__.ERROR_DOCS_PAGE_URL}`, error.cause);\n                    case 503:\n                        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.APIError(statusCode, \"service_unavailable\", \"Service unavailable. Please try again later.\", undefined, `${_constants_js__WEBPACK_IMPORTED_MODULE_4__.ERROR_DOCS_PAGE_URL}`, error.cause);\n                    default: {\n                        let errorText = \"\";\n                        if (error.response.data) {\n                            try {\n                                errorText = JSON.stringify(error.response.data);\n                            }\n                            catch {\n                                errorText = String(error.response.data);\n                            }\n                        }\n                        const errorMessage = errorText\n                            ? `An unexpected error occurred: ${errorText}`\n                            : \"An unexpected error occurred.\";\n                        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.APIError(statusCode, \"unexpected_error\", errorMessage, undefined, `${_constants_js__WEBPACK_IMPORTED_MODULE_4__.ERROR_DOCS_PAGE_URL}`, error.cause);\n                    }\n                }\n            }\n        }\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.UnknownError(\"Something went wrong. Please reach out at https://discord.com/channels/1220414409550336183/1271495764580896789 for help.\", error instanceof Error ? error : undefined);\n    }\n};\n/**\n * Validates the call to the cdpApiClient.\n *\n * @param {AxiosRequestConfig} config - The Axios request configuration.\n * @throws {Error} If the call is not valid.\n */\nconst validateCall = (config) => {\n    if (!axiosInstance.getUri() || axiosInstance.getUri() === \"\") {\n        throw new Error(\"CDP client URI not configured. Call configure() first.\");\n    }\n    if (!config.url || config.url === \"\") {\n        throw new Error(\"AxiosRequestConfig URL is empty. This should never happen.\");\n    }\n    if (!config.method || config.method === \"\") {\n        throw new Error(\"AxiosRequestConfig method is empty. This should never happen.\");\n    }\n};\n//# sourceMappingURL=cdpApiClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/errors.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/errors.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   UnknownApiError: () => (/* binding */ UnknownApiError),\n/* harmony export */   UnknownError: () => (/* binding */ UnknownError),\n/* harmony export */   isOpenAPIError: () => (/* binding */ isOpenAPIError)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/constants.js\");\n\n/**\n * Extended API error that encompasses both OpenAPI errors and other API-related errors\n */\nclass APIError extends Error {\n    statusCode;\n    errorType;\n    errorMessage;\n    correlationId;\n    errorLink;\n    /**\n     * Constructor for the APIError class\n     *\n     * @param statusCode - The HTTP status code\n     * @param errorType - The type of error\n     * @param errorMessage - The error message\n     * @param correlationId - The correlation ID\n     * @param errorLink - URL to documentation about this error\n     * @param cause - The cause of the error\n     */\n    constructor(statusCode, errorType, errorMessage, correlationId, errorLink, cause) {\n        super(errorMessage, { cause });\n        this.name = \"APIError\";\n        this.statusCode = statusCode;\n        this.errorType = errorType;\n        this.errorMessage = errorMessage;\n        // Only set correlationId if it's defined\n        if (correlationId !== undefined) {\n            this.correlationId = correlationId;\n        }\n        // Only set errorLink if it's defined\n        if (errorLink !== undefined) {\n            this.errorLink = errorLink;\n        }\n    }\n    /**\n     * Convert the error to a JSON object, excluding undefined properties\n     *\n     * @returns The error as a JSON object\n     */\n    toJSON() {\n        return {\n            name: this.name,\n            statusCode: this.statusCode,\n            errorType: this.errorType,\n            errorMessage: this.errorMessage,\n            ...(this.correlationId && { correlationId: this.correlationId }),\n            ...(this.errorLink && { errorLink: this.errorLink }),\n        };\n    }\n}\n/**\n * Error thrown when an Axios request is made but no response is received\n */\nclass UnknownApiError extends APIError {\n    /**\n     * Constructor for the UnknownApiError class\n     *\n     * @param errorType - The type of error\n     * @param errorMessage - The error message\n     * @param cause - The cause of the error\n     */\n    constructor(errorType, errorMessage, cause) {\n        super(0, errorType, errorMessage, undefined, undefined, cause);\n        this.name = \"UnknownApiError\";\n    }\n}\n/**\n * Error thrown when an error is not known\n */\nclass UnknownError extends Error {\n    /**\n     * Constructor for the UnknownError class\n     *\n     * @param message - The error message\n     * @param cause - The cause of the error\n     */\n    constructor(message, cause) {\n        super(message, { cause });\n        this.name = \"UnknownError\";\n    }\n}\n/**\n * Error thrown when a network-level failure occurs before reaching the CDP service\n * This includes gateway errors, IP blocklist rejections, DNS failures, etc.\n */\nclass NetworkError extends APIError {\n    networkDetails;\n    /**\n     * Constructor for the NetworkError class\n     *\n     * @param errorType - The type of network error\n     * @param errorMessage - The error message\n     * @param networkDetails - Additional network error details\n     * @param networkDetails.code - The error code\n     * @param networkDetails.message - The error message\n     * @param networkDetails.retryable - Whether the error is retryable\n     * @param cause - The cause of the error\n     */\n    constructor(errorType, errorMessage, networkDetails, cause) {\n        super(0, // Status code 0 indicates no response was received\n        errorType, errorMessage, undefined, `${_constants_js__WEBPACK_IMPORTED_MODULE_0__.ERROR_DOCS_PAGE_URL}#network-errors`, cause);\n        this.name = \"NetworkError\";\n        this.networkDetails = networkDetails;\n    }\n    /**\n     * Convert the error to a JSON object, including network details\n     *\n     * @returns The error as a JSON object\n     */\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            ...(this.networkDetails && { networkDetails: this.networkDetails }),\n        };\n    }\n}\n/**\n * Type guard to check if an object is an OpenAPIError\n *\n * @param obj - The object to check\n * @returns True if the object is an OpenAPIError\n */\nfunction isOpenAPIError(obj) {\n    return (obj !== null &&\n        typeof obj === \"object\" &&\n        \"errorType\" in obj &&\n        typeof obj.errorType === \"string\" &&\n        \"errorMessage\" in obj &&\n        typeof obj.errorMessage === \"string\");\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsT0FBTztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsbUNBQW1DO0FBQzNFLG9DQUFvQywyQkFBMkI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLE9BQU87QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsOERBQW1CLENBQUM7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxxQ0FBcUM7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL29wZW5hcGktY2xpZW50L2Vycm9ycy5qcz9jN2ZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVSUk9SX0RPQ1NfUEFHRV9VUkwgfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG4vKipcbiAqIEV4dGVuZGVkIEFQSSBlcnJvciB0aGF0IGVuY29tcGFzc2VzIGJvdGggT3BlbkFQSSBlcnJvcnMgYW5kIG90aGVyIEFQSS1yZWxhdGVkIGVycm9yc1xuICovXG5leHBvcnQgY2xhc3MgQVBJRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgc3RhdHVzQ29kZTtcbiAgICBlcnJvclR5cGU7XG4gICAgZXJyb3JNZXNzYWdlO1xuICAgIGNvcnJlbGF0aW9uSWQ7XG4gICAgZXJyb3JMaW5rO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIGZvciB0aGUgQVBJRXJyb3IgY2xhc3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdGF0dXNDb2RlIC0gVGhlIEhUVFAgc3RhdHVzIGNvZGVcbiAgICAgKiBAcGFyYW0gZXJyb3JUeXBlIC0gVGhlIHR5cGUgb2YgZXJyb3JcbiAgICAgKiBAcGFyYW0gZXJyb3JNZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gY29ycmVsYXRpb25JZCAtIFRoZSBjb3JyZWxhdGlvbiBJRFxuICAgICAqIEBwYXJhbSBlcnJvckxpbmsgLSBVUkwgdG8gZG9jdW1lbnRhdGlvbiBhYm91dCB0aGlzIGVycm9yXG4gICAgICogQHBhcmFtIGNhdXNlIC0gVGhlIGNhdXNlIG9mIHRoZSBlcnJvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN0YXR1c0NvZGUsIGVycm9yVHlwZSwgZXJyb3JNZXNzYWdlLCBjb3JyZWxhdGlvbklkLCBlcnJvckxpbmssIGNhdXNlKSB7XG4gICAgICAgIHN1cGVyKGVycm9yTWVzc2FnZSwgeyBjYXVzZSB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBUElFcnJvclwiO1xuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgICAgICB0aGlzLmVycm9yVHlwZSA9IGVycm9yVHlwZTtcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XG4gICAgICAgIC8vIE9ubHkgc2V0IGNvcnJlbGF0aW9uSWQgaWYgaXQncyBkZWZpbmVkXG4gICAgICAgIGlmIChjb3JyZWxhdGlvbklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29ycmVsYXRpb25JZCA9IGNvcnJlbGF0aW9uSWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT25seSBzZXQgZXJyb3JMaW5rIGlmIGl0J3MgZGVmaW5lZFxuICAgICAgICBpZiAoZXJyb3JMaW5rICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JMaW5rID0gZXJyb3JMaW5rO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgdGhlIGVycm9yIHRvIGEgSlNPTiBvYmplY3QsIGV4Y2x1ZGluZyB1bmRlZmluZWQgcHJvcGVydGllc1xuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGVycm9yIGFzIGEgSlNPTiBvYmplY3RcbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiB0aGlzLnN0YXR1c0NvZGUsXG4gICAgICAgICAgICBlcnJvclR5cGU6IHRoaXMuZXJyb3JUeXBlLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiB0aGlzLmVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgIC4uLih0aGlzLmNvcnJlbGF0aW9uSWQgJiYgeyBjb3JyZWxhdGlvbklkOiB0aGlzLmNvcnJlbGF0aW9uSWQgfSksXG4gICAgICAgICAgICAuLi4odGhpcy5lcnJvckxpbmsgJiYgeyBlcnJvckxpbms6IHRoaXMuZXJyb3JMaW5rIH0pLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYW4gQXhpb3MgcmVxdWVzdCBpcyBtYWRlIGJ1dCBubyByZXNwb25zZSBpcyByZWNlaXZlZFxuICovXG5leHBvcnQgY2xhc3MgVW5rbm93bkFwaUVycm9yIGV4dGVuZHMgQVBJRXJyb3Ige1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIGZvciB0aGUgVW5rbm93bkFwaUVycm9yIGNsYXNzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXJyb3JUeXBlIC0gVGhlIHR5cGUgb2YgZXJyb3JcbiAgICAgKiBAcGFyYW0gZXJyb3JNZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gY2F1c2UgLSBUaGUgY2F1c2Ugb2YgdGhlIGVycm9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXJyb3JUeXBlLCBlcnJvck1lc3NhZ2UsIGNhdXNlKSB7XG4gICAgICAgIHN1cGVyKDAsIGVycm9yVHlwZSwgZXJyb3JNZXNzYWdlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY2F1c2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlVua25vd25BcGlFcnJvclwiO1xuICAgIH1cbn1cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYW4gZXJyb3IgaXMgbm90IGtub3duXG4gKi9cbmV4cG9ydCBjbGFzcyBVbmtub3duRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgZm9yIHRoZSBVbmtub3duRXJyb3IgY2xhc3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIGVycm9yIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gY2F1c2UgLSBUaGUgY2F1c2Ugb2YgdGhlIGVycm9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgY2F1c2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgeyBjYXVzZSB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJVbmtub3duRXJyb3JcIjtcbiAgICB9XG59XG4vKipcbiAqIEVycm9yIHRocm93biB3aGVuIGEgbmV0d29yay1sZXZlbCBmYWlsdXJlIG9jY3VycyBiZWZvcmUgcmVhY2hpbmcgdGhlIENEUCBzZXJ2aWNlXG4gKiBUaGlzIGluY2x1ZGVzIGdhdGV3YXkgZXJyb3JzLCBJUCBibG9ja2xpc3QgcmVqZWN0aW9ucywgRE5TIGZhaWx1cmVzLCBldGMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOZXR3b3JrRXJyb3IgZXh0ZW5kcyBBUElFcnJvciB7XG4gICAgbmV0d29ya0RldGFpbHM7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgZm9yIHRoZSBOZXR3b3JrRXJyb3IgY2xhc3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlcnJvclR5cGUgLSBUaGUgdHlwZSBvZiBuZXR3b3JrIGVycm9yXG4gICAgICogQHBhcmFtIGVycm9yTWVzc2FnZSAtIFRoZSBlcnJvciBtZXNzYWdlXG4gICAgICogQHBhcmFtIG5ldHdvcmtEZXRhaWxzIC0gQWRkaXRpb25hbCBuZXR3b3JrIGVycm9yIGRldGFpbHNcbiAgICAgKiBAcGFyYW0gbmV0d29ya0RldGFpbHMuY29kZSAtIFRoZSBlcnJvciBjb2RlXG4gICAgICogQHBhcmFtIG5ldHdvcmtEZXRhaWxzLm1lc3NhZ2UgLSBUaGUgZXJyb3IgbWVzc2FnZVxuICAgICAqIEBwYXJhbSBuZXR3b3JrRGV0YWlscy5yZXRyeWFibGUgLSBXaGV0aGVyIHRoZSBlcnJvciBpcyByZXRyeWFibGVcbiAgICAgKiBAcGFyYW0gY2F1c2UgLSBUaGUgY2F1c2Ugb2YgdGhlIGVycm9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXJyb3JUeXBlLCBlcnJvck1lc3NhZ2UsIG5ldHdvcmtEZXRhaWxzLCBjYXVzZSkge1xuICAgICAgICBzdXBlcigwLCAvLyBTdGF0dXMgY29kZSAwIGluZGljYXRlcyBubyByZXNwb25zZSB3YXMgcmVjZWl2ZWRcbiAgICAgICAgZXJyb3JUeXBlLCBlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgYCR7RVJST1JfRE9DU19QQUdFX1VSTH0jbmV0d29yay1lcnJvcnNgLCBjYXVzZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiTmV0d29ya0Vycm9yXCI7XG4gICAgICAgIHRoaXMubmV0d29ya0RldGFpbHMgPSBuZXR3b3JrRGV0YWlscztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCB0aGUgZXJyb3IgdG8gYSBKU09OIG9iamVjdCwgaW5jbHVkaW5nIG5ldHdvcmsgZGV0YWlsc1xuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGVycm9yIGFzIGEgSlNPTiBvYmplY3RcbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIC4uLih0aGlzLm5ldHdvcmtEZXRhaWxzICYmIHsgbmV0d29ya0RldGFpbHM6IHRoaXMubmV0d29ya0RldGFpbHMgfSksXG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiBUeXBlIGd1YXJkIHRvIGNoZWNrIGlmIGFuIG9iamVjdCBpcyBhbiBPcGVuQVBJRXJyb3JcbiAqXG4gKiBAcGFyYW0gb2JqIC0gVGhlIG9iamVjdCB0byBjaGVja1xuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGFuIE9wZW5BUElFcnJvclxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPcGVuQVBJRXJyb3Iob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBcImVycm9yVHlwZVwiIGluIG9iaiAmJlxuICAgICAgICB0eXBlb2Ygb2JqLmVycm9yVHlwZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICBcImVycm9yTWVzc2FnZVwiIGluIG9iaiAmJlxuICAgICAgICB0eXBlb2Ygb2JqLmVycm9yTWVzc2FnZSA9PT0gXCJzdHJpbmdcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbiFunctionType: () => (/* binding */ AbiFunctionType),\n/* harmony export */   AbiInputType: () => (/* binding */ AbiInputType),\n/* harmony export */   AbiStateMutability: () => (/* binding */ AbiStateMutability),\n/* harmony export */   CreatePaymentTransferQuoteBodySourceType: () => (/* binding */ CreatePaymentTransferQuoteBodySourceType),\n/* harmony export */   CreatePaymentTransferQuoteBodyTargetType: () => (/* binding */ CreatePaymentTransferQuoteBodyTargetType),\n/* harmony export */   CreatePolicyBodyScope: () => (/* binding */ CreatePolicyBodyScope),\n/* harmony export */   DeveloperJWTAuthenticationType: () => (/* binding */ DeveloperJWTAuthenticationType),\n/* harmony export */   EmailAuthenticationType: () => (/* binding */ EmailAuthenticationType),\n/* harmony export */   ErrorType: () => (/* binding */ ErrorType),\n/* harmony export */   EthValueCriterionOperator: () => (/* binding */ EthValueCriterionOperator),\n/* harmony export */   EthValueCriterionType: () => (/* binding */ EthValueCriterionType),\n/* harmony export */   EvmAddressCriterionOperator: () => (/* binding */ EvmAddressCriterionOperator),\n/* harmony export */   EvmAddressCriterionType: () => (/* binding */ EvmAddressCriterionType),\n/* harmony export */   EvmDataCriterionType: () => (/* binding */ EvmDataCriterionType),\n/* harmony export */   EvmDataParameterConditionListOperator: () => (/* binding */ EvmDataParameterConditionListOperator),\n/* harmony export */   EvmDataParameterConditionOperator: () => (/* binding */ EvmDataParameterConditionOperator),\n/* harmony export */   EvmMessageCriterionType: () => (/* binding */ EvmMessageCriterionType),\n/* harmony export */   EvmNetworkCriterionNetworksItem: () => (/* binding */ EvmNetworkCriterionNetworksItem),\n/* harmony export */   EvmNetworkCriterionOperator: () => (/* binding */ EvmNetworkCriterionOperator),\n/* harmony export */   EvmNetworkCriterionType: () => (/* binding */ EvmNetworkCriterionType),\n/* harmony export */   EvmSwapsNetwork: () => (/* binding */ EvmSwapsNetwork),\n/* harmony export */   EvmTypedAddressConditionOperator: () => (/* binding */ EvmTypedAddressConditionOperator),\n/* harmony export */   EvmTypedNumericalConditionOperator: () => (/* binding */ EvmTypedNumericalConditionOperator),\n/* harmony export */   EvmUserOperationNetwork: () => (/* binding */ EvmUserOperationNetwork),\n/* harmony export */   EvmUserOperationStatus: () => (/* binding */ EvmUserOperationStatus),\n/* harmony export */   FeeType: () => (/* binding */ FeeType),\n/* harmony export */   KnownAbiType: () => (/* binding */ KnownAbiType),\n/* harmony export */   KnownIdlType: () => (/* binding */ KnownIdlType),\n/* harmony export */   ListEvmTokenBalancesNetwork: () => (/* binding */ ListEvmTokenBalancesNetwork),\n/* harmony export */   ListPoliciesScope: () => (/* binding */ ListPoliciesScope),\n/* harmony export */   ListSolanaTokenBalancesNetwork: () => (/* binding */ ListSolanaTokenBalancesNetwork),\n/* harmony export */   MintAddressCriterionOperator: () => (/* binding */ MintAddressCriterionOperator),\n/* harmony export */   MintAddressCriterionType: () => (/* binding */ MintAddressCriterionType),\n/* harmony export */   NetUSDChangeCriterionOperator: () => (/* binding */ NetUSDChangeCriterionOperator),\n/* harmony export */   NetUSDChangeCriterionType: () => (/* binding */ NetUSDChangeCriterionType),\n/* harmony export */   OnchainDataResultSchemaColumnsItemType: () => (/* binding */ OnchainDataResultSchemaColumnsItemType),\n/* harmony export */   OnrampOrderFeeType: () => (/* binding */ OnrampOrderFeeType),\n/* harmony export */   OnrampOrderPaymentMethodTypeId: () => (/* binding */ OnrampOrderPaymentMethodTypeId),\n/* harmony export */   OnrampOrderStatus: () => (/* binding */ OnrampOrderStatus),\n/* harmony export */   OnrampPaymentLinkType: () => (/* binding */ OnrampPaymentLinkType),\n/* harmony export */   OnrampQuotePaymentMethodTypeId: () => (/* binding */ OnrampQuotePaymentMethodTypeId),\n/* harmony export */   PaymentMethodType: () => (/* binding */ PaymentMethodType),\n/* harmony export */   PaymentRailAction: () => (/* binding */ PaymentRailAction),\n/* harmony export */   PolicyScope: () => (/* binding */ PolicyScope),\n/* harmony export */   PrepareUserOperationRuleAction: () => (/* binding */ PrepareUserOperationRuleAction),\n/* harmony export */   PrepareUserOperationRuleOperation: () => (/* binding */ PrepareUserOperationRuleOperation),\n/* harmony export */   ProgramIdCriterionOperator: () => (/* binding */ ProgramIdCriterionOperator),\n/* harmony export */   ProgramIdCriterionType: () => (/* binding */ ProgramIdCriterionType),\n/* harmony export */   RequestEvmFaucetBodyNetwork: () => (/* binding */ RequestEvmFaucetBodyNetwork),\n/* harmony export */   RequestEvmFaucetBodyToken: () => (/* binding */ RequestEvmFaucetBodyToken),\n/* harmony export */   RequestSolanaFaucetBodyToken: () => (/* binding */ RequestSolanaFaucetBodyToken),\n/* harmony export */   SendEvmTransactionBodyNetwork: () => (/* binding */ SendEvmTransactionBodyNetwork),\n/* harmony export */   SendEvmTransactionRuleAction: () => (/* binding */ SendEvmTransactionRuleAction),\n/* harmony export */   SendEvmTransactionRuleOperation: () => (/* binding */ SendEvmTransactionRuleOperation),\n/* harmony export */   SendSolTransactionRuleAction: () => (/* binding */ SendSolTransactionRuleAction),\n/* harmony export */   SendSolTransactionRuleOperation: () => (/* binding */ SendSolTransactionRuleOperation),\n/* harmony export */   SendSolanaTransactionBodyNetwork: () => (/* binding */ SendSolanaTransactionBodyNetwork),\n/* harmony export */   SendUserOperationRuleAction: () => (/* binding */ SendUserOperationRuleAction),\n/* harmony export */   SendUserOperationRuleOperation: () => (/* binding */ SendUserOperationRuleOperation),\n/* harmony export */   SignEvmHashRuleAction: () => (/* binding */ SignEvmHashRuleAction),\n/* harmony export */   SignEvmHashRuleOperation: () => (/* binding */ SignEvmHashRuleOperation),\n/* harmony export */   SignEvmMessageRuleAction: () => (/* binding */ SignEvmMessageRuleAction),\n/* harmony export */   SignEvmMessageRuleOperation: () => (/* binding */ SignEvmMessageRuleOperation),\n/* harmony export */   SignEvmTransactionRuleAction: () => (/* binding */ SignEvmTransactionRuleAction),\n/* harmony export */   SignEvmTransactionRuleOperation: () => (/* binding */ SignEvmTransactionRuleOperation),\n/* harmony export */   SignEvmTypedDataFieldCriterionType: () => (/* binding */ SignEvmTypedDataFieldCriterionType),\n/* harmony export */   SignEvmTypedDataRuleAction: () => (/* binding */ SignEvmTypedDataRuleAction),\n/* harmony export */   SignEvmTypedDataRuleOperation: () => (/* binding */ SignEvmTypedDataRuleOperation),\n/* harmony export */   SignEvmTypedDataVerifyingContractCriterionOperator: () => (/* binding */ SignEvmTypedDataVerifyingContractCriterionOperator),\n/* harmony export */   SignEvmTypedDataVerifyingContractCriterionType: () => (/* binding */ SignEvmTypedDataVerifyingContractCriterionType),\n/* harmony export */   SignSolMessageRuleAction: () => (/* binding */ SignSolMessageRuleAction),\n/* harmony export */   SignSolMessageRuleOperation: () => (/* binding */ SignSolMessageRuleOperation),\n/* harmony export */   SignSolTransactionRuleAction: () => (/* binding */ SignSolTransactionRuleAction),\n/* harmony export */   SignSolTransactionRuleOperation: () => (/* binding */ SignSolTransactionRuleOperation),\n/* harmony export */   SmsAuthenticationType: () => (/* binding */ SmsAuthenticationType),\n/* harmony export */   SolAddressCriterionOperator: () => (/* binding */ SolAddressCriterionOperator),\n/* harmony export */   SolAddressCriterionType: () => (/* binding */ SolAddressCriterionType),\n/* harmony export */   SolDataCriterionType: () => (/* binding */ SolDataCriterionType),\n/* harmony export */   SolDataParameterConditionListOperator: () => (/* binding */ SolDataParameterConditionListOperator),\n/* harmony export */   SolDataParameterConditionOperator: () => (/* binding */ SolDataParameterConditionOperator),\n/* harmony export */   SolMessageCriterionType: () => (/* binding */ SolMessageCriterionType),\n/* harmony export */   SolNetworkCriterionNetworksItem: () => (/* binding */ SolNetworkCriterionNetworksItem),\n/* harmony export */   SolNetworkCriterionOperator: () => (/* binding */ SolNetworkCriterionOperator),\n/* harmony export */   SolNetworkCriterionType: () => (/* binding */ SolNetworkCriterionType),\n/* harmony export */   SolValueCriterionOperator: () => (/* binding */ SolValueCriterionOperator),\n/* harmony export */   SolValueCriterionType: () => (/* binding */ SolValueCriterionType),\n/* harmony export */   SpendPermissionNetwork: () => (/* binding */ SpendPermissionNetwork),\n/* harmony export */   SplAddressCriterionOperator: () => (/* binding */ SplAddressCriterionOperator),\n/* harmony export */   SplAddressCriterionType: () => (/* binding */ SplAddressCriterionType),\n/* harmony export */   SplValueCriterionOperator: () => (/* binding */ SplValueCriterionOperator),\n/* harmony export */   SplValueCriterionType: () => (/* binding */ SplValueCriterionType),\n/* harmony export */   TransferSourceType: () => (/* binding */ TransferSourceType),\n/* harmony export */   TransferStatus: () => (/* binding */ TransferStatus),\n/* harmony export */   TransferTargetType: () => (/* binding */ TransferTargetType),\n/* harmony export */   X402PaymentPayloadNetwork: () => (/* binding */ X402PaymentPayloadNetwork),\n/* harmony export */   X402PaymentPayloadScheme: () => (/* binding */ X402PaymentPayloadScheme),\n/* harmony export */   X402PaymentRequirementsNetwork: () => (/* binding */ X402PaymentRequirementsNetwork),\n/* harmony export */   X402PaymentRequirementsScheme: () => (/* binding */ X402PaymentRequirementsScheme),\n/* harmony export */   X402SettleErrorReason: () => (/* binding */ X402SettleErrorReason),\n/* harmony export */   X402SupportedPaymentKindNetwork: () => (/* binding */ X402SupportedPaymentKindNetwork),\n/* harmony export */   X402SupportedPaymentKindScheme: () => (/* binding */ X402SupportedPaymentKindScheme),\n/* harmony export */   X402VerifyInvalidReason: () => (/* binding */ X402VerifyInvalidReason),\n/* harmony export */   X402Version: () => (/* binding */ X402Version)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EmailAuthenticationType = {\n    email: \"email\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SmsAuthenticationType = {\n    sms: \"sms\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst DeveloperJWTAuthenticationType = {\n    jwt: \"jwt\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ErrorType = {\n    already_exists: \"already_exists\",\n    bad_gateway: \"bad_gateway\",\n    faucet_limit_exceeded: \"faucet_limit_exceeded\",\n    forbidden: \"forbidden\",\n    idempotency_error: \"idempotency_error\",\n    internal_server_error: \"internal_server_error\",\n    invalid_request: \"invalid_request\",\n    invalid_sql_query: \"invalid_sql_query\",\n    invalid_signature: \"invalid_signature\",\n    malformed_transaction: \"malformed_transaction\",\n    not_found: \"not_found\",\n    payment_method_required: \"payment_method_required\",\n    rate_limit_exceeded: \"rate_limit_exceeded\",\n    request_canceled: \"request_canceled\",\n    service_unavailable: \"service_unavailable\",\n    timed_out: \"timed_out\",\n    unauthorized: \"unauthorized\",\n    policy_violation: \"policy_violation\",\n    policy_in_use: \"policy_in_use\",\n    account_limit_exceeded: \"account_limit_exceeded\",\n    network_not_tradable: \"network_not_tradable\",\n    guest_permission_denied: \"guest_permission_denied\",\n    guest_region_forbidden: \"guest_region_forbidden\",\n    guest_transaction_limit: \"guest_transaction_limit\",\n    guest_transaction_count: \"guest_transaction_count\",\n    phone_number_verification_expired: \"phone_number_verification_expired\",\n    document_verification_failed: \"document_verification_failed\",\n    recipient_allowlist_violation: \"recipient_allowlist_violation\",\n    recipient_allowlist_pending: \"recipient_allowlist_pending\",\n    travel_rules_recipient_violation: \"travel_rules_recipient_violation\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmUserOperationNetwork = {\n    \"base-sepolia\": \"base-sepolia\",\n    base: \"base\",\n    arbitrum: \"arbitrum\",\n    optimism: \"optimism\",\n    zora: \"zora\",\n    polygon: \"polygon\",\n    bnb: \"bnb\",\n    avalanche: \"avalanche\",\n    ethereum: \"ethereum\",\n    \"ethereum-sepolia\": \"ethereum-sepolia\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmUserOperationStatus = {\n    pending: \"pending\",\n    signed: \"signed\",\n    broadcast: \"broadcast\",\n    complete: \"complete\",\n    dropped: \"dropped\",\n    failed: \"failed\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SpendPermissionNetwork = {\n    base: \"base\",\n    \"base-sepolia\": \"base-sepolia\",\n    ethereum: \"ethereum\",\n    \"ethereum-sepolia\": \"ethereum-sepolia\",\n    optimism: \"optimism\",\n    arbitrum: \"arbitrum\",\n    avalanche: \"avalanche\",\n    polygon: \"polygon\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmSwapsNetwork = {\n    base: \"base\",\n    ethereum: \"ethereum\",\n    arbitrum: \"arbitrum\",\n    optimism: \"optimism\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ListEvmTokenBalancesNetwork = {\n    base: \"base\",\n    \"base-sepolia\": \"base-sepolia\",\n    ethereum: \"ethereum\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EthValueCriterionType = {\n    ethValue: \"ethValue\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EthValueCriterionOperator = {\n    \">\": \">\",\n    \">=\": \">=\",\n    \"<\": \"<\",\n    \"<=\": \"<=\",\n    \"==\": \"==\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmAddressCriterionType = {\n    evmAddress: \"evmAddress\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmAddressCriterionOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst KnownAbiType = {\n    erc20: \"erc20\",\n    erc721: \"erc721\",\n    erc1155: \"erc1155\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AbiStateMutability = {\n    pure: \"pure\",\n    view: \"view\",\n    nonpayable: \"nonpayable\",\n    payable: \"payable\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AbiFunctionType = {\n    function: \"function\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst AbiInputType = {\n    constructor: \"constructor\",\n    error: \"error\",\n    event: \"event\",\n    fallback: \"fallback\",\n    receive: \"receive\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmDataParameterConditionOperator = {\n    \">\": \">\",\n    \">=\": \">=\",\n    \"<\": \"<\",\n    \"<=\": \"<=\",\n    \"==\": \"==\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmDataParameterConditionListOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmDataCriterionType = {\n    evmData: \"evmData\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst NetUSDChangeCriterionType = {\n    netUSDChange: \"netUSDChange\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst NetUSDChangeCriterionOperator = {\n    \">\": \">\",\n    \">=\": \">=\",\n    \"<\": \"<\",\n    \"<=\": \"<=\",\n    \"==\": \"==\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmTransactionRuleAction = {\n    reject: \"reject\",\n    accept: \"accept\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmTransactionRuleOperation = {\n    signEvmTransaction: \"signEvmTransaction\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmNetworkCriterionType = {\n    evmNetwork: \"evmNetwork\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmNetworkCriterionNetworksItem = {\n    \"base-sepolia\": \"base-sepolia\",\n    base: \"base\",\n    ethereum: \"ethereum\",\n    \"ethereum-sepolia\": \"ethereum-sepolia\",\n    avalanche: \"avalanche\",\n    polygon: \"polygon\",\n    optimism: \"optimism\",\n    arbitrum: \"arbitrum\",\n    zora: \"zora\",\n    bnb: \"bnb\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmNetworkCriterionOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SendEvmTransactionRuleAction = {\n    reject: \"reject\",\n    accept: \"accept\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SendEvmTransactionRuleOperation = {\n    sendEvmTransaction: \"sendEvmTransaction\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmMessageCriterionType = {\n    evmMessage: \"evmMessage\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmMessageRuleAction = {\n    reject: \"reject\",\n    accept: \"accept\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmMessageRuleOperation = {\n    signEvmMessage: \"signEvmMessage\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmTypedAddressConditionOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst EvmTypedNumericalConditionOperator = {\n    \">\": \">\",\n    \">=\": \">=\",\n    \"<\": \"<\",\n    \"<=\": \"<=\",\n    \"==\": \"==\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmTypedDataFieldCriterionType = {\n    evmTypedDataField: \"evmTypedDataField\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmTypedDataVerifyingContractCriterionType = {\n    evmTypedDataVerifyingContract: \"evmTypedDataVerifyingContract\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmTypedDataVerifyingContractCriterionOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmTypedDataRuleAction = {\n    reject: \"reject\",\n    accept: \"accept\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmTypedDataRuleOperation = {\n    signEvmTypedData: \"signEvmTypedData\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolAddressCriterionType = {\n    solAddress: \"solAddress\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolAddressCriterionOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolValueCriterionType = {\n    solValue: \"solValue\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolValueCriterionOperator = {\n    \">\": \">\",\n    \">=\": \">=\",\n    \"<\": \"<\",\n    \"<=\": \"<=\",\n    \"==\": \"==\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SplAddressCriterionType = {\n    splAddress: \"splAddress\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SplAddressCriterionOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SplValueCriterionType = {\n    splValue: \"splValue\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SplValueCriterionOperator = {\n    \">\": \">\",\n    \">=\": \">=\",\n    \"<\": \"<\",\n    \"<=\": \"<=\",\n    \"==\": \"==\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst MintAddressCriterionType = {\n    mintAddress: \"mintAddress\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst MintAddressCriterionOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst KnownIdlType = {\n    SystemProgram: \"SystemProgram\",\n    TokenProgram: \"TokenProgram\",\n    AssociatedTokenProgram: \"AssociatedTokenProgram\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolDataParameterConditionOperator = {\n    \">\": \">\",\n    \">=\": \">=\",\n    \"<\": \"<\",\n    \"<=\": \"<=\",\n    \"==\": \"==\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolDataParameterConditionListOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolDataCriterionType = {\n    solData: \"solData\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ProgramIdCriterionType = {\n    programId: \"programId\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ProgramIdCriterionOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignSolTransactionRuleAction = {\n    reject: \"reject\",\n    accept: \"accept\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignSolTransactionRuleOperation = {\n    signSolTransaction: \"signSolTransaction\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolNetworkCriterionType = {\n    solNetwork: \"solNetwork\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolNetworkCriterionNetworksItem = {\n    \"solana-devnet\": \"solana-devnet\",\n    solana: \"solana\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolNetworkCriterionOperator = {\n    in: \"in\",\n    not_in: \"not in\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SendSolTransactionRuleAction = {\n    reject: \"reject\",\n    accept: \"accept\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SendSolTransactionRuleOperation = {\n    sendSolTransaction: \"sendSolTransaction\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SolMessageCriterionType = {\n    solMessage: \"solMessage\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignSolMessageRuleAction = {\n    reject: \"reject\",\n    accept: \"accept\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignSolMessageRuleOperation = {\n    signSolMessage: \"signSolMessage\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmHashRuleAction = {\n    reject: \"reject\",\n    accept: \"accept\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SignEvmHashRuleOperation = {\n    signEvmHash: \"signEvmHash\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst PrepareUserOperationRuleAction = {\n    reject: \"reject\",\n    accept: \"accept\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst PrepareUserOperationRuleOperation = {\n    prepareUserOperation: \"prepareUserOperation\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SendUserOperationRuleAction = {\n    reject: \"reject\",\n    accept: \"accept\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SendUserOperationRuleOperation = {\n    sendUserOperation: \"sendUserOperation\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst PolicyScope = {\n    project: \"project\",\n    account: \"account\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ListSolanaTokenBalancesNetwork = {\n    solana: \"solana\",\n    \"solana-devnet\": \"solana-devnet\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst OnchainDataResultSchemaColumnsItemType = {\n    String: \"String\",\n    UInt8: \"UInt8\",\n    UInt16: \"UInt16\",\n    UInt32: \"UInt32\",\n    UInt64: \"UInt64\",\n    UInt128: \"UInt128\",\n    UInt256: \"UInt256\",\n    Int8: \"Int8\",\n    Int16: \"Int16\",\n    Int32: \"Int32\",\n    Int64: \"Int64\",\n    Int128: \"Int128\",\n    Int256: \"Int256\",\n    Float32: \"Float32\",\n    Float64: \"Float64\",\n    Bool: \"Bool\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTime64: \"DateTime64\",\n    UUID: \"UUID\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst X402Version = {\n    NUMBER_1: 1,\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst X402PaymentPayloadScheme = {\n    exact: \"exact\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst X402PaymentPayloadNetwork = {\n    \"base-sepolia\": \"base-sepolia\",\n    base: \"base\",\n    \"solana-devnet\": \"solana-devnet\",\n    solana: \"solana\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst X402PaymentRequirementsScheme = {\n    exact: \"exact\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst X402PaymentRequirementsNetwork = {\n    \"base-sepolia\": \"base-sepolia\",\n    base: \"base\",\n    \"solana-devnet\": \"solana-devnet\",\n    solana: \"solana\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst X402VerifyInvalidReason = {\n    insufficient_funds: \"insufficient_funds\",\n    invalid_scheme: \"invalid_scheme\",\n    invalid_network: \"invalid_network\",\n    invalid_x402_version: \"invalid_x402_version\",\n    invalid_payment_requirements: \"invalid_payment_requirements\",\n    invalid_payload: \"invalid_payload\",\n    invalid_exact_evm_payload_authorization_value: \"invalid_exact_evm_payload_authorization_value\",\n    invalid_exact_evm_payload_authorization_valid_after: \"invalid_exact_evm_payload_authorization_valid_after\",\n    invalid_exact_evm_payload_authorization_valid_before: \"invalid_exact_evm_payload_authorization_valid_before\",\n    invalid_exact_evm_payload_authorization_typed_data_message: \"invalid_exact_evm_payload_authorization_typed_data_message\",\n    invalid_exact_evm_payload_authorization_from_address_kyt: \"invalid_exact_evm_payload_authorization_from_address_kyt\",\n    invalid_exact_evm_payload_authorization_to_address_kyt: \"invalid_exact_evm_payload_authorization_to_address_kyt\",\n    invalid_exact_evm_payload_signature: \"invalid_exact_evm_payload_signature\",\n    invalid_exact_evm_payload_signature_address: \"invalid_exact_evm_payload_signature_address\",\n    invalid_exact_svm_payload_transaction: \"invalid_exact_svm_payload_transaction\",\n    invalid_exact_svm_payload_transaction_amount_mismatch: \"invalid_exact_svm_payload_transaction_amount_mismatch\",\n    invalid_exact_svm_payload_transaction_create_ata_instruction: \"invalid_exact_svm_payload_transaction_create_ata_instruction\",\n    invalid_exact_svm_payload_transaction_create_ata_instruction_incorrect_payee: \"invalid_exact_svm_payload_transaction_create_ata_instruction_incorrect_payee\",\n    invalid_exact_svm_payload_transaction_create_ata_instruction_incorrect_asset: \"invalid_exact_svm_payload_transaction_create_ata_instruction_incorrect_asset\",\n    invalid_exact_svm_payload_transaction_instructions: \"invalid_exact_svm_payload_transaction_instructions\",\n    invalid_exact_svm_payload_transaction_instructions_length: \"invalid_exact_svm_payload_transaction_instructions_length\",\n    invalid_exact_svm_payload_transaction_instructions_compute_limit_instruction: \"invalid_exact_svm_payload_transaction_instructions_compute_limit_instruction\",\n    invalid_exact_svm_payload_transaction_instructions_compute_price_instruction: \"invalid_exact_svm_payload_transaction_instructions_compute_price_instruction\",\n    invalid_exact_svm_payload_transaction_instructions_compute_price_instruction_too_high: \"invalid_exact_svm_payload_transaction_instructions_compute_price_instruction_too_high\",\n    invalid_exact_svm_payload_transaction_instruction_not_spl_token_transfer_checked: \"invalid_exact_svm_payload_transaction_instruction_not_spl_token_transfer_checked\",\n    invalid_exact_svm_payload_transaction_instruction_not_token_2022_transfer_checked: \"invalid_exact_svm_payload_transaction_instruction_not_token_2022_transfer_checked\",\n    invalid_exact_svm_payload_transaction_not_a_transfer_instruction: \"invalid_exact_svm_payload_transaction_not_a_transfer_instruction\",\n    invalid_exact_svm_payload_transaction_cannot_derive_receiver_ata: \"invalid_exact_svm_payload_transaction_cannot_derive_receiver_ata\",\n    invalid_exact_svm_payload_transaction_receiver_ata_not_found: \"invalid_exact_svm_payload_transaction_receiver_ata_not_found\",\n    invalid_exact_svm_payload_transaction_sender_ata_not_found: \"invalid_exact_svm_payload_transaction_sender_ata_not_found\",\n    invalid_exact_svm_payload_transaction_simulation_failed: \"invalid_exact_svm_payload_transaction_simulation_failed\",\n    invalid_exact_svm_payload_transaction_transfer_to_incorrect_ata: \"invalid_exact_svm_payload_transaction_transfer_to_incorrect_ata\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst X402SettleErrorReason = {\n    insufficient_funds: \"insufficient_funds\",\n    invalid_scheme: \"invalid_scheme\",\n    invalid_network: \"invalid_network\",\n    invalid_x402_version: \"invalid_x402_version\",\n    invalid_payment_requirements: \"invalid_payment_requirements\",\n    invalid_payload: \"invalid_payload\",\n    invalid_exact_evm_payload_authorization_value: \"invalid_exact_evm_payload_authorization_value\",\n    invalid_exact_evm_payload_authorization_valid_after: \"invalid_exact_evm_payload_authorization_valid_after\",\n    invalid_exact_evm_payload_authorization_valid_before: \"invalid_exact_evm_payload_authorization_valid_before\",\n    invalid_exact_evm_payload_authorization_typed_data_message: \"invalid_exact_evm_payload_authorization_typed_data_message\",\n    invalid_exact_evm_payload_authorization_from_address_kyt: \"invalid_exact_evm_payload_authorization_from_address_kyt\",\n    invalid_exact_evm_payload_authorization_to_address_kyt: \"invalid_exact_evm_payload_authorization_to_address_kyt\",\n    invalid_exact_evm_payload_signature_address: \"invalid_exact_evm_payload_signature_address\",\n    settle_exact_svm_block_height_exceeded: \"settle_exact_svm_block_height_exceeded\",\n    settle_exact_svm_transaction_confirmation_timed_out: \"settle_exact_svm_transaction_confirmation_timed_out\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst X402SupportedPaymentKindScheme = {\n    exact: \"exact\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst X402SupportedPaymentKindNetwork = {\n    \"base-sepolia\": \"base-sepolia\",\n    base: \"base\",\n    \"solana-devnet\": \"solana-devnet\",\n    solana: \"solana\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst PaymentRailAction = {\n    source: \"source\",\n    target: \"target\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst PaymentMethodType = {\n    card: \"card\",\n    fiat_account: \"fiat_account\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst FeeType = {\n    exchange_fee: \"exchange_fee\",\n    network_fee: \"network_fee\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst TransferSourceType = {\n    payment_method: \"payment_method\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst TransferTargetType = {\n    crypto_rail: \"crypto_rail\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst TransferStatus = {\n    created: \"created\",\n    pending: \"pending\",\n    started: \"started\",\n    completed: \"completed\",\n    failed: \"failed\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst OnrampOrderPaymentMethodTypeId = {\n    GUEST_CHECKOUT_APPLE_PAY: \"GUEST_CHECKOUT_APPLE_PAY\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst OnrampOrderFeeType = {\n    FEE_TYPE_NETWORK: \"FEE_TYPE_NETWORK\",\n    FEE_TYPE_EXCHANGE: \"FEE_TYPE_EXCHANGE\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst OnrampOrderStatus = {\n    ONRAMP_ORDER_STATUS_PENDING_AUTH: \"ONRAMP_ORDER_STATUS_PENDING_AUTH\",\n    ONRAMP_ORDER_STATUS_PENDING_PAYMENT: \"ONRAMP_ORDER_STATUS_PENDING_PAYMENT\",\n    ONRAMP_ORDER_STATUS_PROCESSING: \"ONRAMP_ORDER_STATUS_PROCESSING\",\n    ONRAMP_ORDER_STATUS_COMPLETED: \"ONRAMP_ORDER_STATUS_COMPLETED\",\n    ONRAMP_ORDER_STATUS_FAILED: \"ONRAMP_ORDER_STATUS_FAILED\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst OnrampPaymentLinkType = {\n    PAYMENT_LINK_TYPE_APPLE_PAY_BUTTON: \"PAYMENT_LINK_TYPE_APPLE_PAY_BUTTON\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst OnrampQuotePaymentMethodTypeId = {\n    CARD: \"CARD\",\n    ACH: \"ACH\",\n    APPLE_PAY: \"APPLE_PAY\",\n    PAYPAL: \"PAYPAL\",\n    FIAT_WALLET: \"FIAT_WALLET\",\n    CRYPTO_WALLET: \"CRYPTO_WALLET\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SendEvmTransactionBodyNetwork = {\n    base: \"base\",\n    \"base-sepolia\": \"base-sepolia\",\n    ethereum: \"ethereum\",\n    \"ethereum-sepolia\": \"ethereum-sepolia\",\n    avalanche: \"avalanche\",\n    polygon: \"polygon\",\n    optimism: \"optimism\",\n    arbitrum: \"arbitrum\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst RequestEvmFaucetBodyNetwork = {\n    \"base-sepolia\": \"base-sepolia\",\n    \"ethereum-sepolia\": \"ethereum-sepolia\",\n    \"ethereum-hoodi\": \"ethereum-hoodi\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst RequestEvmFaucetBodyToken = {\n    eth: \"eth\",\n    usdc: \"usdc\",\n    eurc: \"eurc\",\n    cbbtc: \"cbbtc\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst ListPoliciesScope = {\n    project: \"project\",\n    account: \"account\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst CreatePolicyBodyScope = {\n    project: \"project\",\n    account: \"account\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst SendSolanaTransactionBodyNetwork = {\n    solana: \"solana\",\n    \"solana-devnet\": \"solana-devnet\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst RequestSolanaFaucetBodyToken = {\n    sol: \"sol\",\n    usdc: \"usdc\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst CreatePaymentTransferQuoteBodySourceType = {\n    payment_method: \"payment_method\",\n};\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst CreatePaymentTransferQuoteBodyTargetType = {\n    crypto_rail: \"crypto_rail\",\n};\n//# sourceMappingURL=coinbaseDeveloperPlatformAPIs.schemas.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvY29pbmJhc2VEZXZlbG9wZXJQbGF0Zm9ybUFQSXMuc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vb3BlbmFwaS1jbGllbnQvZ2VuZXJhdGVkL2NvaW5iYXNlRGV2ZWxvcGVyUGxhdGZvcm1BUElzLnNjaGVtYXMuanM/MmYyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEVtYWlsQXV0aGVudGljYXRpb25UeXBlID0ge1xuICAgIGVtYWlsOiBcImVtYWlsXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTbXNBdXRoZW50aWNhdGlvblR5cGUgPSB7XG4gICAgc21zOiBcInNtc1wiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgRGV2ZWxvcGVySldUQXV0aGVudGljYXRpb25UeXBlID0ge1xuICAgIGp3dDogXCJqd3RcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEVycm9yVHlwZSA9IHtcbiAgICBhbHJlYWR5X2V4aXN0czogXCJhbHJlYWR5X2V4aXN0c1wiLFxuICAgIGJhZF9nYXRld2F5OiBcImJhZF9nYXRld2F5XCIsXG4gICAgZmF1Y2V0X2xpbWl0X2V4Y2VlZGVkOiBcImZhdWNldF9saW1pdF9leGNlZWRlZFwiLFxuICAgIGZvcmJpZGRlbjogXCJmb3JiaWRkZW5cIixcbiAgICBpZGVtcG90ZW5jeV9lcnJvcjogXCJpZGVtcG90ZW5jeV9lcnJvclwiLFxuICAgIGludGVybmFsX3NlcnZlcl9lcnJvcjogXCJpbnRlcm5hbF9zZXJ2ZXJfZXJyb3JcIixcbiAgICBpbnZhbGlkX3JlcXVlc3Q6IFwiaW52YWxpZF9yZXF1ZXN0XCIsXG4gICAgaW52YWxpZF9zcWxfcXVlcnk6IFwiaW52YWxpZF9zcWxfcXVlcnlcIixcbiAgICBpbnZhbGlkX3NpZ25hdHVyZTogXCJpbnZhbGlkX3NpZ25hdHVyZVwiLFxuICAgIG1hbGZvcm1lZF90cmFuc2FjdGlvbjogXCJtYWxmb3JtZWRfdHJhbnNhY3Rpb25cIixcbiAgICBub3RfZm91bmQ6IFwibm90X2ZvdW5kXCIsXG4gICAgcGF5bWVudF9tZXRob2RfcmVxdWlyZWQ6IFwicGF5bWVudF9tZXRob2RfcmVxdWlyZWRcIixcbiAgICByYXRlX2xpbWl0X2V4Y2VlZGVkOiBcInJhdGVfbGltaXRfZXhjZWVkZWRcIixcbiAgICByZXF1ZXN0X2NhbmNlbGVkOiBcInJlcXVlc3RfY2FuY2VsZWRcIixcbiAgICBzZXJ2aWNlX3VuYXZhaWxhYmxlOiBcInNlcnZpY2VfdW5hdmFpbGFibGVcIixcbiAgICB0aW1lZF9vdXQ6IFwidGltZWRfb3V0XCIsXG4gICAgdW5hdXRob3JpemVkOiBcInVuYXV0aG9yaXplZFwiLFxuICAgIHBvbGljeV92aW9sYXRpb246IFwicG9saWN5X3Zpb2xhdGlvblwiLFxuICAgIHBvbGljeV9pbl91c2U6IFwicG9saWN5X2luX3VzZVwiLFxuICAgIGFjY291bnRfbGltaXRfZXhjZWVkZWQ6IFwiYWNjb3VudF9saW1pdF9leGNlZWRlZFwiLFxuICAgIG5ldHdvcmtfbm90X3RyYWRhYmxlOiBcIm5ldHdvcmtfbm90X3RyYWRhYmxlXCIsXG4gICAgZ3Vlc3RfcGVybWlzc2lvbl9kZW5pZWQ6IFwiZ3Vlc3RfcGVybWlzc2lvbl9kZW5pZWRcIixcbiAgICBndWVzdF9yZWdpb25fZm9yYmlkZGVuOiBcImd1ZXN0X3JlZ2lvbl9mb3JiaWRkZW5cIixcbiAgICBndWVzdF90cmFuc2FjdGlvbl9saW1pdDogXCJndWVzdF90cmFuc2FjdGlvbl9saW1pdFwiLFxuICAgIGd1ZXN0X3RyYW5zYWN0aW9uX2NvdW50OiBcImd1ZXN0X3RyYW5zYWN0aW9uX2NvdW50XCIsXG4gICAgcGhvbmVfbnVtYmVyX3ZlcmlmaWNhdGlvbl9leHBpcmVkOiBcInBob25lX251bWJlcl92ZXJpZmljYXRpb25fZXhwaXJlZFwiLFxuICAgIGRvY3VtZW50X3ZlcmlmaWNhdGlvbl9mYWlsZWQ6IFwiZG9jdW1lbnRfdmVyaWZpY2F0aW9uX2ZhaWxlZFwiLFxuICAgIHJlY2lwaWVudF9hbGxvd2xpc3RfdmlvbGF0aW9uOiBcInJlY2lwaWVudF9hbGxvd2xpc3RfdmlvbGF0aW9uXCIsXG4gICAgcmVjaXBpZW50X2FsbG93bGlzdF9wZW5kaW5nOiBcInJlY2lwaWVudF9hbGxvd2xpc3RfcGVuZGluZ1wiLFxuICAgIHRyYXZlbF9ydWxlc19yZWNpcGllbnRfdmlvbGF0aW9uOiBcInRyYXZlbF9ydWxlc19yZWNpcGllbnRfdmlvbGF0aW9uXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBFdm1Vc2VyT3BlcmF0aW9uTmV0d29yayA9IHtcbiAgICBcImJhc2Utc2Vwb2xpYVwiOiBcImJhc2Utc2Vwb2xpYVwiLFxuICAgIGJhc2U6IFwiYmFzZVwiLFxuICAgIGFyYml0cnVtOiBcImFyYml0cnVtXCIsXG4gICAgb3B0aW1pc206IFwib3B0aW1pc21cIixcbiAgICB6b3JhOiBcInpvcmFcIixcbiAgICBwb2x5Z29uOiBcInBvbHlnb25cIixcbiAgICBibmI6IFwiYm5iXCIsXG4gICAgYXZhbGFuY2hlOiBcImF2YWxhbmNoZVwiLFxuICAgIGV0aGVyZXVtOiBcImV0aGVyZXVtXCIsXG4gICAgXCJldGhlcmV1bS1zZXBvbGlhXCI6IFwiZXRoZXJldW0tc2Vwb2xpYVwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgRXZtVXNlck9wZXJhdGlvblN0YXR1cyA9IHtcbiAgICBwZW5kaW5nOiBcInBlbmRpbmdcIixcbiAgICBzaWduZWQ6IFwic2lnbmVkXCIsXG4gICAgYnJvYWRjYXN0OiBcImJyb2FkY2FzdFwiLFxuICAgIGNvbXBsZXRlOiBcImNvbXBsZXRlXCIsXG4gICAgZHJvcHBlZDogXCJkcm9wcGVkXCIsXG4gICAgZmFpbGVkOiBcImZhaWxlZFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU3BlbmRQZXJtaXNzaW9uTmV0d29yayA9IHtcbiAgICBiYXNlOiBcImJhc2VcIixcbiAgICBcImJhc2Utc2Vwb2xpYVwiOiBcImJhc2Utc2Vwb2xpYVwiLFxuICAgIGV0aGVyZXVtOiBcImV0aGVyZXVtXCIsXG4gICAgXCJldGhlcmV1bS1zZXBvbGlhXCI6IFwiZXRoZXJldW0tc2Vwb2xpYVwiLFxuICAgIG9wdGltaXNtOiBcIm9wdGltaXNtXCIsXG4gICAgYXJiaXRydW06IFwiYXJiaXRydW1cIixcbiAgICBhdmFsYW5jaGU6IFwiYXZhbGFuY2hlXCIsXG4gICAgcG9seWdvbjogXCJwb2x5Z29uXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBFdm1Td2Fwc05ldHdvcmsgPSB7XG4gICAgYmFzZTogXCJiYXNlXCIsXG4gICAgZXRoZXJldW06IFwiZXRoZXJldW1cIixcbiAgICBhcmJpdHJ1bTogXCJhcmJpdHJ1bVwiLFxuICAgIG9wdGltaXNtOiBcIm9wdGltaXNtXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBMaXN0RXZtVG9rZW5CYWxhbmNlc05ldHdvcmsgPSB7XG4gICAgYmFzZTogXCJiYXNlXCIsXG4gICAgXCJiYXNlLXNlcG9saWFcIjogXCJiYXNlLXNlcG9saWFcIixcbiAgICBldGhlcmV1bTogXCJldGhlcmV1bVwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgRXRoVmFsdWVDcml0ZXJpb25UeXBlID0ge1xuICAgIGV0aFZhbHVlOiBcImV0aFZhbHVlXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBFdGhWYWx1ZUNyaXRlcmlvbk9wZXJhdG9yID0ge1xuICAgIFwiPlwiOiBcIj5cIixcbiAgICBcIj49XCI6IFwiPj1cIixcbiAgICBcIjxcIjogXCI8XCIsXG4gICAgXCI8PVwiOiBcIjw9XCIsXG4gICAgXCI9PVwiOiBcIj09XCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBFdm1BZGRyZXNzQ3JpdGVyaW9uVHlwZSA9IHtcbiAgICBldm1BZGRyZXNzOiBcImV2bUFkZHJlc3NcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEV2bUFkZHJlc3NDcml0ZXJpb25PcGVyYXRvciA9IHtcbiAgICBpbjogXCJpblwiLFxuICAgIG5vdF9pbjogXCJub3QgaW5cIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEtub3duQWJpVHlwZSA9IHtcbiAgICBlcmMyMDogXCJlcmMyMFwiLFxuICAgIGVyYzcyMTogXCJlcmM3MjFcIixcbiAgICBlcmMxMTU1OiBcImVyYzExNTVcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEFiaVN0YXRlTXV0YWJpbGl0eSA9IHtcbiAgICBwdXJlOiBcInB1cmVcIixcbiAgICB2aWV3OiBcInZpZXdcIixcbiAgICBub25wYXlhYmxlOiBcIm5vbnBheWFibGVcIixcbiAgICBwYXlhYmxlOiBcInBheWFibGVcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEFiaUZ1bmN0aW9uVHlwZSA9IHtcbiAgICBmdW5jdGlvbjogXCJmdW5jdGlvblwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgQWJpSW5wdXRUeXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBcImNvbnN0cnVjdG9yXCIsXG4gICAgZXJyb3I6IFwiZXJyb3JcIixcbiAgICBldmVudDogXCJldmVudFwiLFxuICAgIGZhbGxiYWNrOiBcImZhbGxiYWNrXCIsXG4gICAgcmVjZWl2ZTogXCJyZWNlaXZlXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBFdm1EYXRhUGFyYW1ldGVyQ29uZGl0aW9uT3BlcmF0b3IgPSB7XG4gICAgXCI+XCI6IFwiPlwiLFxuICAgIFwiPj1cIjogXCI+PVwiLFxuICAgIFwiPFwiOiBcIjxcIixcbiAgICBcIjw9XCI6IFwiPD1cIixcbiAgICBcIj09XCI6IFwiPT1cIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEV2bURhdGFQYXJhbWV0ZXJDb25kaXRpb25MaXN0T3BlcmF0b3IgPSB7XG4gICAgaW46IFwiaW5cIixcbiAgICBub3RfaW46IFwibm90IGluXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBFdm1EYXRhQ3JpdGVyaW9uVHlwZSA9IHtcbiAgICBldm1EYXRhOiBcImV2bURhdGFcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IE5ldFVTRENoYW5nZUNyaXRlcmlvblR5cGUgPSB7XG4gICAgbmV0VVNEQ2hhbmdlOiBcIm5ldFVTRENoYW5nZVwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgTmV0VVNEQ2hhbmdlQ3JpdGVyaW9uT3BlcmF0b3IgPSB7XG4gICAgXCI+XCI6IFwiPlwiLFxuICAgIFwiPj1cIjogXCI+PVwiLFxuICAgIFwiPFwiOiBcIjxcIixcbiAgICBcIjw9XCI6IFwiPD1cIixcbiAgICBcIj09XCI6IFwiPT1cIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNpZ25Fdm1UcmFuc2FjdGlvblJ1bGVBY3Rpb24gPSB7XG4gICAgcmVqZWN0OiBcInJlamVjdFwiLFxuICAgIGFjY2VwdDogXCJhY2NlcHRcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNpZ25Fdm1UcmFuc2FjdGlvblJ1bGVPcGVyYXRpb24gPSB7XG4gICAgc2lnbkV2bVRyYW5zYWN0aW9uOiBcInNpZ25Fdm1UcmFuc2FjdGlvblwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgRXZtTmV0d29ya0NyaXRlcmlvblR5cGUgPSB7XG4gICAgZXZtTmV0d29yazogXCJldm1OZXR3b3JrXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBFdm1OZXR3b3JrQ3JpdGVyaW9uTmV0d29ya3NJdGVtID0ge1xuICAgIFwiYmFzZS1zZXBvbGlhXCI6IFwiYmFzZS1zZXBvbGlhXCIsXG4gICAgYmFzZTogXCJiYXNlXCIsXG4gICAgZXRoZXJldW06IFwiZXRoZXJldW1cIixcbiAgICBcImV0aGVyZXVtLXNlcG9saWFcIjogXCJldGhlcmV1bS1zZXBvbGlhXCIsXG4gICAgYXZhbGFuY2hlOiBcImF2YWxhbmNoZVwiLFxuICAgIHBvbHlnb246IFwicG9seWdvblwiLFxuICAgIG9wdGltaXNtOiBcIm9wdGltaXNtXCIsXG4gICAgYXJiaXRydW06IFwiYXJiaXRydW1cIixcbiAgICB6b3JhOiBcInpvcmFcIixcbiAgICBibmI6IFwiYm5iXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBFdm1OZXR3b3JrQ3JpdGVyaW9uT3BlcmF0b3IgPSB7XG4gICAgaW46IFwiaW5cIixcbiAgICBub3RfaW46IFwibm90IGluXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTZW5kRXZtVHJhbnNhY3Rpb25SdWxlQWN0aW9uID0ge1xuICAgIHJlamVjdDogXCJyZWplY3RcIixcbiAgICBhY2NlcHQ6IFwiYWNjZXB0XCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTZW5kRXZtVHJhbnNhY3Rpb25SdWxlT3BlcmF0aW9uID0ge1xuICAgIHNlbmRFdm1UcmFuc2FjdGlvbjogXCJzZW5kRXZtVHJhbnNhY3Rpb25cIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEV2bU1lc3NhZ2VDcml0ZXJpb25UeXBlID0ge1xuICAgIGV2bU1lc3NhZ2U6IFwiZXZtTWVzc2FnZVwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU2lnbkV2bU1lc3NhZ2VSdWxlQWN0aW9uID0ge1xuICAgIHJlamVjdDogXCJyZWplY3RcIixcbiAgICBhY2NlcHQ6IFwiYWNjZXB0XCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTaWduRXZtTWVzc2FnZVJ1bGVPcGVyYXRpb24gPSB7XG4gICAgc2lnbkV2bU1lc3NhZ2U6IFwic2lnbkV2bU1lc3NhZ2VcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEV2bVR5cGVkQWRkcmVzc0NvbmRpdGlvbk9wZXJhdG9yID0ge1xuICAgIGluOiBcImluXCIsXG4gICAgbm90X2luOiBcIm5vdCBpblwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgRXZtVHlwZWROdW1lcmljYWxDb25kaXRpb25PcGVyYXRvciA9IHtcbiAgICBcIj5cIjogXCI+XCIsXG4gICAgXCI+PVwiOiBcIj49XCIsXG4gICAgXCI8XCI6IFwiPFwiLFxuICAgIFwiPD1cIjogXCI8PVwiLFxuICAgIFwiPT1cIjogXCI9PVwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU2lnbkV2bVR5cGVkRGF0YUZpZWxkQ3JpdGVyaW9uVHlwZSA9IHtcbiAgICBldm1UeXBlZERhdGFGaWVsZDogXCJldm1UeXBlZERhdGFGaWVsZFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU2lnbkV2bVR5cGVkRGF0YVZlcmlmeWluZ0NvbnRyYWN0Q3JpdGVyaW9uVHlwZSA9IHtcbiAgICBldm1UeXBlZERhdGFWZXJpZnlpbmdDb250cmFjdDogXCJldm1UeXBlZERhdGFWZXJpZnlpbmdDb250cmFjdFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU2lnbkV2bVR5cGVkRGF0YVZlcmlmeWluZ0NvbnRyYWN0Q3JpdGVyaW9uT3BlcmF0b3IgPSB7XG4gICAgaW46IFwiaW5cIixcbiAgICBub3RfaW46IFwibm90IGluXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTaWduRXZtVHlwZWREYXRhUnVsZUFjdGlvbiA9IHtcbiAgICByZWplY3Q6IFwicmVqZWN0XCIsXG4gICAgYWNjZXB0OiBcImFjY2VwdFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU2lnbkV2bVR5cGVkRGF0YVJ1bGVPcGVyYXRpb24gPSB7XG4gICAgc2lnbkV2bVR5cGVkRGF0YTogXCJzaWduRXZtVHlwZWREYXRhXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTb2xBZGRyZXNzQ3JpdGVyaW9uVHlwZSA9IHtcbiAgICBzb2xBZGRyZXNzOiBcInNvbEFkZHJlc3NcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNvbEFkZHJlc3NDcml0ZXJpb25PcGVyYXRvciA9IHtcbiAgICBpbjogXCJpblwiLFxuICAgIG5vdF9pbjogXCJub3QgaW5cIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNvbFZhbHVlQ3JpdGVyaW9uVHlwZSA9IHtcbiAgICBzb2xWYWx1ZTogXCJzb2xWYWx1ZVwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU29sVmFsdWVDcml0ZXJpb25PcGVyYXRvciA9IHtcbiAgICBcIj5cIjogXCI+XCIsXG4gICAgXCI+PVwiOiBcIj49XCIsXG4gICAgXCI8XCI6IFwiPFwiLFxuICAgIFwiPD1cIjogXCI8PVwiLFxuICAgIFwiPT1cIjogXCI9PVwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU3BsQWRkcmVzc0NyaXRlcmlvblR5cGUgPSB7XG4gICAgc3BsQWRkcmVzczogXCJzcGxBZGRyZXNzXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTcGxBZGRyZXNzQ3JpdGVyaW9uT3BlcmF0b3IgPSB7XG4gICAgaW46IFwiaW5cIixcbiAgICBub3RfaW46IFwibm90IGluXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTcGxWYWx1ZUNyaXRlcmlvblR5cGUgPSB7XG4gICAgc3BsVmFsdWU6IFwic3BsVmFsdWVcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNwbFZhbHVlQ3JpdGVyaW9uT3BlcmF0b3IgPSB7XG4gICAgXCI+XCI6IFwiPlwiLFxuICAgIFwiPj1cIjogXCI+PVwiLFxuICAgIFwiPFwiOiBcIjxcIixcbiAgICBcIjw9XCI6IFwiPD1cIixcbiAgICBcIj09XCI6IFwiPT1cIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IE1pbnRBZGRyZXNzQ3JpdGVyaW9uVHlwZSA9IHtcbiAgICBtaW50QWRkcmVzczogXCJtaW50QWRkcmVzc1wiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgTWludEFkZHJlc3NDcml0ZXJpb25PcGVyYXRvciA9IHtcbiAgICBpbjogXCJpblwiLFxuICAgIG5vdF9pbjogXCJub3QgaW5cIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEtub3duSWRsVHlwZSA9IHtcbiAgICBTeXN0ZW1Qcm9ncmFtOiBcIlN5c3RlbVByb2dyYW1cIixcbiAgICBUb2tlblByb2dyYW06IFwiVG9rZW5Qcm9ncmFtXCIsXG4gICAgQXNzb2NpYXRlZFRva2VuUHJvZ3JhbTogXCJBc3NvY2lhdGVkVG9rZW5Qcm9ncmFtXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTb2xEYXRhUGFyYW1ldGVyQ29uZGl0aW9uT3BlcmF0b3IgPSB7XG4gICAgXCI+XCI6IFwiPlwiLFxuICAgIFwiPj1cIjogXCI+PVwiLFxuICAgIFwiPFwiOiBcIjxcIixcbiAgICBcIjw9XCI6IFwiPD1cIixcbiAgICBcIj09XCI6IFwiPT1cIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNvbERhdGFQYXJhbWV0ZXJDb25kaXRpb25MaXN0T3BlcmF0b3IgPSB7XG4gICAgaW46IFwiaW5cIixcbiAgICBub3RfaW46IFwibm90IGluXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTb2xEYXRhQ3JpdGVyaW9uVHlwZSA9IHtcbiAgICBzb2xEYXRhOiBcInNvbERhdGFcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFByb2dyYW1JZENyaXRlcmlvblR5cGUgPSB7XG4gICAgcHJvZ3JhbUlkOiBcInByb2dyYW1JZFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgUHJvZ3JhbUlkQ3JpdGVyaW9uT3BlcmF0b3IgPSB7XG4gICAgaW46IFwiaW5cIixcbiAgICBub3RfaW46IFwibm90IGluXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTaWduU29sVHJhbnNhY3Rpb25SdWxlQWN0aW9uID0ge1xuICAgIHJlamVjdDogXCJyZWplY3RcIixcbiAgICBhY2NlcHQ6IFwiYWNjZXB0XCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTaWduU29sVHJhbnNhY3Rpb25SdWxlT3BlcmF0aW9uID0ge1xuICAgIHNpZ25Tb2xUcmFuc2FjdGlvbjogXCJzaWduU29sVHJhbnNhY3Rpb25cIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNvbE5ldHdvcmtDcml0ZXJpb25UeXBlID0ge1xuICAgIHNvbE5ldHdvcms6IFwic29sTmV0d29ya1wiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU29sTmV0d29ya0NyaXRlcmlvbk5ldHdvcmtzSXRlbSA9IHtcbiAgICBcInNvbGFuYS1kZXZuZXRcIjogXCJzb2xhbmEtZGV2bmV0XCIsXG4gICAgc29sYW5hOiBcInNvbGFuYVwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU29sTmV0d29ya0NyaXRlcmlvbk9wZXJhdG9yID0ge1xuICAgIGluOiBcImluXCIsXG4gICAgbm90X2luOiBcIm5vdCBpblwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU2VuZFNvbFRyYW5zYWN0aW9uUnVsZUFjdGlvbiA9IHtcbiAgICByZWplY3Q6IFwicmVqZWN0XCIsXG4gICAgYWNjZXB0OiBcImFjY2VwdFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU2VuZFNvbFRyYW5zYWN0aW9uUnVsZU9wZXJhdGlvbiA9IHtcbiAgICBzZW5kU29sVHJhbnNhY3Rpb246IFwic2VuZFNvbFRyYW5zYWN0aW9uXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTb2xNZXNzYWdlQ3JpdGVyaW9uVHlwZSA9IHtcbiAgICBzb2xNZXNzYWdlOiBcInNvbE1lc3NhZ2VcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNpZ25Tb2xNZXNzYWdlUnVsZUFjdGlvbiA9IHtcbiAgICByZWplY3Q6IFwicmVqZWN0XCIsXG4gICAgYWNjZXB0OiBcImFjY2VwdFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU2lnblNvbE1lc3NhZ2VSdWxlT3BlcmF0aW9uID0ge1xuICAgIHNpZ25Tb2xNZXNzYWdlOiBcInNpZ25Tb2xNZXNzYWdlXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTaWduRXZtSGFzaFJ1bGVBY3Rpb24gPSB7XG4gICAgcmVqZWN0OiBcInJlamVjdFwiLFxuICAgIGFjY2VwdDogXCJhY2NlcHRcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNpZ25Fdm1IYXNoUnVsZU9wZXJhdGlvbiA9IHtcbiAgICBzaWduRXZtSGFzaDogXCJzaWduRXZtSGFzaFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgUHJlcGFyZVVzZXJPcGVyYXRpb25SdWxlQWN0aW9uID0ge1xuICAgIHJlamVjdDogXCJyZWplY3RcIixcbiAgICBhY2NlcHQ6IFwiYWNjZXB0XCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBQcmVwYXJlVXNlck9wZXJhdGlvblJ1bGVPcGVyYXRpb24gPSB7XG4gICAgcHJlcGFyZVVzZXJPcGVyYXRpb246IFwicHJlcGFyZVVzZXJPcGVyYXRpb25cIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNlbmRVc2VyT3BlcmF0aW9uUnVsZUFjdGlvbiA9IHtcbiAgICByZWplY3Q6IFwicmVqZWN0XCIsXG4gICAgYWNjZXB0OiBcImFjY2VwdFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgU2VuZFVzZXJPcGVyYXRpb25SdWxlT3BlcmF0aW9uID0ge1xuICAgIHNlbmRVc2VyT3BlcmF0aW9uOiBcInNlbmRVc2VyT3BlcmF0aW9uXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBQb2xpY3lTY29wZSA9IHtcbiAgICBwcm9qZWN0OiBcInByb2plY3RcIixcbiAgICBhY2NvdW50OiBcImFjY291bnRcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IExpc3RTb2xhbmFUb2tlbkJhbGFuY2VzTmV0d29yayA9IHtcbiAgICBzb2xhbmE6IFwic29sYW5hXCIsXG4gICAgXCJzb2xhbmEtZGV2bmV0XCI6IFwic29sYW5hLWRldm5ldFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgT25jaGFpbkRhdGFSZXN1bHRTY2hlbWFDb2x1bW5zSXRlbVR5cGUgPSB7XG4gICAgU3RyaW5nOiBcIlN0cmluZ1wiLFxuICAgIFVJbnQ4OiBcIlVJbnQ4XCIsXG4gICAgVUludDE2OiBcIlVJbnQxNlwiLFxuICAgIFVJbnQzMjogXCJVSW50MzJcIixcbiAgICBVSW50NjQ6IFwiVUludDY0XCIsXG4gICAgVUludDEyODogXCJVSW50MTI4XCIsXG4gICAgVUludDI1NjogXCJVSW50MjU2XCIsXG4gICAgSW50ODogXCJJbnQ4XCIsXG4gICAgSW50MTY6IFwiSW50MTZcIixcbiAgICBJbnQzMjogXCJJbnQzMlwiLFxuICAgIEludDY0OiBcIkludDY0XCIsXG4gICAgSW50MTI4OiBcIkludDEyOFwiLFxuICAgIEludDI1NjogXCJJbnQyNTZcIixcbiAgICBGbG9hdDMyOiBcIkZsb2F0MzJcIixcbiAgICBGbG9hdDY0OiBcIkZsb2F0NjRcIixcbiAgICBCb29sOiBcIkJvb2xcIixcbiAgICBEYXRlOiBcIkRhdGVcIixcbiAgICBEYXRlVGltZTogXCJEYXRlVGltZVwiLFxuICAgIERhdGVUaW1lNjQ6IFwiRGF0ZVRpbWU2NFwiLFxuICAgIFVVSUQ6IFwiVVVJRFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgWDQwMlZlcnNpb24gPSB7XG4gICAgTlVNQkVSXzE6IDEsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBYNDAyUGF5bWVudFBheWxvYWRTY2hlbWUgPSB7XG4gICAgZXhhY3Q6IFwiZXhhY3RcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFg0MDJQYXltZW50UGF5bG9hZE5ldHdvcmsgPSB7XG4gICAgXCJiYXNlLXNlcG9saWFcIjogXCJiYXNlLXNlcG9saWFcIixcbiAgICBiYXNlOiBcImJhc2VcIixcbiAgICBcInNvbGFuYS1kZXZuZXRcIjogXCJzb2xhbmEtZGV2bmV0XCIsXG4gICAgc29sYW5hOiBcInNvbGFuYVwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgWDQwMlBheW1lbnRSZXF1aXJlbWVudHNTY2hlbWUgPSB7XG4gICAgZXhhY3Q6IFwiZXhhY3RcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFg0MDJQYXltZW50UmVxdWlyZW1lbnRzTmV0d29yayA9IHtcbiAgICBcImJhc2Utc2Vwb2xpYVwiOiBcImJhc2Utc2Vwb2xpYVwiLFxuICAgIGJhc2U6IFwiYmFzZVwiLFxuICAgIFwic29sYW5hLWRldm5ldFwiOiBcInNvbGFuYS1kZXZuZXRcIixcbiAgICBzb2xhbmE6IFwic29sYW5hXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBYNDAyVmVyaWZ5SW52YWxpZFJlYXNvbiA9IHtcbiAgICBpbnN1ZmZpY2llbnRfZnVuZHM6IFwiaW5zdWZmaWNpZW50X2Z1bmRzXCIsXG4gICAgaW52YWxpZF9zY2hlbWU6IFwiaW52YWxpZF9zY2hlbWVcIixcbiAgICBpbnZhbGlkX25ldHdvcms6IFwiaW52YWxpZF9uZXR3b3JrXCIsXG4gICAgaW52YWxpZF94NDAyX3ZlcnNpb246IFwiaW52YWxpZF94NDAyX3ZlcnNpb25cIixcbiAgICBpbnZhbGlkX3BheW1lbnRfcmVxdWlyZW1lbnRzOiBcImludmFsaWRfcGF5bWVudF9yZXF1aXJlbWVudHNcIixcbiAgICBpbnZhbGlkX3BheWxvYWQ6IFwiaW52YWxpZF9wYXlsb2FkXCIsXG4gICAgaW52YWxpZF9leGFjdF9ldm1fcGF5bG9hZF9hdXRob3JpemF0aW9uX3ZhbHVlOiBcImludmFsaWRfZXhhY3RfZXZtX3BheWxvYWRfYXV0aG9yaXphdGlvbl92YWx1ZVwiLFxuICAgIGludmFsaWRfZXhhY3RfZXZtX3BheWxvYWRfYXV0aG9yaXphdGlvbl92YWxpZF9hZnRlcjogXCJpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fdmFsaWRfYWZ0ZXJcIixcbiAgICBpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fdmFsaWRfYmVmb3JlOiBcImludmFsaWRfZXhhY3RfZXZtX3BheWxvYWRfYXV0aG9yaXphdGlvbl92YWxpZF9iZWZvcmVcIixcbiAgICBpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fdHlwZWRfZGF0YV9tZXNzYWdlOiBcImludmFsaWRfZXhhY3RfZXZtX3BheWxvYWRfYXV0aG9yaXphdGlvbl90eXBlZF9kYXRhX21lc3NhZ2VcIixcbiAgICBpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fZnJvbV9hZGRyZXNzX2t5dDogXCJpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fZnJvbV9hZGRyZXNzX2t5dFwiLFxuICAgIGludmFsaWRfZXhhY3RfZXZtX3BheWxvYWRfYXV0aG9yaXphdGlvbl90b19hZGRyZXNzX2t5dDogXCJpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fdG9fYWRkcmVzc19reXRcIixcbiAgICBpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX3NpZ25hdHVyZTogXCJpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX3NpZ25hdHVyZVwiLFxuICAgIGludmFsaWRfZXhhY3RfZXZtX3BheWxvYWRfc2lnbmF0dXJlX2FkZHJlc3M6IFwiaW52YWxpZF9leGFjdF9ldm1fcGF5bG9hZF9zaWduYXR1cmVfYWRkcmVzc1wiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb246IFwiaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvblwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25fYW1vdW50X21pc21hdGNoOiBcImludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25fYW1vdW50X21pc21hdGNoXCIsXG4gICAgaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl9jcmVhdGVfYXRhX2luc3RydWN0aW9uOiBcImludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25fY3JlYXRlX2F0YV9pbnN0cnVjdGlvblwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25fY3JlYXRlX2F0YV9pbnN0cnVjdGlvbl9pbmNvcnJlY3RfcGF5ZWU6IFwiaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl9jcmVhdGVfYXRhX2luc3RydWN0aW9uX2luY29ycmVjdF9wYXllZVwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25fY3JlYXRlX2F0YV9pbnN0cnVjdGlvbl9pbmNvcnJlY3RfYXNzZXQ6IFwiaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl9jcmVhdGVfYXRhX2luc3RydWN0aW9uX2luY29ycmVjdF9hc3NldFwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25faW5zdHJ1Y3Rpb25zOiBcImludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25faW5zdHJ1Y3Rpb25zXCIsXG4gICAgaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl9pbnN0cnVjdGlvbnNfbGVuZ3RoOiBcImludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25faW5zdHJ1Y3Rpb25zX2xlbmd0aFwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25faW5zdHJ1Y3Rpb25zX2NvbXB1dGVfbGltaXRfaW5zdHJ1Y3Rpb246IFwiaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl9pbnN0cnVjdGlvbnNfY29tcHV0ZV9saW1pdF9pbnN0cnVjdGlvblwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25faW5zdHJ1Y3Rpb25zX2NvbXB1dGVfcHJpY2VfaW5zdHJ1Y3Rpb246IFwiaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl9pbnN0cnVjdGlvbnNfY29tcHV0ZV9wcmljZV9pbnN0cnVjdGlvblwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25faW5zdHJ1Y3Rpb25zX2NvbXB1dGVfcHJpY2VfaW5zdHJ1Y3Rpb25fdG9vX2hpZ2g6IFwiaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl9pbnN0cnVjdGlvbnNfY29tcHV0ZV9wcmljZV9pbnN0cnVjdGlvbl90b29faGlnaFwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25faW5zdHJ1Y3Rpb25fbm90X3NwbF90b2tlbl90cmFuc2Zlcl9jaGVja2VkOiBcImludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25faW5zdHJ1Y3Rpb25fbm90X3NwbF90b2tlbl90cmFuc2Zlcl9jaGVja2VkXCIsXG4gICAgaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl9pbnN0cnVjdGlvbl9ub3RfdG9rZW5fMjAyMl90cmFuc2Zlcl9jaGVja2VkOiBcImludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25faW5zdHJ1Y3Rpb25fbm90X3Rva2VuXzIwMjJfdHJhbnNmZXJfY2hlY2tlZFwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25fbm90X2FfdHJhbnNmZXJfaW5zdHJ1Y3Rpb246IFwiaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl9ub3RfYV90cmFuc2Zlcl9pbnN0cnVjdGlvblwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25fY2Fubm90X2Rlcml2ZV9yZWNlaXZlcl9hdGE6IFwiaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl9jYW5ub3RfZGVyaXZlX3JlY2VpdmVyX2F0YVwiLFxuICAgIGludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25fcmVjZWl2ZXJfYXRhX25vdF9mb3VuZDogXCJpbnZhbGlkX2V4YWN0X3N2bV9wYXlsb2FkX3RyYW5zYWN0aW9uX3JlY2VpdmVyX2F0YV9ub3RfZm91bmRcIixcbiAgICBpbnZhbGlkX2V4YWN0X3N2bV9wYXlsb2FkX3RyYW5zYWN0aW9uX3NlbmRlcl9hdGFfbm90X2ZvdW5kOiBcImludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25fc2VuZGVyX2F0YV9ub3RfZm91bmRcIixcbiAgICBpbnZhbGlkX2V4YWN0X3N2bV9wYXlsb2FkX3RyYW5zYWN0aW9uX3NpbXVsYXRpb25fZmFpbGVkOiBcImludmFsaWRfZXhhY3Rfc3ZtX3BheWxvYWRfdHJhbnNhY3Rpb25fc2ltdWxhdGlvbl9mYWlsZWRcIixcbiAgICBpbnZhbGlkX2V4YWN0X3N2bV9wYXlsb2FkX3RyYW5zYWN0aW9uX3RyYW5zZmVyX3RvX2luY29ycmVjdF9hdGE6IFwiaW52YWxpZF9leGFjdF9zdm1fcGF5bG9hZF90cmFuc2FjdGlvbl90cmFuc2Zlcl90b19pbmNvcnJlY3RfYXRhXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBYNDAyU2V0dGxlRXJyb3JSZWFzb24gPSB7XG4gICAgaW5zdWZmaWNpZW50X2Z1bmRzOiBcImluc3VmZmljaWVudF9mdW5kc1wiLFxuICAgIGludmFsaWRfc2NoZW1lOiBcImludmFsaWRfc2NoZW1lXCIsXG4gICAgaW52YWxpZF9uZXR3b3JrOiBcImludmFsaWRfbmV0d29ya1wiLFxuICAgIGludmFsaWRfeDQwMl92ZXJzaW9uOiBcImludmFsaWRfeDQwMl92ZXJzaW9uXCIsXG4gICAgaW52YWxpZF9wYXltZW50X3JlcXVpcmVtZW50czogXCJpbnZhbGlkX3BheW1lbnRfcmVxdWlyZW1lbnRzXCIsXG4gICAgaW52YWxpZF9wYXlsb2FkOiBcImludmFsaWRfcGF5bG9hZFwiLFxuICAgIGludmFsaWRfZXhhY3RfZXZtX3BheWxvYWRfYXV0aG9yaXphdGlvbl92YWx1ZTogXCJpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fdmFsdWVcIixcbiAgICBpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fdmFsaWRfYWZ0ZXI6IFwiaW52YWxpZF9leGFjdF9ldm1fcGF5bG9hZF9hdXRob3JpemF0aW9uX3ZhbGlkX2FmdGVyXCIsXG4gICAgaW52YWxpZF9leGFjdF9ldm1fcGF5bG9hZF9hdXRob3JpemF0aW9uX3ZhbGlkX2JlZm9yZTogXCJpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fdmFsaWRfYmVmb3JlXCIsXG4gICAgaW52YWxpZF9leGFjdF9ldm1fcGF5bG9hZF9hdXRob3JpemF0aW9uX3R5cGVkX2RhdGFfbWVzc2FnZTogXCJpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fdHlwZWRfZGF0YV9tZXNzYWdlXCIsXG4gICAgaW52YWxpZF9leGFjdF9ldm1fcGF5bG9hZF9hdXRob3JpemF0aW9uX2Zyb21fYWRkcmVzc19reXQ6IFwiaW52YWxpZF9leGFjdF9ldm1fcGF5bG9hZF9hdXRob3JpemF0aW9uX2Zyb21fYWRkcmVzc19reXRcIixcbiAgICBpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX2F1dGhvcml6YXRpb25fdG9fYWRkcmVzc19reXQ6IFwiaW52YWxpZF9leGFjdF9ldm1fcGF5bG9hZF9hdXRob3JpemF0aW9uX3RvX2FkZHJlc3Nfa3l0XCIsXG4gICAgaW52YWxpZF9leGFjdF9ldm1fcGF5bG9hZF9zaWduYXR1cmVfYWRkcmVzczogXCJpbnZhbGlkX2V4YWN0X2V2bV9wYXlsb2FkX3NpZ25hdHVyZV9hZGRyZXNzXCIsXG4gICAgc2V0dGxlX2V4YWN0X3N2bV9ibG9ja19oZWlnaHRfZXhjZWVkZWQ6IFwic2V0dGxlX2V4YWN0X3N2bV9ibG9ja19oZWlnaHRfZXhjZWVkZWRcIixcbiAgICBzZXR0bGVfZXhhY3Rfc3ZtX3RyYW5zYWN0aW9uX2NvbmZpcm1hdGlvbl90aW1lZF9vdXQ6IFwic2V0dGxlX2V4YWN0X3N2bV90cmFuc2FjdGlvbl9jb25maXJtYXRpb25fdGltZWRfb3V0XCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBYNDAyU3VwcG9ydGVkUGF5bWVudEtpbmRTY2hlbWUgPSB7XG4gICAgZXhhY3Q6IFwiZXhhY3RcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFg0MDJTdXBwb3J0ZWRQYXltZW50S2luZE5ldHdvcmsgPSB7XG4gICAgXCJiYXNlLXNlcG9saWFcIjogXCJiYXNlLXNlcG9saWFcIixcbiAgICBiYXNlOiBcImJhc2VcIixcbiAgICBcInNvbGFuYS1kZXZuZXRcIjogXCJzb2xhbmEtZGV2bmV0XCIsXG4gICAgc29sYW5hOiBcInNvbGFuYVwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgUGF5bWVudFJhaWxBY3Rpb24gPSB7XG4gICAgc291cmNlOiBcInNvdXJjZVwiLFxuICAgIHRhcmdldDogXCJ0YXJnZXRcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFBheW1lbnRNZXRob2RUeXBlID0ge1xuICAgIGNhcmQ6IFwiY2FyZFwiLFxuICAgIGZpYXRfYWNjb3VudDogXCJmaWF0X2FjY291bnRcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IEZlZVR5cGUgPSB7XG4gICAgZXhjaGFuZ2VfZmVlOiBcImV4Y2hhbmdlX2ZlZVwiLFxuICAgIG5ldHdvcmtfZmVlOiBcIm5ldHdvcmtfZmVlXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBUcmFuc2ZlclNvdXJjZVR5cGUgPSB7XG4gICAgcGF5bWVudF9tZXRob2Q6IFwicGF5bWVudF9tZXRob2RcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFRyYW5zZmVyVGFyZ2V0VHlwZSA9IHtcbiAgICBjcnlwdG9fcmFpbDogXCJjcnlwdG9fcmFpbFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgVHJhbnNmZXJTdGF0dXMgPSB7XG4gICAgY3JlYXRlZDogXCJjcmVhdGVkXCIsXG4gICAgcGVuZGluZzogXCJwZW5kaW5nXCIsXG4gICAgc3RhcnRlZDogXCJzdGFydGVkXCIsXG4gICAgY29tcGxldGVkOiBcImNvbXBsZXRlZFwiLFxuICAgIGZhaWxlZDogXCJmYWlsZWRcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IE9ucmFtcE9yZGVyUGF5bWVudE1ldGhvZFR5cGVJZCA9IHtcbiAgICBHVUVTVF9DSEVDS09VVF9BUFBMRV9QQVk6IFwiR1VFU1RfQ0hFQ0tPVVRfQVBQTEVfUEFZXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBPbnJhbXBPcmRlckZlZVR5cGUgPSB7XG4gICAgRkVFX1RZUEVfTkVUV09SSzogXCJGRUVfVFlQRV9ORVRXT1JLXCIsXG4gICAgRkVFX1RZUEVfRVhDSEFOR0U6IFwiRkVFX1RZUEVfRVhDSEFOR0VcIixcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IE9ucmFtcE9yZGVyU3RhdHVzID0ge1xuICAgIE9OUkFNUF9PUkRFUl9TVEFUVVNfUEVORElOR19BVVRIOiBcIk9OUkFNUF9PUkRFUl9TVEFUVVNfUEVORElOR19BVVRIXCIsXG4gICAgT05SQU1QX09SREVSX1NUQVRVU19QRU5ESU5HX1BBWU1FTlQ6IFwiT05SQU1QX09SREVSX1NUQVRVU19QRU5ESU5HX1BBWU1FTlRcIixcbiAgICBPTlJBTVBfT1JERVJfU1RBVFVTX1BST0NFU1NJTkc6IFwiT05SQU1QX09SREVSX1NUQVRVU19QUk9DRVNTSU5HXCIsXG4gICAgT05SQU1QX09SREVSX1NUQVRVU19DT01QTEVURUQ6IFwiT05SQU1QX09SREVSX1NUQVRVU19DT01QTEVURURcIixcbiAgICBPTlJBTVBfT1JERVJfU1RBVFVTX0ZBSUxFRDogXCJPTlJBTVBfT1JERVJfU1RBVFVTX0ZBSUxFRFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgT25yYW1wUGF5bWVudExpbmtUeXBlID0ge1xuICAgIFBBWU1FTlRfTElOS19UWVBFX0FQUExFX1BBWV9CVVRUT046IFwiUEFZTUVOVF9MSU5LX1RZUEVfQVBQTEVfUEFZX0JVVFRPTlwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgT25yYW1wUXVvdGVQYXltZW50TWV0aG9kVHlwZUlkID0ge1xuICAgIENBUkQ6IFwiQ0FSRFwiLFxuICAgIEFDSDogXCJBQ0hcIixcbiAgICBBUFBMRV9QQVk6IFwiQVBQTEVfUEFZXCIsXG4gICAgUEFZUEFMOiBcIlBBWVBBTFwiLFxuICAgIEZJQVRfV0FMTEVUOiBcIkZJQVRfV0FMTEVUXCIsXG4gICAgQ1JZUFRPX1dBTExFVDogXCJDUllQVE9fV0FMTEVUXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTZW5kRXZtVHJhbnNhY3Rpb25Cb2R5TmV0d29yayA9IHtcbiAgICBiYXNlOiBcImJhc2VcIixcbiAgICBcImJhc2Utc2Vwb2xpYVwiOiBcImJhc2Utc2Vwb2xpYVwiLFxuICAgIGV0aGVyZXVtOiBcImV0aGVyZXVtXCIsXG4gICAgXCJldGhlcmV1bS1zZXBvbGlhXCI6IFwiZXRoZXJldW0tc2Vwb2xpYVwiLFxuICAgIGF2YWxhbmNoZTogXCJhdmFsYW5jaGVcIixcbiAgICBwb2x5Z29uOiBcInBvbHlnb25cIixcbiAgICBvcHRpbWlzbTogXCJvcHRpbWlzbVwiLFxuICAgIGFyYml0cnVtOiBcImFyYml0cnVtXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBSZXF1ZXN0RXZtRmF1Y2V0Qm9keU5ldHdvcmsgPSB7XG4gICAgXCJiYXNlLXNlcG9saWFcIjogXCJiYXNlLXNlcG9saWFcIixcbiAgICBcImV0aGVyZXVtLXNlcG9saWFcIjogXCJldGhlcmV1bS1zZXBvbGlhXCIsXG4gICAgXCJldGhlcmV1bS1ob29kaVwiOiBcImV0aGVyZXVtLWhvb2RpXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBSZXF1ZXN0RXZtRmF1Y2V0Qm9keVRva2VuID0ge1xuICAgIGV0aDogXCJldGhcIixcbiAgICB1c2RjOiBcInVzZGNcIixcbiAgICBldXJjOiBcImV1cmNcIixcbiAgICBjYmJ0YzogXCJjYmJ0Y1wiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgTGlzdFBvbGljaWVzU2NvcGUgPSB7XG4gICAgcHJvamVjdDogXCJwcm9qZWN0XCIsXG4gICAgYWNjb3VudDogXCJhY2NvdW50XCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBDcmVhdGVQb2xpY3lCb2R5U2NvcGUgPSB7XG4gICAgcHJvamVjdDogXCJwcm9qZWN0XCIsXG4gICAgYWNjb3VudDogXCJhY2NvdW50XCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBTZW5kU29sYW5hVHJhbnNhY3Rpb25Cb2R5TmV0d29yayA9IHtcbiAgICBzb2xhbmE6IFwic29sYW5hXCIsXG4gICAgXCJzb2xhbmEtZGV2bmV0XCI6IFwic29sYW5hLWRldm5ldFwiLFxufTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgUmVxdWVzdFNvbGFuYUZhdWNldEJvZHlUb2tlbiA9IHtcbiAgICBzb2w6IFwic29sXCIsXG4gICAgdXNkYzogXCJ1c2RjXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBDcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZUJvZHlTb3VyY2VUeXBlID0ge1xuICAgIHBheW1lbnRfbWV0aG9kOiBcInBheW1lbnRfbWV0aG9kXCIsXG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmVcbmV4cG9ydCBjb25zdCBDcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZUJvZHlUYXJnZXRUeXBlID0ge1xuICAgIGNyeXB0b19yYWlsOiBcImNyeXB0b19yYWlsXCIsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29pbmJhc2VEZXZlbG9wZXJQbGF0Zm9ybUFQSXMuc2NoZW1hcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/end-user-accounts/end-user-accounts.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/end-user-accounts/end-user-accounts.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateEndUserAccessToken: () => (/* binding */ validateEndUserAccessToken)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Validates the end user's access token and returns the end user's information. Returns an error if the access token is invalid or expired.\n\nThis API is intended to be used by the developer's own backend, and is authenticated using the developer's CDP API key.\n * @summary Validate end user access token\n */\nconst validateEndUserAccessToken = (validateEndUserAccessTokenBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/end-users/auth/validate-token`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: validateEndUserAccessTokenBody,\n    }, options);\n};\n//# sourceMappingURL=end-user-accounts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvZW5kLXVzZXItYWNjb3VudHMvZW5kLXVzZXItYWNjb3VudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUQ7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVk7QUFDdkI7QUFDQTtBQUNBLG1CQUFtQixvQ0FBb0M7QUFDdkQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvZW5kLXVzZXItYWNjb3VudHMvZW5kLXVzZXItYWNjb3VudHMuanM/MGUzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjZHBBcGlDbGllbnQgfSBmcm9tIFwiLi4vLi4vY2RwQXBpQ2xpZW50LmpzXCI7XG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgZW5kIHVzZXIncyBhY2Nlc3MgdG9rZW4gYW5kIHJldHVybnMgdGhlIGVuZCB1c2VyJ3MgaW5mb3JtYXRpb24uIFJldHVybnMgYW4gZXJyb3IgaWYgdGhlIGFjY2VzcyB0b2tlbiBpcyBpbnZhbGlkIG9yIGV4cGlyZWQuXG5cblRoaXMgQVBJIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgYnkgdGhlIGRldmVsb3BlcidzIG93biBiYWNrZW5kLCBhbmQgaXMgYXV0aGVudGljYXRlZCB1c2luZyB0aGUgZGV2ZWxvcGVyJ3MgQ0RQIEFQSSBrZXkuXG4gKiBAc3VtbWFyeSBWYWxpZGF0ZSBlbmQgdXNlciBhY2Nlc3MgdG9rZW5cbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRW5kVXNlckFjY2Vzc1Rva2VuID0gKHZhbGlkYXRlRW5kVXNlckFjY2Vzc1Rva2VuQm9keSwgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBjZHBBcGlDbGllbnQoe1xuICAgICAgICB1cmw6IGAvdjIvZW5kLXVzZXJzL2F1dGgvdmFsaWRhdGUtdG9rZW5gLFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgIGRhdGE6IHZhbGlkYXRlRW5kVXNlckFjY2Vzc1Rva2VuQm9keSxcbiAgICB9LCBvcHRpb25zKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmQtdXNlci1hY2NvdW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/end-user-accounts/end-user-accounts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-accounts/evm-accounts.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-accounts/evm-accounts.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEvmAccount: () => (/* binding */ createEvmAccount),\n/* harmony export */   exportEvmAccount: () => (/* binding */ exportEvmAccount),\n/* harmony export */   exportEvmAccountByName: () => (/* binding */ exportEvmAccountByName),\n/* harmony export */   getEvmAccount: () => (/* binding */ getEvmAccount),\n/* harmony export */   getEvmAccountByName: () => (/* binding */ getEvmAccountByName),\n/* harmony export */   importEvmAccount: () => (/* binding */ importEvmAccount),\n/* harmony export */   listEvmAccounts: () => (/* binding */ listEvmAccounts),\n/* harmony export */   sendEvmTransaction: () => (/* binding */ sendEvmTransaction),\n/* harmony export */   signEvmHash: () => (/* binding */ signEvmHash),\n/* harmony export */   signEvmMessage: () => (/* binding */ signEvmMessage),\n/* harmony export */   signEvmTransaction: () => (/* binding */ signEvmTransaction),\n/* harmony export */   signEvmTypedData: () => (/* binding */ signEvmTypedData),\n/* harmony export */   updateEvmAccount: () => (/* binding */ updateEvmAccount)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Lists the EVM accounts belonging to the developer's CDP Project.\nThe response is paginated, and by default, returns 20 accounts per page.\n * @summary List EVM accounts\n */\nconst listEvmAccounts = (params, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/evm/accounts`, method: \"GET\", params }, options);\n};\n/**\n * Creates a new EVM account.\n * @summary Create an EVM account\n */\nconst createEvmAccount = (createEvmAccountBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/accounts`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: createEvmAccountBody,\n    }, options);\n};\n/**\n * Gets an EVM account by its address.\n * @summary Get an EVM account by address\n */\nconst getEvmAccount = (address, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/evm/accounts/${address}`, method: \"GET\" }, options);\n};\n/**\n * Updates an existing EVM account. Use this to update the account's name or account-level policy.\n * @summary Update an EVM account\n */\nconst updateEvmAccount = (address, updateEvmAccountBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/accounts/${address}`,\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: updateEvmAccountBody,\n    }, options);\n};\n/**\n * Gets an EVM account by its name.\n * @summary Get an EVM account by name\n */\nconst getEvmAccountByName = (name, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/evm/accounts/by-name/${name}`, method: \"GET\" }, options);\n};\n/**\n * Signs a transaction with the given EVM account and sends it to the indicated supported network. This API handles nonce management and gas estimation, leaving the developer to provide only the minimal set of fields necessary to send the transaction. The transaction should be serialized as a hex string using [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/).\n\nThe transaction must be an [EIP-1559 dynamic fee transaction](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md).\n\n\n**Transaction fields and API behavior**\n\n- `to` *(Required)*: The address of the contract or account to send the transaction to.\n- `chainId` *(Ignored)*: The value of the `chainId` field in the transaction is ignored.\n  The transaction will be sent to the network indicated by the `network` field in the request body.\n\n- `nonce` *(Optional)*: The nonce to use for the transaction. If not provided, the API will assign\n   a nonce to the transaction based on the current state of the account.\n\n- `maxPriorityFeePerGas` *(Optional)*: The maximum priority fee per gas to use for the transaction.\n   If not provided, the API will estimate a value based on current network conditions.\n\n- `maxFeePerGas` *(Optional)*: The maximum fee per gas to use for the transaction.\n   If not provided, the API will estimate a value based on current network conditions.\n\n- `gasLimit` *(Optional)*: The gas limit to use for the transaction. If not provided, the API will estimate a value\n  based on the `to` and `data` fields of the transaction.\n\n- `value` *(Optional)*: The amount of ETH, in wei, to send with the transaction.\n- `data` *(Optional)*: The data to send with the transaction; only used for contract calls.\n- `accessList` *(Optional)*: The access list to use for the transaction.\n * @summary Send a transaction\n */\nconst sendEvmTransaction = (address, sendEvmTransactionBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/accounts/${address}/send/transaction`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: sendEvmTransactionBody,\n    }, options);\n};\n/**\n * Signs a transaction with the given EVM account.\nThe transaction should be serialized as a hex string using [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/).\n\nThe transaction must be an [EIP-1559 dynamic fee transaction](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md). The developer is responsible for ensuring that the unsigned transaction is valid, as the API will not validate the transaction.\n * @summary Sign a transaction\n */\nconst signEvmTransaction = (address, signEvmTransactionBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/accounts/${address}/sign/transaction`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: signEvmTransactionBody,\n    }, options);\n};\n/**\n * Signs an arbitrary 32 byte hash with the given EVM account.\n * @summary Sign a hash\n */\nconst signEvmHash = (address, signEvmHashBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/accounts/${address}/sign`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: signEvmHashBody,\n    }, options);\n};\n/**\n * Signs an [EIP-191](https://eips.ethereum.org/EIPS/eip-191) message with the given EVM account.\n\nPer the specification, the message in the request body is prepended with `0x19 <0x45 (E)> <thereum Signed Message:\\n\" + len(message)>` before being signed.\n * @summary Sign an EIP-191 message\n */\nconst signEvmMessage = (address, signEvmMessageBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/accounts/${address}/sign/message`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: signEvmMessageBody,\n    }, options);\n};\n/**\n * Signs [EIP-712](https://eips.ethereum.org/EIPS/eip-712) typed data with the given EVM account.\n * @summary Sign EIP-712 typed data\n */\nconst signEvmTypedData = (address, eIP712Message, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/accounts/${address}/sign/typed-data`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: eIP712Message,\n    }, options);\n};\n/**\n * Import an existing EVM account into the developer's CDP Project. This API should be called from the [CDP SDK](https://github.com/coinbase/cdp-sdk) to ensure that the associated private key is properly encrypted.\n * @summary Import an EVM account\n */\nconst importEvmAccount = (importEvmAccountBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/accounts/import`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: importEvmAccountBody,\n    }, options);\n};\n/**\n * Export an existing EVM account's private key. It is important to store the private key in a secure place after it's exported.\n * @summary Export an EVM account\n */\nconst exportEvmAccount = (address, exportEvmAccountBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/accounts/${address}/export`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: exportEvmAccountBody,\n    }, options);\n};\n/**\n * Export an existing EVM account's private key by its name. It is important to store the private key in a secure place after it's exported.\n * @summary Export an EVM account by name\n */\nconst exportEvmAccountByName = (name, exportEvmAccountByNameBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/accounts/export/by-name/${name}`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: exportEvmAccountByNameBody,\n    }, options);\n};\n//# sourceMappingURL=evm-accounts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-accounts/evm-accounts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-smart-accounts/evm-smart-accounts.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-smart-accounts/evm-smart-accounts.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEvmSmartAccount: () => (/* binding */ createEvmSmartAccount),\n/* harmony export */   createSpendPermission: () => (/* binding */ createSpendPermission),\n/* harmony export */   getEvmSmartAccount: () => (/* binding */ getEvmSmartAccount),\n/* harmony export */   getEvmSmartAccountByName: () => (/* binding */ getEvmSmartAccountByName),\n/* harmony export */   getUserOperation: () => (/* binding */ getUserOperation),\n/* harmony export */   listEvmSmartAccounts: () => (/* binding */ listEvmSmartAccounts),\n/* harmony export */   listSpendPermissions: () => (/* binding */ listSpendPermissions),\n/* harmony export */   prepareUserOperation: () => (/* binding */ prepareUserOperation),\n/* harmony export */   revokeSpendPermission: () => (/* binding */ revokeSpendPermission),\n/* harmony export */   sendUserOperation: () => (/* binding */ sendUserOperation),\n/* harmony export */   updateEvmSmartAccount: () => (/* binding */ updateEvmSmartAccount)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Lists the Smart Accounts belonging to the developer's CDP Project.\nThe response is paginated, and by default, returns 20 accounts per page.\n * @summary List Smart Accounts\n */\nconst listEvmSmartAccounts = (params, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/evm/smart-accounts`, method: \"GET\", params }, options);\n};\n/**\n * Creates a new Smart Account.\n * @summary Create a Smart Account\n */\nconst createEvmSmartAccount = (createEvmSmartAccountBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/smart-accounts`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: createEvmSmartAccountBody,\n    }, options);\n};\n/**\n * Gets a Smart Account by its name.\n * @summary Get a Smart Account by name\n */\nconst getEvmSmartAccountByName = (name, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/evm/smart-accounts/by-name/${name}`, method: \"GET\" }, options);\n};\n/**\n * Gets a Smart Account by its address.\n * @summary Get a Smart Account by address\n */\nconst getEvmSmartAccount = (address, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/evm/smart-accounts/${address}`, method: \"GET\" }, options);\n};\n/**\n * Updates an existing EVM smart account. Use this to update the smart account's name.\n * @summary Update an EVM Smart Account\n */\nconst updateEvmSmartAccount = (address, updateEvmSmartAccountBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/smart-accounts/${address}`,\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: updateEvmSmartAccountBody,\n    }, options);\n};\n/**\n * Prepares a new user operation on a Smart Account for a specific network.\n * @summary Prepare a user operation\n */\nconst prepareUserOperation = (address, prepareUserOperationBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/smart-accounts/${address}/user-operations`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: prepareUserOperationBody,\n    }, options);\n};\n/**\n * Gets a user operation by its hash.\n * @summary Get a user operation\n */\nconst getUserOperation = (address, userOpHash, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/evm/smart-accounts/${address}/user-operations/${userOpHash}`, method: \"GET\" }, options);\n};\n/**\n * Sends a user operation with a signature.\nThe payload to sign must be the `userOpHash` field of the user operation. This hash should be signed directly (not using `personal_sign` or EIP-191 message hashing).\nThe signature must be 65 bytes in length, consisting of: - 32 bytes for the `r` value - 32 bytes for the `s` value - 1 byte for the `v` value (must be 27 or 28)\nIf using the CDP Paymaster, the user operation must be signed and sent within 2 minutes of being prepared.\n * @summary Send a user operation\n */\nconst sendUserOperation = (address, userOpHash, sendUserOperationBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/smart-accounts/${address}/user-operations/${userOpHash}/send`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: sendUserOperationBody,\n    }, options);\n};\n/**\n * Creates a spend permission for the given smart account address.\n * @summary Create a spend permission\n */\nconst createSpendPermission = (address, createSpendPermissionRequest, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/smart-accounts/${address}/spend-permissions`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: createSpendPermissionRequest,\n    }, options);\n};\n/**\n * Lists spend permission for the given smart account address.\n * @summary List spend permissions\n */\nconst listSpendPermissions = (address, params, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/evm/smart-accounts/${address}/spend-permissions/list`, method: \"GET\", params }, options);\n};\n/**\n * Revokes an existing spend permission.\n * @summary Revoke a spend permission\n */\nconst revokeSpendPermission = (address, revokeSpendPermissionRequest, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/smart-accounts/${address}/spend-permissions/revoke`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: revokeSpendPermissionRequest,\n    }, options);\n};\n//# sourceMappingURL=evm-smart-accounts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-smart-accounts/evm-smart-accounts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-swaps/evm-swaps.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-swaps/evm-swaps.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEvmSwapQuote: () => (/* binding */ createEvmSwapQuote),\n/* harmony export */   getEvmSwapPrice: () => (/* binding */ getEvmSwapPrice)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Get a price estimate for a swap between two tokens on an EVM network.\n * @summary Get a price estimate for a swap\n */\nconst getEvmSwapPrice = (params, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/evm/swaps/quote`, method: \"GET\", params }, options);\n};\n/**\n * Create a swap quote, which includes the payload to sign as well as the transaction data needed to execute the swap. The developer is responsible for signing the payload and submitting the transaction to the network in order to execute the swap.\n * @summary Create a swap quote\n */\nconst createEvmSwapQuote = (createEvmSwapQuoteBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/swaps`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: createEvmSwapQuoteBody,\n    }, options);\n};\n//# sourceMappingURL=evm-swaps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvZXZtLXN3YXBzL2V2bS1zd2Fwcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVksR0FBRyxtREFBbUQ7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyw4REFBWTtBQUN2QjtBQUNBO0FBQ0EsbUJBQW1CLG9DQUFvQztBQUN2RDtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL29wZW5hcGktY2xpZW50L2dlbmVyYXRlZC9ldm0tc3dhcHMvZXZtLXN3YXBzLmpzPzUxODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2RwQXBpQ2xpZW50IH0gZnJvbSBcIi4uLy4uL2NkcEFwaUNsaWVudC5qc1wiO1xuLyoqXG4gKiBHZXQgYSBwcmljZSBlc3RpbWF0ZSBmb3IgYSBzd2FwIGJldHdlZW4gdHdvIHRva2VucyBvbiBhbiBFVk0gbmV0d29yay5cbiAqIEBzdW1tYXJ5IEdldCBhIHByaWNlIGVzdGltYXRlIGZvciBhIHN3YXBcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEV2bVN3YXBQcmljZSA9IChwYXJhbXMsIG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gY2RwQXBpQ2xpZW50KHsgdXJsOiBgL3YyL2V2bS9zd2Fwcy9xdW90ZWAsIG1ldGhvZDogXCJHRVRcIiwgcGFyYW1zIH0sIG9wdGlvbnMpO1xufTtcbi8qKlxuICogQ3JlYXRlIGEgc3dhcCBxdW90ZSwgd2hpY2ggaW5jbHVkZXMgdGhlIHBheWxvYWQgdG8gc2lnbiBhcyB3ZWxsIGFzIHRoZSB0cmFuc2FjdGlvbiBkYXRhIG5lZWRlZCB0byBleGVjdXRlIHRoZSBzd2FwLiBUaGUgZGV2ZWxvcGVyIGlzIHJlc3BvbnNpYmxlIGZvciBzaWduaW5nIHRoZSBwYXlsb2FkIGFuZCBzdWJtaXR0aW5nIHRoZSB0cmFuc2FjdGlvbiB0byB0aGUgbmV0d29yayBpbiBvcmRlciB0byBleGVjdXRlIHRoZSBzd2FwLlxuICogQHN1bW1hcnkgQ3JlYXRlIGEgc3dhcCBxdW90ZVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlRXZtU3dhcFF1b3RlID0gKGNyZWF0ZUV2bVN3YXBRdW90ZUJvZHksIG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gY2RwQXBpQ2xpZW50KHtcbiAgICAgICAgdXJsOiBgL3YyL2V2bS9zd2Fwc2AsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgZGF0YTogY3JlYXRlRXZtU3dhcFF1b3RlQm9keSxcbiAgICB9LCBvcHRpb25zKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldm0tc3dhcHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-swaps/evm-swaps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-token-balances/evm-token-balances.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-token-balances/evm-token-balances.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listEvmTokenBalances: () => (/* binding */ listEvmTokenBalances)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Lists the token balances of an EVM address on a given network. The balances include ERC-20 tokens and the native gas token (usually ETH). The response is paginated, and by default, returns 20 balances per page.\n **Note:** This endpoint is still under development and does not yet provide strong freshness guarantees. Specifically, balances of new tokens can, on occasion, take up to ~30 seconds to appear, while balances of tokens already belonging to an address will generally be close to chain tip. Freshness of new token balances will improve over the coming weeks.\n * @summary List EVM token balances\n */\nconst listEvmTokenBalances = (network, address, params, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/evm/token-balances/${network}/${address}`, method: \"GET\", params }, options);\n};\n//# sourceMappingURL=evm-token-balances.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvZXZtLXRva2VuLWJhbGFuY2VzL2V2bS10b2tlbi1iYWxhbmNlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDhEQUFZLEdBQUcsK0JBQStCLFFBQVEsR0FBRyxRQUFRLDBCQUEwQjtBQUN0RztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL29wZW5hcGktY2xpZW50L2dlbmVyYXRlZC9ldm0tdG9rZW4tYmFsYW5jZXMvZXZtLXRva2VuLWJhbGFuY2VzLmpzPzEzODciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2RwQXBpQ2xpZW50IH0gZnJvbSBcIi4uLy4uL2NkcEFwaUNsaWVudC5qc1wiO1xuLyoqXG4gKiBMaXN0cyB0aGUgdG9rZW4gYmFsYW5jZXMgb2YgYW4gRVZNIGFkZHJlc3Mgb24gYSBnaXZlbiBuZXR3b3JrLiBUaGUgYmFsYW5jZXMgaW5jbHVkZSBFUkMtMjAgdG9rZW5zIGFuZCB0aGUgbmF0aXZlIGdhcyB0b2tlbiAodXN1YWxseSBFVEgpLiBUaGUgcmVzcG9uc2UgaXMgcGFnaW5hdGVkLCBhbmQgYnkgZGVmYXVsdCwgcmV0dXJucyAyMCBiYWxhbmNlcyBwZXIgcGFnZS5cbiAqKk5vdGU6KiogVGhpcyBlbmRwb2ludCBpcyBzdGlsbCB1bmRlciBkZXZlbG9wbWVudCBhbmQgZG9lcyBub3QgeWV0IHByb3ZpZGUgc3Ryb25nIGZyZXNobmVzcyBndWFyYW50ZWVzLiBTcGVjaWZpY2FsbHksIGJhbGFuY2VzIG9mIG5ldyB0b2tlbnMgY2FuLCBvbiBvY2Nhc2lvbiwgdGFrZSB1cCB0byB+MzAgc2Vjb25kcyB0byBhcHBlYXIsIHdoaWxlIGJhbGFuY2VzIG9mIHRva2VucyBhbHJlYWR5IGJlbG9uZ2luZyB0byBhbiBhZGRyZXNzIHdpbGwgZ2VuZXJhbGx5IGJlIGNsb3NlIHRvIGNoYWluIHRpcC4gRnJlc2huZXNzIG9mIG5ldyB0b2tlbiBiYWxhbmNlcyB3aWxsIGltcHJvdmUgb3ZlciB0aGUgY29taW5nIHdlZWtzLlxuICogQHN1bW1hcnkgTGlzdCBFVk0gdG9rZW4gYmFsYW5jZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGxpc3RFdm1Ub2tlbkJhbGFuY2VzID0gKG5ldHdvcmssIGFkZHJlc3MsIHBhcmFtcywgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBjZHBBcGlDbGllbnQoeyB1cmw6IGAvdjIvZXZtL3Rva2VuLWJhbGFuY2VzLyR7bmV0d29ya30vJHthZGRyZXNzfWAsIG1ldGhvZDogXCJHRVRcIiwgcGFyYW1zIH0sIG9wdGlvbnMpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2bS10b2tlbi1iYWxhbmNlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-token-balances/evm-token-balances.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/faucets/faucets.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/faucets/faucets.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestEvmFaucet: () => (/* binding */ requestEvmFaucet),\n/* harmony export */   requestSolanaFaucet: () => (/* binding */ requestSolanaFaucet)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Request funds from the CDP Faucet on supported EVM test networks.\n\nFaucets are available for ETH, USDC, EURC, and cbBTC on Base Sepolia and Ethereum Sepolia, and for ETH only on Ethereum Hoodi.\n\nTo prevent abuse, we enforce rate limits within a rolling 24-hour window to control the amount of funds that can be requested.\nThese limits are applied at both the CDP User level and the blockchain address level.\nA single blockchain address cannot exceed the specified limits, even if multiple users submit requests to the same address.\n\n| Token | Amount per Faucet Request |Rolling 24-hour window Rate Limits|\n|:-----:|:-------------------------:|:--------------------------------:|\n| ETH   | 0.0001 ETH                | 0.1 ETH                          |\n| USDC  | 1 USDC                    | 10 USDC                          |\n| EURC  | 1 EURC                    | 10 EURC                          |\n| cbBTC | 0.0001 cbBTC              | 0.001 cbBTC                      |\n\n * @summary Request funds on EVM test networks\n */\nconst requestEvmFaucet = (requestEvmFaucetBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/evm/faucet`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: requestEvmFaucetBody,\n    }, options);\n};\n/**\n * Request funds from the CDP Faucet on Solana devnet.\n\nFaucets are available for SOL.\n\nTo prevent abuse, we enforce rate limits within a rolling 24-hour window to control the amount of funds that can be requested.\nThese limits are applied at both the CDP Project level and the blockchain address level.\nA single blockchain address cannot exceed the specified limits, even if multiple users submit requests to the same address.\n\n| Token | Amount per Faucet Request |Rolling 24-hour window Rate Limits|\n|:-----:|:-------------------------:|:--------------------------------:|\n| SOL   | 0.00125 SOL               | 0.0125 SOL                       |\n| USDC  | 1 USDC                    | 10 USDC                          |\n\n * @summary Request funds on Solana devnet\n */\nconst requestSolanaFaucet = (requestSolanaFaucetBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/solana/faucet`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: requestSolanaFaucetBody,\n    }, options);\n};\n//# sourceMappingURL=faucets.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvZmF1Y2V0cy9mYXVjZXRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUNyRDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNPO0FBQ1AsV0FBVyw4REFBWTtBQUN2QjtBQUNBO0FBQ0EsbUJBQW1CLG9DQUFvQztBQUN2RDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVk7QUFDdkI7QUFDQTtBQUNBLG1CQUFtQixvQ0FBb0M7QUFDdkQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvZmF1Y2V0cy9mYXVjZXRzLmpzP2NjOWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2RwQXBpQ2xpZW50IH0gZnJvbSBcIi4uLy4uL2NkcEFwaUNsaWVudC5qc1wiO1xuLyoqXG4gKiBSZXF1ZXN0IGZ1bmRzIGZyb20gdGhlIENEUCBGYXVjZXQgb24gc3VwcG9ydGVkIEVWTSB0ZXN0IG5ldHdvcmtzLlxuXG5GYXVjZXRzIGFyZSBhdmFpbGFibGUgZm9yIEVUSCwgVVNEQywgRVVSQywgYW5kIGNiQlRDIG9uIEJhc2UgU2Vwb2xpYSBhbmQgRXRoZXJldW0gU2Vwb2xpYSwgYW5kIGZvciBFVEggb25seSBvbiBFdGhlcmV1bSBIb29kaS5cblxuVG8gcHJldmVudCBhYnVzZSwgd2UgZW5mb3JjZSByYXRlIGxpbWl0cyB3aXRoaW4gYSByb2xsaW5nIDI0LWhvdXIgd2luZG93IHRvIGNvbnRyb2wgdGhlIGFtb3VudCBvZiBmdW5kcyB0aGF0IGNhbiBiZSByZXF1ZXN0ZWQuXG5UaGVzZSBsaW1pdHMgYXJlIGFwcGxpZWQgYXQgYm90aCB0aGUgQ0RQIFVzZXIgbGV2ZWwgYW5kIHRoZSBibG9ja2NoYWluIGFkZHJlc3MgbGV2ZWwuXG5BIHNpbmdsZSBibG9ja2NoYWluIGFkZHJlc3MgY2Fubm90IGV4Y2VlZCB0aGUgc3BlY2lmaWVkIGxpbWl0cywgZXZlbiBpZiBtdWx0aXBsZSB1c2VycyBzdWJtaXQgcmVxdWVzdHMgdG8gdGhlIHNhbWUgYWRkcmVzcy5cblxufCBUb2tlbiB8IEFtb3VudCBwZXIgRmF1Y2V0IFJlcXVlc3QgfFJvbGxpbmcgMjQtaG91ciB3aW5kb3cgUmF0ZSBMaW1pdHN8XG58Oi0tLS0tOnw6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTp8Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tOnxcbnwgRVRIICAgfCAwLjAwMDEgRVRIICAgICAgICAgICAgICAgIHwgMC4xIEVUSCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCBVU0RDICB8IDEgVVNEQyAgICAgICAgICAgICAgICAgICAgfCAxMCBVU0RDICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IEVVUkMgIHwgMSBFVVJDICAgICAgICAgICAgICAgICAgICB8IDEwIEVVUkMgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgY2JCVEMgfCAwLjAwMDEgY2JCVEMgICAgICAgICAgICAgIHwgMC4wMDEgY2JCVEMgICAgICAgICAgICAgICAgICAgICAgfFxuXG4gKiBAc3VtbWFyeSBSZXF1ZXN0IGZ1bmRzIG9uIEVWTSB0ZXN0IG5ldHdvcmtzXG4gKi9cbmV4cG9ydCBjb25zdCByZXF1ZXN0RXZtRmF1Y2V0ID0gKHJlcXVlc3RFdm1GYXVjZXRCb2R5LCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGNkcEFwaUNsaWVudCh7XG4gICAgICAgIHVybDogYC92Mi9ldm0vZmF1Y2V0YCxcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgICBkYXRhOiByZXF1ZXN0RXZtRmF1Y2V0Qm9keSxcbiAgICB9LCBvcHRpb25zKTtcbn07XG4vKipcbiAqIFJlcXVlc3QgZnVuZHMgZnJvbSB0aGUgQ0RQIEZhdWNldCBvbiBTb2xhbmEgZGV2bmV0LlxuXG5GYXVjZXRzIGFyZSBhdmFpbGFibGUgZm9yIFNPTC5cblxuVG8gcHJldmVudCBhYnVzZSwgd2UgZW5mb3JjZSByYXRlIGxpbWl0cyB3aXRoaW4gYSByb2xsaW5nIDI0LWhvdXIgd2luZG93IHRvIGNvbnRyb2wgdGhlIGFtb3VudCBvZiBmdW5kcyB0aGF0IGNhbiBiZSByZXF1ZXN0ZWQuXG5UaGVzZSBsaW1pdHMgYXJlIGFwcGxpZWQgYXQgYm90aCB0aGUgQ0RQIFByb2plY3QgbGV2ZWwgYW5kIHRoZSBibG9ja2NoYWluIGFkZHJlc3MgbGV2ZWwuXG5BIHNpbmdsZSBibG9ja2NoYWluIGFkZHJlc3MgY2Fubm90IGV4Y2VlZCB0aGUgc3BlY2lmaWVkIGxpbWl0cywgZXZlbiBpZiBtdWx0aXBsZSB1c2VycyBzdWJtaXQgcmVxdWVzdHMgdG8gdGhlIHNhbWUgYWRkcmVzcy5cblxufCBUb2tlbiB8IEFtb3VudCBwZXIgRmF1Y2V0IFJlcXVlc3QgfFJvbGxpbmcgMjQtaG91ciB3aW5kb3cgUmF0ZSBMaW1pdHN8XG58Oi0tLS0tOnw6LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLTp8Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tOnxcbnwgU09MICAgfCAwLjAwMTI1IFNPTCAgICAgICAgICAgICAgIHwgMC4wMTI1IFNPTCAgICAgICAgICAgICAgICAgICAgICAgfFxufCBVU0RDICB8IDEgVVNEQyAgICAgICAgICAgICAgICAgICAgfCAxMCBVU0RDICAgICAgICAgICAgICAgICAgICAgICAgICB8XG5cbiAqIEBzdW1tYXJ5IFJlcXVlc3QgZnVuZHMgb24gU29sYW5hIGRldm5ldFxuICovXG5leHBvcnQgY29uc3QgcmVxdWVzdFNvbGFuYUZhdWNldCA9IChyZXF1ZXN0U29sYW5hRmF1Y2V0Qm9keSwgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBjZHBBcGlDbGllbnQoe1xuICAgICAgICB1cmw6IGAvdjIvc29sYW5hL2ZhdWNldGAsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgZGF0YTogcmVxdWVzdFNvbGFuYUZhdWNldEJvZHksXG4gICAgfSwgb3B0aW9ucyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmF1Y2V0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/faucets/faucets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/onchain-data/onchain-data.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/onchain-data/onchain-data.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listDataTokenBalances: () => (/* binding */ listDataTokenBalances),\n/* harmony export */   listTokensForAccount: () => (/* binding */ listTokensForAccount)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Retrieve all ERC-20 token contract addresses that an account has ever received tokens from.\nAnalyzes transaction history to discover token interactions.\n\n * @summary List token addresses for account\n */\nconst listTokensForAccount = (network, address, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/data/evm/token-ownership/${network}/${address}`, method: \"GET\" }, options);\n};\n/**\n * Lists the token balances of an EVM address on a given network. The balances include ERC-20 tokens and the native gas token (usually ETH). The response is paginated, and by default, returns 20 balances per page.\n\n**Note:** This endpoint provides <1 second freshness from chain tip, <500ms response latency for wallets with reasonable token history, and 99.9% uptime for production use.\n * @summary List EVM token balances\n */\nconst listDataTokenBalances = (network, address, params, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/data/evm/token-balances/${network}/${address}`, method: \"GET\", params }, options);\n};\n//# sourceMappingURL=onchain-data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvb25jaGFpbi1kYXRhL29uY2hhaW4tZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFDckQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVksR0FBRyxxQ0FBcUMsUUFBUSxHQUFHLFFBQVEsa0JBQWtCO0FBQ3BHO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVksR0FBRyxvQ0FBb0MsUUFBUSxHQUFHLFFBQVEsMEJBQTBCO0FBQzNHO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vb3BlbmFwaS1jbGllbnQvZ2VuZXJhdGVkL29uY2hhaW4tZGF0YS9vbmNoYWluLWRhdGEuanM/OWViOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjZHBBcGlDbGllbnQgfSBmcm9tIFwiLi4vLi4vY2RwQXBpQ2xpZW50LmpzXCI7XG4vKipcbiAqIFJldHJpZXZlIGFsbCBFUkMtMjAgdG9rZW4gY29udHJhY3QgYWRkcmVzc2VzIHRoYXQgYW4gYWNjb3VudCBoYXMgZXZlciByZWNlaXZlZCB0b2tlbnMgZnJvbS5cbkFuYWx5emVzIHRyYW5zYWN0aW9uIGhpc3RvcnkgdG8gZGlzY292ZXIgdG9rZW4gaW50ZXJhY3Rpb25zLlxuXG4gKiBAc3VtbWFyeSBMaXN0IHRva2VuIGFkZHJlc3NlcyBmb3IgYWNjb3VudFxuICovXG5leHBvcnQgY29uc3QgbGlzdFRva2Vuc0ZvckFjY291bnQgPSAobmV0d29yaywgYWRkcmVzcywgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBjZHBBcGlDbGllbnQoeyB1cmw6IGAvdjIvZGF0YS9ldm0vdG9rZW4tb3duZXJzaGlwLyR7bmV0d29ya30vJHthZGRyZXNzfWAsIG1ldGhvZDogXCJHRVRcIiB9LCBvcHRpb25zKTtcbn07XG4vKipcbiAqIExpc3RzIHRoZSB0b2tlbiBiYWxhbmNlcyBvZiBhbiBFVk0gYWRkcmVzcyBvbiBhIGdpdmVuIG5ldHdvcmsuIFRoZSBiYWxhbmNlcyBpbmNsdWRlIEVSQy0yMCB0b2tlbnMgYW5kIHRoZSBuYXRpdmUgZ2FzIHRva2VuICh1c3VhbGx5IEVUSCkuIFRoZSByZXNwb25zZSBpcyBwYWdpbmF0ZWQsIGFuZCBieSBkZWZhdWx0LCByZXR1cm5zIDIwIGJhbGFuY2VzIHBlciBwYWdlLlxuXG4qKk5vdGU6KiogVGhpcyBlbmRwb2ludCBwcm92aWRlcyA8MSBzZWNvbmQgZnJlc2huZXNzIGZyb20gY2hhaW4gdGlwLCA8NTAwbXMgcmVzcG9uc2UgbGF0ZW5jeSBmb3Igd2FsbGV0cyB3aXRoIHJlYXNvbmFibGUgdG9rZW4gaGlzdG9yeSwgYW5kIDk5LjklIHVwdGltZSBmb3IgcHJvZHVjdGlvbiB1c2UuXG4gKiBAc3VtbWFyeSBMaXN0IEVWTSB0b2tlbiBiYWxhbmNlc1xuICovXG5leHBvcnQgY29uc3QgbGlzdERhdGFUb2tlbkJhbGFuY2VzID0gKG5ldHdvcmssIGFkZHJlc3MsIHBhcmFtcywgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBjZHBBcGlDbGllbnQoeyB1cmw6IGAvdjIvZGF0YS9ldm0vdG9rZW4tYmFsYW5jZXMvJHtuZXR3b3JrfS8ke2FkZHJlc3N9YCwgbWV0aG9kOiBcIkdFVFwiLCBwYXJhbXMgfSwgb3B0aW9ucyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25jaGFpbi1kYXRhLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/onchain-data/onchain-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/onramp/onramp.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/onramp/onramp.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOnrampOrder: () => (/* binding */ createOnrampOrder),\n/* harmony export */   createOnrampSession: () => (/* binding */ createOnrampSession),\n/* harmony export */   getOnrampOrderById: () => (/* binding */ getOnrampOrderById)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Create a new Onramp order or get a quote for an Onramp order. Either `paymentAmount` or `purchaseAmount` must be provided.\n\nThis API currently only supports the payment method `GUEST_CHECKOUT_APPLE_PAY`, and the `paymentLink` returned will only work in iOS apps. We do not support web integration via iframes at this time.\n\nFor detailed integration instructions and to get access to this API, refer to the  [Apple Pay Onramp API docs](https://docs.cdp.coinbase.com/onramp-&-offramp/onramp-apis/apple-pay-onramp-api).\n * @summary Create an onramp order\n */\nconst createOnrampOrder = (createOnrampOrderBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/onramp/orders`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: createOnrampOrderBody,\n    }, options);\n};\n/**\n * Get an onramp order by ID.\n * @summary Get an onramp order by ID\n */\nconst getOnrampOrderById = (orderId, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/onramp/orders/${orderId}`, method: \"GET\" }, options);\n};\n/**\n * Returns a single-use URL for an Onramp session. This API provides flexible  functionality based on the parameters provided, supporting three cases:\n\n**Important**: The returned URL is single-use only. Once a user visits the URL,  no one else can access it.\n## Use Cases\n### 1. Basic Session (Minimum Parameters)\n**Required**: `destinationAddress`, `purchaseCurrency`, `destinationNetwork`\n\n**Returns**: Basic single-use onramp URL. The `quote` object will not be included in the response.\n### 2. One-Click Onramp URL\n**Required**: Basic parameters + `paymentAmount`, `paymentCurrency`\n\n**Returns**: One-click onramp URL for streamlined checkout. The `quote` object will not be included in the response.\n### 3. One-Click Onramp URL with Quote\n**Required**: One-Click Onramp parameters + `paymentMethod`, `country`, `subdivision`\n\n**Returns**: Complete pricing quote and one-click onramp URL. Both `session` and `quote` objects will be included in the response.\n * @summary Create an onramp session\n */\nconst createOnrampSession = (createOnrampSessionBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/onramp/sessions`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: createOnrampSessionBody,\n    }, options);\n};\n//# sourceMappingURL=onramp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvb25yYW1wL29ucmFtcC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXFEO0FBQ3JEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDhEQUFZO0FBQ3ZCO0FBQ0E7QUFDQSxtQkFBbUIsb0NBQW9DO0FBQ3ZEO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVksR0FBRywwQkFBMEIsUUFBUSxrQkFBa0I7QUFDOUU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDhEQUFZO0FBQ3ZCO0FBQ0E7QUFDQSxtQkFBbUIsb0NBQW9DO0FBQ3ZEO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vb3BlbmFwaS1jbGllbnQvZ2VuZXJhdGVkL29ucmFtcC9vbnJhbXAuanM/MTJmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjZHBBcGlDbGllbnQgfSBmcm9tIFwiLi4vLi4vY2RwQXBpQ2xpZW50LmpzXCI7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBPbnJhbXAgb3JkZXIgb3IgZ2V0IGEgcXVvdGUgZm9yIGFuIE9ucmFtcCBvcmRlci4gRWl0aGVyIGBwYXltZW50QW1vdW50YCBvciBgcHVyY2hhc2VBbW91bnRgIG11c3QgYmUgcHJvdmlkZWQuXG5cblRoaXMgQVBJIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIHRoZSBwYXltZW50IG1ldGhvZCBgR1VFU1RfQ0hFQ0tPVVRfQVBQTEVfUEFZYCwgYW5kIHRoZSBgcGF5bWVudExpbmtgIHJldHVybmVkIHdpbGwgb25seSB3b3JrIGluIGlPUyBhcHBzLiBXZSBkbyBub3Qgc3VwcG9ydCB3ZWIgaW50ZWdyYXRpb24gdmlhIGlmcmFtZXMgYXQgdGhpcyB0aW1lLlxuXG5Gb3IgZGV0YWlsZWQgaW50ZWdyYXRpb24gaW5zdHJ1Y3Rpb25zIGFuZCB0byBnZXQgYWNjZXNzIHRvIHRoaXMgQVBJLCByZWZlciB0byB0aGUgIFtBcHBsZSBQYXkgT25yYW1wIEFQSSBkb2NzXShodHRwczovL2RvY3MuY2RwLmNvaW5iYXNlLmNvbS9vbnJhbXAtJi1vZmZyYW1wL29ucmFtcC1hcGlzL2FwcGxlLXBheS1vbnJhbXAtYXBpKS5cbiAqIEBzdW1tYXJ5IENyZWF0ZSBhbiBvbnJhbXAgb3JkZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZU9ucmFtcE9yZGVyID0gKGNyZWF0ZU9ucmFtcE9yZGVyQm9keSwgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBjZHBBcGlDbGllbnQoe1xuICAgICAgICB1cmw6IGAvdjIvb25yYW1wL29yZGVyc2AsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgZGF0YTogY3JlYXRlT25yYW1wT3JkZXJCb2R5LFxuICAgIH0sIG9wdGlvbnMpO1xufTtcbi8qKlxuICogR2V0IGFuIG9ucmFtcCBvcmRlciBieSBJRC5cbiAqIEBzdW1tYXJ5IEdldCBhbiBvbnJhbXAgb3JkZXIgYnkgSURcbiAqL1xuZXhwb3J0IGNvbnN0IGdldE9ucmFtcE9yZGVyQnlJZCA9IChvcmRlcklkLCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGNkcEFwaUNsaWVudCh7IHVybDogYC92Mi9vbnJhbXAvb3JkZXJzLyR7b3JkZXJJZH1gLCBtZXRob2Q6IFwiR0VUXCIgfSwgb3B0aW9ucyk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgc2luZ2xlLXVzZSBVUkwgZm9yIGFuIE9ucmFtcCBzZXNzaW9uLiBUaGlzIEFQSSBwcm92aWRlcyBmbGV4aWJsZSAgZnVuY3Rpb25hbGl0eSBiYXNlZCBvbiB0aGUgcGFyYW1ldGVycyBwcm92aWRlZCwgc3VwcG9ydGluZyB0aHJlZSBjYXNlczpcblxuKipJbXBvcnRhbnQqKjogVGhlIHJldHVybmVkIFVSTCBpcyBzaW5nbGUtdXNlIG9ubHkuIE9uY2UgYSB1c2VyIHZpc2l0cyB0aGUgVVJMLCAgbm8gb25lIGVsc2UgY2FuIGFjY2VzcyBpdC5cbiMjIFVzZSBDYXNlc1xuIyMjIDEuIEJhc2ljIFNlc3Npb24gKE1pbmltdW0gUGFyYW1ldGVycylcbioqUmVxdWlyZWQqKjogYGRlc3RpbmF0aW9uQWRkcmVzc2AsIGBwdXJjaGFzZUN1cnJlbmN5YCwgYGRlc3RpbmF0aW9uTmV0d29ya2BcblxuKipSZXR1cm5zKio6IEJhc2ljIHNpbmdsZS11c2Ugb25yYW1wIFVSTC4gVGhlIGBxdW90ZWAgb2JqZWN0IHdpbGwgbm90IGJlIGluY2x1ZGVkIGluIHRoZSByZXNwb25zZS5cbiMjIyAyLiBPbmUtQ2xpY2sgT25yYW1wIFVSTFxuKipSZXF1aXJlZCoqOiBCYXNpYyBwYXJhbWV0ZXJzICsgYHBheW1lbnRBbW91bnRgLCBgcGF5bWVudEN1cnJlbmN5YFxuXG4qKlJldHVybnMqKjogT25lLWNsaWNrIG9ucmFtcCBVUkwgZm9yIHN0cmVhbWxpbmVkIGNoZWNrb3V0LiBUaGUgYHF1b3RlYCBvYmplY3Qgd2lsbCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3BvbnNlLlxuIyMjIDMuIE9uZS1DbGljayBPbnJhbXAgVVJMIHdpdGggUXVvdGVcbioqUmVxdWlyZWQqKjogT25lLUNsaWNrIE9ucmFtcCBwYXJhbWV0ZXJzICsgYHBheW1lbnRNZXRob2RgLCBgY291bnRyeWAsIGBzdWJkaXZpc2lvbmBcblxuKipSZXR1cm5zKio6IENvbXBsZXRlIHByaWNpbmcgcXVvdGUgYW5kIG9uZS1jbGljayBvbnJhbXAgVVJMLiBCb3RoIGBzZXNzaW9uYCBhbmQgYHF1b3RlYCBvYmplY3RzIHdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3BvbnNlLlxuICogQHN1bW1hcnkgQ3JlYXRlIGFuIG9ucmFtcCBzZXNzaW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVPbnJhbXBTZXNzaW9uID0gKGNyZWF0ZU9ucmFtcFNlc3Npb25Cb2R5LCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGNkcEFwaUNsaWVudCh7XG4gICAgICAgIHVybDogYC92Mi9vbnJhbXAvc2Vzc2lvbnNgLFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgIGRhdGE6IGNyZWF0ZU9ucmFtcFNlc3Npb25Cb2R5LFxuICAgIH0sIG9wdGlvbnMpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ucmFtcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/onramp/onramp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/payments-alpha/payments-alpha.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/payments-alpha/payments-alpha.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPaymentTransferQuote: () => (/* binding */ createPaymentTransferQuote),\n/* harmony export */   executePaymentTransferQuote: () => (/* binding */ executePaymentTransferQuote),\n/* harmony export */   getCryptoRails: () => (/* binding */ getCryptoRails),\n/* harmony export */   getPaymentMethods: () => (/* binding */ getPaymentMethods),\n/* harmony export */   getPaymentTransfer: () => (/* binding */ getPaymentTransfer)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Gets the fiat payment methods that can be used to send funds or receive funds. This is the list of payment methods configured for your account.\n * @summary Get the fiat payment methods\n */\nconst getPaymentMethods = (options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/payments/rails/payment-methods`, method: \"GET\" }, options);\n};\n/**\n * Gets the crypto rails that can be used to send funds or receive funds.\n * @summary Get the crypto rails\n */\nconst getCryptoRails = (params, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/payments/rails/crypto`, method: \"GET\", params }, options);\n};\n/**\n * Creates a new transfer quote, which can then be executed using the Execute a transfer quote endpoint. If you want to automatically execute the transfer without needing to confirm, specify execute as true.\n * @summary Create a transfer quote\n */\nconst createPaymentTransferQuote = (createPaymentTransferQuoteBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/payments/transfers`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: createPaymentTransferQuoteBody,\n    }, options);\n};\n/**\n * Executes a transfer quote which was created using the Create a transfer quote endpoint.\n * @summary Execute a transfer quote\n */\nconst executePaymentTransferQuote = (transferId, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/payments/transfers/${transferId}/execute`, method: \"POST\" }, options);\n};\n/**\n * Gets a transfer by ID.\n * @summary Get a transfer by ID\n */\nconst getPaymentTransfer = (transferId, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/payments/transfers/${transferId}`, method: \"GET\" }, options);\n};\n//# sourceMappingURL=payments-alpha.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvcGF5bWVudHMtYWxwaGEvcGF5bWVudHMtYWxwaGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDhEQUFZLEdBQUcsMERBQTBEO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVksR0FBRyx5REFBeUQ7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyw4REFBWTtBQUN2QjtBQUNBO0FBQ0EsbUJBQW1CLG9DQUFvQztBQUN2RDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDhEQUFZLEdBQUcsK0JBQStCLFdBQVcsMkJBQTJCO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVksR0FBRywrQkFBK0IsV0FBVyxrQkFBa0I7QUFDdEY7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvcGF5bWVudHMtYWxwaGEvcGF5bWVudHMtYWxwaGEuanM/MmFkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjZHBBcGlDbGllbnQgfSBmcm9tIFwiLi4vLi4vY2RwQXBpQ2xpZW50LmpzXCI7XG4vKipcbiAqIEdldHMgdGhlIGZpYXQgcGF5bWVudCBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZWQgdG8gc2VuZCBmdW5kcyBvciByZWNlaXZlIGZ1bmRzLiBUaGlzIGlzIHRoZSBsaXN0IG9mIHBheW1lbnQgbWV0aG9kcyBjb25maWd1cmVkIGZvciB5b3VyIGFjY291bnQuXG4gKiBAc3VtbWFyeSBHZXQgdGhlIGZpYXQgcGF5bWVudCBtZXRob2RzXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQYXltZW50TWV0aG9kcyA9IChvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGNkcEFwaUNsaWVudCh7IHVybDogYC92Mi9wYXltZW50cy9yYWlscy9wYXltZW50LW1ldGhvZHNgLCBtZXRob2Q6IFwiR0VUXCIgfSwgb3B0aW9ucyk7XG59O1xuLyoqXG4gKiBHZXRzIHRoZSBjcnlwdG8gcmFpbHMgdGhhdCBjYW4gYmUgdXNlZCB0byBzZW5kIGZ1bmRzIG9yIHJlY2VpdmUgZnVuZHMuXG4gKiBAc3VtbWFyeSBHZXQgdGhlIGNyeXB0byByYWlsc1xuICovXG5leHBvcnQgY29uc3QgZ2V0Q3J5cHRvUmFpbHMgPSAocGFyYW1zLCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGNkcEFwaUNsaWVudCh7IHVybDogYC92Mi9wYXltZW50cy9yYWlscy9jcnlwdG9gLCBtZXRob2Q6IFwiR0VUXCIsIHBhcmFtcyB9LCBvcHRpb25zKTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdHJhbnNmZXIgcXVvdGUsIHdoaWNoIGNhbiB0aGVuIGJlIGV4ZWN1dGVkIHVzaW5nIHRoZSBFeGVjdXRlIGEgdHJhbnNmZXIgcXVvdGUgZW5kcG9pbnQuIElmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgZXhlY3V0ZSB0aGUgdHJhbnNmZXIgd2l0aG91dCBuZWVkaW5nIHRvIGNvbmZpcm0sIHNwZWNpZnkgZXhlY3V0ZSBhcyB0cnVlLlxuICogQHN1bW1hcnkgQ3JlYXRlIGEgdHJhbnNmZXIgcXVvdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlID0gKGNyZWF0ZVBheW1lbnRUcmFuc2ZlclF1b3RlQm9keSwgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBjZHBBcGlDbGllbnQoe1xuICAgICAgICB1cmw6IGAvdjIvcGF5bWVudHMvdHJhbnNmZXJzYCxcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgICBkYXRhOiBjcmVhdGVQYXltZW50VHJhbnNmZXJRdW90ZUJvZHksXG4gICAgfSwgb3B0aW9ucyk7XG59O1xuLyoqXG4gKiBFeGVjdXRlcyBhIHRyYW5zZmVyIHF1b3RlIHdoaWNoIHdhcyBjcmVhdGVkIHVzaW5nIHRoZSBDcmVhdGUgYSB0cmFuc2ZlciBxdW90ZSBlbmRwb2ludC5cbiAqIEBzdW1tYXJ5IEV4ZWN1dGUgYSB0cmFuc2ZlciBxdW90ZVxuICovXG5leHBvcnQgY29uc3QgZXhlY3V0ZVBheW1lbnRUcmFuc2ZlclF1b3RlID0gKHRyYW5zZmVySWQsIG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gY2RwQXBpQ2xpZW50KHsgdXJsOiBgL3YyL3BheW1lbnRzL3RyYW5zZmVycy8ke3RyYW5zZmVySWR9L2V4ZWN1dGVgLCBtZXRob2Q6IFwiUE9TVFwiIH0sIG9wdGlvbnMpO1xufTtcbi8qKlxuICogR2V0cyBhIHRyYW5zZmVyIGJ5IElELlxuICogQHN1bW1hcnkgR2V0IGEgdHJhbnNmZXIgYnkgSURcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFBheW1lbnRUcmFuc2ZlciA9ICh0cmFuc2ZlcklkLCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGNkcEFwaUNsaWVudCh7IHVybDogYC92Mi9wYXltZW50cy90cmFuc2ZlcnMvJHt0cmFuc2ZlcklkfWAsIG1ldGhvZDogXCJHRVRcIiB9LCBvcHRpb25zKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXltZW50cy1hbHBoYS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/payments-alpha/payments-alpha.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/policy-engine/policy-engine.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/policy-engine/policy-engine.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPolicy: () => (/* binding */ createPolicy),\n/* harmony export */   deletePolicy: () => (/* binding */ deletePolicy),\n/* harmony export */   getPolicyById: () => (/* binding */ getPolicyById),\n/* harmony export */   listPolicies: () => (/* binding */ listPolicies),\n/* harmony export */   updatePolicy: () => (/* binding */ updatePolicy)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Lists the policies belonging to the developer's CDP Project. Use the `scope` parameter to filter the policies by scope.\nThe response is paginated, and by default, returns 20 policies per page.\n * @summary List policies\n */\nconst listPolicies = (params, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/policy-engine/policies`, method: \"GET\", params }, options);\n};\n/**\n * Create a policy that can be used to govern the behavior of accounts.\n * @summary Create a policy\n */\nconst createPolicy = (createPolicyBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/policy-engine/policies`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: createPolicyBody,\n    }, options);\n};\n/**\n * Get a policy by its ID.\n * @summary Get a policy by ID\n */\nconst getPolicyById = (policyId, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/policy-engine/policies/${policyId}`, method: \"GET\" }, options);\n};\n/**\n * Delete a policy by its ID. This will have the effect of removing the policy from all accounts that are currently using it.\n * @summary Delete a policy\n */\nconst deletePolicy = (policyId, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/policy-engine/policies/${policyId}`, method: \"DELETE\" }, options);\n};\n/**\n * Updates a policy by its ID. This will have the effect of applying the updated policy to all accounts that are currently using it.\n * @summary Update a policy\n */\nconst updatePolicy = (policyId, updatePolicyBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/policy-engine/policies/${policyId}`,\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: updatePolicyBody,\n    }, options);\n};\n//# sourceMappingURL=policy-engine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvcG9saWN5LWVuZ2luZS9wb2xpY3ktZW5naW5lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDhEQUFZLEdBQUcsMERBQTBEO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVk7QUFDdkI7QUFDQTtBQUNBLG1CQUFtQixvQ0FBb0M7QUFDdkQ7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyw4REFBWSxHQUFHLG1DQUFtQyxTQUFTLGtCQUFrQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDhEQUFZLEdBQUcsbUNBQW1DLFNBQVMscUJBQXFCO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVk7QUFDdkIsMkNBQTJDLFNBQVM7QUFDcEQ7QUFDQSxtQkFBbUIsb0NBQW9DO0FBQ3ZEO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vb3BlbmFwaS1jbGllbnQvZ2VuZXJhdGVkL3BvbGljeS1lbmdpbmUvcG9saWN5LWVuZ2luZS5qcz9kZjNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNkcEFwaUNsaWVudCB9IGZyb20gXCIuLi8uLi9jZHBBcGlDbGllbnQuanNcIjtcbi8qKlxuICogTGlzdHMgdGhlIHBvbGljaWVzIGJlbG9uZ2luZyB0byB0aGUgZGV2ZWxvcGVyJ3MgQ0RQIFByb2plY3QuIFVzZSB0aGUgYHNjb3BlYCBwYXJhbWV0ZXIgdG8gZmlsdGVyIHRoZSBwb2xpY2llcyBieSBzY29wZS5cblRoZSByZXNwb25zZSBpcyBwYWdpbmF0ZWQsIGFuZCBieSBkZWZhdWx0LCByZXR1cm5zIDIwIHBvbGljaWVzIHBlciBwYWdlLlxuICogQHN1bW1hcnkgTGlzdCBwb2xpY2llc1xuICovXG5leHBvcnQgY29uc3QgbGlzdFBvbGljaWVzID0gKHBhcmFtcywgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBjZHBBcGlDbGllbnQoeyB1cmw6IGAvdjIvcG9saWN5LWVuZ2luZS9wb2xpY2llc2AsIG1ldGhvZDogXCJHRVRcIiwgcGFyYW1zIH0sIG9wdGlvbnMpO1xufTtcbi8qKlxuICogQ3JlYXRlIGEgcG9saWN5IHRoYXQgY2FuIGJlIHVzZWQgdG8gZ292ZXJuIHRoZSBiZWhhdmlvciBvZiBhY2NvdW50cy5cbiAqIEBzdW1tYXJ5IENyZWF0ZSBhIHBvbGljeVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlUG9saWN5ID0gKGNyZWF0ZVBvbGljeUJvZHksIG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gY2RwQXBpQ2xpZW50KHtcbiAgICAgICAgdXJsOiBgL3YyL3BvbGljeS1lbmdpbmUvcG9saWNpZXNgLFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgIGRhdGE6IGNyZWF0ZVBvbGljeUJvZHksXG4gICAgfSwgb3B0aW9ucyk7XG59O1xuLyoqXG4gKiBHZXQgYSBwb2xpY3kgYnkgaXRzIElELlxuICogQHN1bW1hcnkgR2V0IGEgcG9saWN5IGJ5IElEXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQb2xpY3lCeUlkID0gKHBvbGljeUlkLCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGNkcEFwaUNsaWVudCh7IHVybDogYC92Mi9wb2xpY3ktZW5naW5lL3BvbGljaWVzLyR7cG9saWN5SWR9YCwgbWV0aG9kOiBcIkdFVFwiIH0sIG9wdGlvbnMpO1xufTtcbi8qKlxuICogRGVsZXRlIGEgcG9saWN5IGJ5IGl0cyBJRC4gVGhpcyB3aWxsIGhhdmUgdGhlIGVmZmVjdCBvZiByZW1vdmluZyB0aGUgcG9saWN5IGZyb20gYWxsIGFjY291bnRzIHRoYXQgYXJlIGN1cnJlbnRseSB1c2luZyBpdC5cbiAqIEBzdW1tYXJ5IERlbGV0ZSBhIHBvbGljeVxuICovXG5leHBvcnQgY29uc3QgZGVsZXRlUG9saWN5ID0gKHBvbGljeUlkLCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGNkcEFwaUNsaWVudCh7IHVybDogYC92Mi9wb2xpY3ktZW5naW5lL3BvbGljaWVzLyR7cG9saWN5SWR9YCwgbWV0aG9kOiBcIkRFTEVURVwiIH0sIG9wdGlvbnMpO1xufTtcbi8qKlxuICogVXBkYXRlcyBhIHBvbGljeSBieSBpdHMgSUQuIFRoaXMgd2lsbCBoYXZlIHRoZSBlZmZlY3Qgb2YgYXBwbHlpbmcgdGhlIHVwZGF0ZWQgcG9saWN5IHRvIGFsbCBhY2NvdW50cyB0aGF0IGFyZSBjdXJyZW50bHkgdXNpbmcgaXQuXG4gKiBAc3VtbWFyeSBVcGRhdGUgYSBwb2xpY3lcbiAqL1xuZXhwb3J0IGNvbnN0IHVwZGF0ZVBvbGljeSA9IChwb2xpY3lJZCwgdXBkYXRlUG9saWN5Qm9keSwgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBjZHBBcGlDbGllbnQoe1xuICAgICAgICB1cmw6IGAvdjIvcG9saWN5LWVuZ2luZS9wb2xpY2llcy8ke3BvbGljeUlkfWAsXG4gICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgICBkYXRhOiB1cGRhdGVQb2xpY3lCb2R5LFxuICAgIH0sIG9wdGlvbnMpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvbGljeS1lbmdpbmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/policy-engine/policy-engine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/solana-accounts/solana-accounts.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/solana-accounts/solana-accounts.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSolanaAccount: () => (/* binding */ createSolanaAccount),\n/* harmony export */   exportSolanaAccount: () => (/* binding */ exportSolanaAccount),\n/* harmony export */   exportSolanaAccountByName: () => (/* binding */ exportSolanaAccountByName),\n/* harmony export */   getSolanaAccount: () => (/* binding */ getSolanaAccount),\n/* harmony export */   getSolanaAccountByName: () => (/* binding */ getSolanaAccountByName),\n/* harmony export */   importSolanaAccount: () => (/* binding */ importSolanaAccount),\n/* harmony export */   listSolanaAccounts: () => (/* binding */ listSolanaAccounts),\n/* harmony export */   sendSolanaTransaction: () => (/* binding */ sendSolanaTransaction),\n/* harmony export */   signSolanaMessage: () => (/* binding */ signSolanaMessage),\n/* harmony export */   signSolanaTransaction: () => (/* binding */ signSolanaTransaction),\n/* harmony export */   updateSolanaAccount: () => (/* binding */ updateSolanaAccount)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Lists the Solana accounts belonging to the developer.\nThe response is paginated, and by default, returns 20 accounts per page.\n\nIf a name is provided, the response will contain only the account with that name.\n * @summary List Solana accounts or get account by name\n */\nconst listSolanaAccounts = (params, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/solana/accounts`, method: \"GET\", params }, options);\n};\n/**\n * Creates a new Solana account.\n * @summary Create a Solana account\n */\nconst createSolanaAccount = (createSolanaAccountBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/solana/accounts`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: createSolanaAccountBody,\n    }, options);\n};\n/**\n * Gets a Solana account by its address.\n * @summary Get a Solana account by address\n */\nconst getSolanaAccount = (address, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/solana/accounts/${address}`, method: \"GET\" }, options);\n};\n/**\n * Updates an existing Solana account. Use this to update the account's name or account-level policy.\n * @summary Update a Solana account\n */\nconst updateSolanaAccount = (address, updateSolanaAccountBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/solana/accounts/${address}`,\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: updateSolanaAccountBody,\n    }, options);\n};\n/**\n * Gets a Solana account by its name.\n * @summary Get a Solana account by name\n */\nconst getSolanaAccountByName = (name, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/solana/accounts/by-name/${name}`, method: \"GET\" }, options);\n};\n/**\n * Import an existing Solana account into the developer's CDP Project. This API should be called from the [CDP SDK](https://github.com/coinbase/cdp-sdk) to ensure that the associated private key is properly encrypted.\n * @summary Import a Solana account\n */\nconst importSolanaAccount = (importSolanaAccountBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/solana/accounts/import`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: importSolanaAccountBody,\n    }, options);\n};\n/**\n * Export an existing Solana account's private key. It is important to store the private key in a secure place after it's exported.\n * @summary Export an Solana account\n */\nconst exportSolanaAccount = (address, exportSolanaAccountBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/solana/accounts/${address}/export`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: exportSolanaAccountBody,\n    }, options);\n};\n/**\n * Export an existing Solana account's private key by its name. It is important to store the private key in a secure place after it's exported.\n * @summary Export a Solana account by name\n */\nconst exportSolanaAccountByName = (name, exportSolanaAccountByNameBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/solana/accounts/export/by-name/${name}`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: exportSolanaAccountByNameBody,\n    }, options);\n};\n/**\n * Signs a transaction with the given Solana account.\nThe unsigned transaction should be serialized into a byte array and then encoded as base64.\n\n**Transaction types**\n\nThe following transaction types are supported:\n* [Legacy transactions](https://solana-labs.github.io/solana-web3.js/classes/Transaction.html)\n* [Versioned transactions](https://solana-labs.github.io/solana-web3.js/classes/VersionedTransaction.html)\n\nThe developer is responsible for ensuring that the unsigned transaction is valid, as the API will not validate the transaction.\n * @summary Sign a transaction\n */\nconst signSolanaTransaction = (address, signSolanaTransactionBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/solana/accounts/${address}/sign/transaction`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: signSolanaTransactionBody,\n    }, options);\n};\n/**\n * Signs an arbitrary message with the given Solana account.\n\n**WARNING:** Never sign a message that you didn't generate, as it can be an arbitrary transaction. For example, it might send all of your funds to an attacker.\n * @summary Sign a message\n */\nconst signSolanaMessage = (address, signSolanaMessageBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/solana/accounts/${address}/sign/message`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: signSolanaMessageBody,\n    }, options);\n};\n/**\n * Signs and sends a single Solana transaction using multiple Solana accounts. The transaction may contain contain several instructions, each of which may require signatures from different account keys.\n\nThe transaction should be serialized into a byte array and base64 encoded. The API handles recent blockhash management and fee estimation, leaving the developer to provide only the minimal set of fields necessary to send the transaction.\n\n**Transaction types**\n\nThe following transaction types are supported:\n* [Legacy transactions](https://solana.com/developers/guides/advanced/versions#current-transaction-versions)\n* [Versioned transactions](https://solana.com/developers/guides/advanced/versions)\n\n**Instruction Batching**\n\nTo batch multiple operations, include multiple instructions within a single transaction. All instructions within a transaction are executed atomically - if any instruction fails, the entire transaction fails and is rolled back.\n\n**Network Support**\n\nThe following Solana networks are supported:\n* `solana` - Solana Mainnet\n* `solana-devnet` - Solana Devnet\n\nThe developer is responsible for ensuring that the unsigned transaction is valid, as the API will not validate the transaction.\n * @summary Send a Solana transaction\n */\nconst sendSolanaTransaction = (sendSolanaTransactionBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/solana/accounts/send/transaction`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: sendSolanaTransactionBody,\n    }, options);\n};\n//# sourceMappingURL=solana-accounts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/solana-accounts/solana-accounts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/solana-token-balances/solana-token-balances.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/solana-token-balances/solana-token-balances.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   listSolanaTokenBalances: () => (/* binding */ listSolanaTokenBalances)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Lists the token balances of a Solana address on a given network. The balances include SPL tokens and the native SOL token. The response is paginated, and by default, returns 20 balances per page.\n\n**Note:** This endpoint is still under development and does not yet provide strong availability or freshness guarantees. Freshness and availability of new token balances will improve over the coming weeks.\n * @summary List Solana token balances\n */\nconst listSolanaTokenBalances = (network, address, params, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/solana/token-balances/${network}/${address}`, method: \"GET\", params }, options);\n};\n//# sourceMappingURL=solana-token-balances.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvc29sYW5hLXRva2VuLWJhbGFuY2VzL3NvbGFuYS10b2tlbi1iYWxhbmNlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRDtBQUNyRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyw4REFBWSxHQUFHLGtDQUFrQyxRQUFRLEdBQUcsUUFBUSwwQkFBMEI7QUFDekc7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvc29sYW5hLXRva2VuLWJhbGFuY2VzL3NvbGFuYS10b2tlbi1iYWxhbmNlcy5qcz9kMzM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNkcEFwaUNsaWVudCB9IGZyb20gXCIuLi8uLi9jZHBBcGlDbGllbnQuanNcIjtcbi8qKlxuICogTGlzdHMgdGhlIHRva2VuIGJhbGFuY2VzIG9mIGEgU29sYW5hIGFkZHJlc3Mgb24gYSBnaXZlbiBuZXR3b3JrLiBUaGUgYmFsYW5jZXMgaW5jbHVkZSBTUEwgdG9rZW5zIGFuZCB0aGUgbmF0aXZlIFNPTCB0b2tlbi4gVGhlIHJlc3BvbnNlIGlzIHBhZ2luYXRlZCwgYW5kIGJ5IGRlZmF1bHQsIHJldHVybnMgMjAgYmFsYW5jZXMgcGVyIHBhZ2UuXG5cbioqTm90ZToqKiBUaGlzIGVuZHBvaW50IGlzIHN0aWxsIHVuZGVyIGRldmVsb3BtZW50IGFuZCBkb2VzIG5vdCB5ZXQgcHJvdmlkZSBzdHJvbmcgYXZhaWxhYmlsaXR5IG9yIGZyZXNobmVzcyBndWFyYW50ZWVzLiBGcmVzaG5lc3MgYW5kIGF2YWlsYWJpbGl0eSBvZiBuZXcgdG9rZW4gYmFsYW5jZXMgd2lsbCBpbXByb3ZlIG92ZXIgdGhlIGNvbWluZyB3ZWVrcy5cbiAqIEBzdW1tYXJ5IExpc3QgU29sYW5hIHRva2VuIGJhbGFuY2VzXG4gKi9cbmV4cG9ydCBjb25zdCBsaXN0U29sYW5hVG9rZW5CYWxhbmNlcyA9IChuZXR3b3JrLCBhZGRyZXNzLCBwYXJhbXMsIG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gY2RwQXBpQ2xpZW50KHsgdXJsOiBgL3YyL3NvbGFuYS90b2tlbi1iYWxhbmNlcy8ke25ldHdvcmt9LyR7YWRkcmVzc31gLCBtZXRob2Q6IFwiR0VUXCIsIHBhcmFtcyB9LCBvcHRpb25zKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb2xhbmEtdG9rZW4tYmFsYW5jZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/solana-token-balances/solana-token-balances.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/sql-api-alpha/sql-api-alpha.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/sql-api-alpha/sql-api-alpha.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   runSQLQuery: () => (/* binding */ runSQLQuery)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Run a read-only SQL query against indexed blockchain data including transactions, events, and decoded logs.\n\nThis endpoint provides direct SQL access to comprehensive blockchain data across supported networks.\nQueries are executed against optimized data structures for high-performance analytics.\n\n### Allowed Queries\n\n  - Standard SQL syntax (ClickHouse dialect)\n  - Read-only queries (SELECT statements)\n  - No DDL or DML operations\n  - No cartesian products\n\n### Supported Tables\n\n  - `base.events` - Base mainnet decoded event logs with parameters, event signature, topics, and more.\n  - `base.transactions` - Base mainnet transaction data including hash, block number, gas usage.\n  - `base.blocks` - Base mainnet block information.\n  - `base.encoded_logs` - Encoded log data of event logs that aren't able to be decoded by our event decoder (ex: log0 opcode).\n  - `base.transfers` - All event logs with event signature `Transfer(address,address,uint256)`. ERC-20, ERC-721, and ERC-1155 transfers are all included.\n\n### Query Limits\n\n  - Maximum result set: 10,000 rows\n  - Query timeout: 30 seconds\n  - Maximum JOINs: 5\n\n * @summary Run SQL Query\n */\nconst runSQLQuery = (onchainDataQuery, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/data/query/run`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: onchainDataQuery,\n    }, options);\n};\n//# sourceMappingURL=sql-api-alpha.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQvc3FsLWFwaS1hbHBoYS9zcWwtYXBpLWFscGhhLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFEO0FBQ3JEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ087QUFDUCxXQUFXLDhEQUFZO0FBQ3ZCO0FBQ0E7QUFDQSxtQkFBbUIsb0NBQW9DO0FBQ3ZEO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vb3BlbmFwaS1jbGllbnQvZ2VuZXJhdGVkL3NxbC1hcGktYWxwaGEvc3FsLWFwaS1hbHBoYS5qcz83YzQ2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNkcEFwaUNsaWVudCB9IGZyb20gXCIuLi8uLi9jZHBBcGlDbGllbnQuanNcIjtcbi8qKlxuICogUnVuIGEgcmVhZC1vbmx5IFNRTCBxdWVyeSBhZ2FpbnN0IGluZGV4ZWQgYmxvY2tjaGFpbiBkYXRhIGluY2x1ZGluZyB0cmFuc2FjdGlvbnMsIGV2ZW50cywgYW5kIGRlY29kZWQgbG9ncy5cblxuVGhpcyBlbmRwb2ludCBwcm92aWRlcyBkaXJlY3QgU1FMIGFjY2VzcyB0byBjb21wcmVoZW5zaXZlIGJsb2NrY2hhaW4gZGF0YSBhY3Jvc3Mgc3VwcG9ydGVkIG5ldHdvcmtzLlxuUXVlcmllcyBhcmUgZXhlY3V0ZWQgYWdhaW5zdCBvcHRpbWl6ZWQgZGF0YSBzdHJ1Y3R1cmVzIGZvciBoaWdoLXBlcmZvcm1hbmNlIGFuYWx5dGljcy5cblxuIyMjIEFsbG93ZWQgUXVlcmllc1xuXG4gIC0gU3RhbmRhcmQgU1FMIHN5bnRheCAoQ2xpY2tIb3VzZSBkaWFsZWN0KVxuICAtIFJlYWQtb25seSBxdWVyaWVzIChTRUxFQ1Qgc3RhdGVtZW50cylcbiAgLSBObyBEREwgb3IgRE1MIG9wZXJhdGlvbnNcbiAgLSBObyBjYXJ0ZXNpYW4gcHJvZHVjdHNcblxuIyMjIFN1cHBvcnRlZCBUYWJsZXNcblxuICAtIGBiYXNlLmV2ZW50c2AgLSBCYXNlIG1haW5uZXQgZGVjb2RlZCBldmVudCBsb2dzIHdpdGggcGFyYW1ldGVycywgZXZlbnQgc2lnbmF0dXJlLCB0b3BpY3MsIGFuZCBtb3JlLlxuICAtIGBiYXNlLnRyYW5zYWN0aW9uc2AgLSBCYXNlIG1haW5uZXQgdHJhbnNhY3Rpb24gZGF0YSBpbmNsdWRpbmcgaGFzaCwgYmxvY2sgbnVtYmVyLCBnYXMgdXNhZ2UuXG4gIC0gYGJhc2UuYmxvY2tzYCAtIEJhc2UgbWFpbm5ldCBibG9jayBpbmZvcm1hdGlvbi5cbiAgLSBgYmFzZS5lbmNvZGVkX2xvZ3NgIC0gRW5jb2RlZCBsb2cgZGF0YSBvZiBldmVudCBsb2dzIHRoYXQgYXJlbid0IGFibGUgdG8gYmUgZGVjb2RlZCBieSBvdXIgZXZlbnQgZGVjb2RlciAoZXg6IGxvZzAgb3Bjb2RlKS5cbiAgLSBgYmFzZS50cmFuc2ZlcnNgIC0gQWxsIGV2ZW50IGxvZ3Mgd2l0aCBldmVudCBzaWduYXR1cmUgYFRyYW5zZmVyKGFkZHJlc3MsYWRkcmVzcyx1aW50MjU2KWAuIEVSQy0yMCwgRVJDLTcyMSwgYW5kIEVSQy0xMTU1IHRyYW5zZmVycyBhcmUgYWxsIGluY2x1ZGVkLlxuXG4jIyMgUXVlcnkgTGltaXRzXG5cbiAgLSBNYXhpbXVtIHJlc3VsdCBzZXQ6IDEwLDAwMCByb3dzXG4gIC0gUXVlcnkgdGltZW91dDogMzAgc2Vjb25kc1xuICAtIE1heGltdW0gSk9JTnM6IDVcblxuICogQHN1bW1hcnkgUnVuIFNRTCBRdWVyeVxuICovXG5leHBvcnQgY29uc3QgcnVuU1FMUXVlcnkgPSAob25jaGFpbkRhdGFRdWVyeSwgb3B0aW9ucykgPT4ge1xuICAgIHJldHVybiBjZHBBcGlDbGllbnQoe1xuICAgICAgICB1cmw6IGAvdjIvZGF0YS9xdWVyeS9ydW5gLFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgIGRhdGE6IG9uY2hhaW5EYXRhUXVlcnksXG4gICAgfSwgb3B0aW9ucyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3FsLWFwaS1hbHBoYS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/sql-api-alpha/sql-api-alpha.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/x402-facilitator/x402-facilitator.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/x402-facilitator/x402-facilitator.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   settleX402Payment: () => (/* binding */ settleX402Payment),\n/* harmony export */   supportedX402PaymentKinds: () => (/* binding */ supportedX402PaymentKinds),\n/* harmony export */   verifyX402Payment: () => (/* binding */ verifyX402Payment)\n/* harmony export */ });\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n/**\n * Verify an x402 protocol payment with a specific scheme and network.\n * @summary Verify a payment\n */\nconst verifyX402Payment = (verifyX402PaymentBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/x402/verify`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: verifyX402PaymentBody,\n    }, options);\n};\n/**\n * Settle an x402 protocol payment with a specific scheme and network.\n * @summary Settle a payment\n */\nconst settleX402Payment = (settleX402PaymentBody, options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({\n        url: `/v2/x402/settle`,\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        data: settleX402PaymentBody,\n    }, options);\n};\n/**\n * Get the supported x402 protocol payment schemes and networks that the facilitator is able to verify and settle payments for.\n * @summary Get supported payment schemes and networks\n */\nconst supportedX402PaymentKinds = (options) => {\n    return (0,_cdpApiClient_js__WEBPACK_IMPORTED_MODULE_0__.cdpApiClient)({ url: `/v2/x402/supported`, method: \"GET\" }, options);\n};\n//# sourceMappingURL=x402-facilitator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9nZW5lcmF0ZWQveDQwMi1mYWNpbGl0YXRvci94NDAyLWZhY2lsaXRhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOERBQVk7QUFDdkI7QUFDQTtBQUNBLG1CQUFtQixvQ0FBb0M7QUFDdkQ7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyw4REFBWTtBQUN2QjtBQUNBO0FBQ0EsbUJBQW1CLG9DQUFvQztBQUN2RDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDhEQUFZLEdBQUcsMENBQTBDO0FBQ3BFO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vb3BlbmFwaS1jbGllbnQvZ2VuZXJhdGVkL3g0MDItZmFjaWxpdGF0b3IveDQwMi1mYWNpbGl0YXRvci5qcz82NGRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNkcEFwaUNsaWVudCB9IGZyb20gXCIuLi8uLi9jZHBBcGlDbGllbnQuanNcIjtcbi8qKlxuICogVmVyaWZ5IGFuIHg0MDIgcHJvdG9jb2wgcGF5bWVudCB3aXRoIGEgc3BlY2lmaWMgc2NoZW1lIGFuZCBuZXR3b3JrLlxuICogQHN1bW1hcnkgVmVyaWZ5IGEgcGF5bWVudFxuICovXG5leHBvcnQgY29uc3QgdmVyaWZ5WDQwMlBheW1lbnQgPSAodmVyaWZ5WDQwMlBheW1lbnRCb2R5LCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGNkcEFwaUNsaWVudCh7XG4gICAgICAgIHVybDogYC92Mi94NDAyL3ZlcmlmeWAsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgZGF0YTogdmVyaWZ5WDQwMlBheW1lbnRCb2R5LFxuICAgIH0sIG9wdGlvbnMpO1xufTtcbi8qKlxuICogU2V0dGxlIGFuIHg0MDIgcHJvdG9jb2wgcGF5bWVudCB3aXRoIGEgc3BlY2lmaWMgc2NoZW1lIGFuZCBuZXR3b3JrLlxuICogQHN1bW1hcnkgU2V0dGxlIGEgcGF5bWVudFxuICovXG5leHBvcnQgY29uc3Qgc2V0dGxlWDQwMlBheW1lbnQgPSAoc2V0dGxlWDQwMlBheW1lbnRCb2R5LCBvcHRpb25zKSA9PiB7XG4gICAgcmV0dXJuIGNkcEFwaUNsaWVudCh7XG4gICAgICAgIHVybDogYC92Mi94NDAyL3NldHRsZWAsXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgZGF0YTogc2V0dGxlWDQwMlBheW1lbnRCb2R5LFxuICAgIH0sIG9wdGlvbnMpO1xufTtcbi8qKlxuICogR2V0IHRoZSBzdXBwb3J0ZWQgeDQwMiBwcm90b2NvbCBwYXltZW50IHNjaGVtZXMgYW5kIG5ldHdvcmtzIHRoYXQgdGhlIGZhY2lsaXRhdG9yIGlzIGFibGUgdG8gdmVyaWZ5IGFuZCBzZXR0bGUgcGF5bWVudHMgZm9yLlxuICogQHN1bW1hcnkgR2V0IHN1cHBvcnRlZCBwYXltZW50IHNjaGVtZXMgYW5kIG5ldHdvcmtzXG4gKi9cbmV4cG9ydCBjb25zdCBzdXBwb3J0ZWRYNDAyUGF5bWVudEtpbmRzID0gKG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gY2RwQXBpQ2xpZW50KHsgdXJsOiBgL3YyL3g0MDIvc3VwcG9ydGVkYCwgbWV0aG9kOiBcIkdFVFwiIH0sIG9wdGlvbnMpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXg0MDItZmFjaWxpdGF0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/x402-facilitator/x402-facilitator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbiFunctionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.AbiFunctionType),\n/* harmony export */   AbiInputType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.AbiInputType),\n/* harmony export */   AbiStateMutability: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.AbiStateMutability),\n/* harmony export */   CdpOpenApiClient: () => (/* binding */ CdpOpenApiClient),\n/* harmony export */   CreatePaymentTransferQuoteBodySourceType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.CreatePaymentTransferQuoteBodySourceType),\n/* harmony export */   CreatePaymentTransferQuoteBodyTargetType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.CreatePaymentTransferQuoteBodyTargetType),\n/* harmony export */   CreatePolicyBodyScope: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.CreatePolicyBodyScope),\n/* harmony export */   DeveloperJWTAuthenticationType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.DeveloperJWTAuthenticationType),\n/* harmony export */   EmailAuthenticationType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EmailAuthenticationType),\n/* harmony export */   ErrorType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.ErrorType),\n/* harmony export */   EthValueCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EthValueCriterionOperator),\n/* harmony export */   EthValueCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EthValueCriterionType),\n/* harmony export */   EvmAddressCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmAddressCriterionOperator),\n/* harmony export */   EvmAddressCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmAddressCriterionType),\n/* harmony export */   EvmDataCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmDataCriterionType),\n/* harmony export */   EvmDataParameterConditionListOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmDataParameterConditionListOperator),\n/* harmony export */   EvmDataParameterConditionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmDataParameterConditionOperator),\n/* harmony export */   EvmMessageCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmMessageCriterionType),\n/* harmony export */   EvmNetworkCriterionNetworksItem: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmNetworkCriterionNetworksItem),\n/* harmony export */   EvmNetworkCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmNetworkCriterionOperator),\n/* harmony export */   EvmNetworkCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmNetworkCriterionType),\n/* harmony export */   EvmSwapsNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmSwapsNetwork),\n/* harmony export */   EvmTypedAddressConditionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmTypedAddressConditionOperator),\n/* harmony export */   EvmTypedNumericalConditionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmTypedNumericalConditionOperator),\n/* harmony export */   EvmUserOperationNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmUserOperationNetwork),\n/* harmony export */   EvmUserOperationStatus: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.EvmUserOperationStatus),\n/* harmony export */   FeeType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.FeeType),\n/* harmony export */   KnownAbiType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.KnownAbiType),\n/* harmony export */   KnownIdlType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.KnownIdlType),\n/* harmony export */   ListEvmTokenBalancesNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.ListEvmTokenBalancesNetwork),\n/* harmony export */   ListPoliciesScope: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.ListPoliciesScope),\n/* harmony export */   ListSolanaTokenBalancesNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.ListSolanaTokenBalancesNetwork),\n/* harmony export */   MintAddressCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.MintAddressCriterionOperator),\n/* harmony export */   MintAddressCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.MintAddressCriterionType),\n/* harmony export */   NetUSDChangeCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.NetUSDChangeCriterionOperator),\n/* harmony export */   NetUSDChangeCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.NetUSDChangeCriterionType),\n/* harmony export */   OnchainDataResultSchemaColumnsItemType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.OnchainDataResultSchemaColumnsItemType),\n/* harmony export */   OnrampOrderFeeType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.OnrampOrderFeeType),\n/* harmony export */   OnrampOrderPaymentMethodTypeId: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.OnrampOrderPaymentMethodTypeId),\n/* harmony export */   OnrampOrderStatus: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.OnrampOrderStatus),\n/* harmony export */   OnrampPaymentLinkType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.OnrampPaymentLinkType),\n/* harmony export */   OnrampQuotePaymentMethodTypeId: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.OnrampQuotePaymentMethodTypeId),\n/* harmony export */   OpenApiEvmMethods: () => (/* binding */ OpenApiEvmMethods),\n/* harmony export */   OpenApiPoliciesMethods: () => (/* binding */ OpenApiPoliciesMethods),\n/* harmony export */   OpenApiSolanaMethods: () => (/* binding */ OpenApiSolanaMethods),\n/* harmony export */   PaymentMethodType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.PaymentMethodType),\n/* harmony export */   PaymentRailAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.PaymentRailAction),\n/* harmony export */   PolicyScope: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.PolicyScope),\n/* harmony export */   PrepareUserOperationRuleAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.PrepareUserOperationRuleAction),\n/* harmony export */   PrepareUserOperationRuleOperation: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.PrepareUserOperationRuleOperation),\n/* harmony export */   ProgramIdCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.ProgramIdCriterionOperator),\n/* harmony export */   ProgramIdCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.ProgramIdCriterionType),\n/* harmony export */   RequestEvmFaucetBodyNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.RequestEvmFaucetBodyNetwork),\n/* harmony export */   RequestEvmFaucetBodyToken: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.RequestEvmFaucetBodyToken),\n/* harmony export */   RequestSolanaFaucetBodyToken: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.RequestSolanaFaucetBodyToken),\n/* harmony export */   SendEvmTransactionBodyNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SendEvmTransactionBodyNetwork),\n/* harmony export */   SendEvmTransactionRuleAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SendEvmTransactionRuleAction),\n/* harmony export */   SendEvmTransactionRuleOperation: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SendEvmTransactionRuleOperation),\n/* harmony export */   SendSolTransactionRuleAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SendSolTransactionRuleAction),\n/* harmony export */   SendSolTransactionRuleOperation: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SendSolTransactionRuleOperation),\n/* harmony export */   SendSolanaTransactionBodyNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SendSolanaTransactionBodyNetwork),\n/* harmony export */   SendUserOperationRuleAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SendUserOperationRuleAction),\n/* harmony export */   SendUserOperationRuleOperation: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SendUserOperationRuleOperation),\n/* harmony export */   SignEvmHashRuleAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmHashRuleAction),\n/* harmony export */   SignEvmHashRuleOperation: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmHashRuleOperation),\n/* harmony export */   SignEvmMessageRuleAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmMessageRuleAction),\n/* harmony export */   SignEvmMessageRuleOperation: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmMessageRuleOperation),\n/* harmony export */   SignEvmTransactionRuleAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmTransactionRuleAction),\n/* harmony export */   SignEvmTransactionRuleOperation: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmTransactionRuleOperation),\n/* harmony export */   SignEvmTypedDataFieldCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmTypedDataFieldCriterionType),\n/* harmony export */   SignEvmTypedDataRuleAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmTypedDataRuleAction),\n/* harmony export */   SignEvmTypedDataRuleOperation: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmTypedDataRuleOperation),\n/* harmony export */   SignEvmTypedDataVerifyingContractCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmTypedDataVerifyingContractCriterionOperator),\n/* harmony export */   SignEvmTypedDataVerifyingContractCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignEvmTypedDataVerifyingContractCriterionType),\n/* harmony export */   SignSolMessageRuleAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignSolMessageRuleAction),\n/* harmony export */   SignSolMessageRuleOperation: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignSolMessageRuleOperation),\n/* harmony export */   SignSolTransactionRuleAction: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignSolTransactionRuleAction),\n/* harmony export */   SignSolTransactionRuleOperation: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SignSolTransactionRuleOperation),\n/* harmony export */   SmsAuthenticationType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SmsAuthenticationType),\n/* harmony export */   SolAddressCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolAddressCriterionOperator),\n/* harmony export */   SolAddressCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolAddressCriterionType),\n/* harmony export */   SolDataCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolDataCriterionType),\n/* harmony export */   SolDataParameterConditionListOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolDataParameterConditionListOperator),\n/* harmony export */   SolDataParameterConditionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolDataParameterConditionOperator),\n/* harmony export */   SolMessageCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolMessageCriterionType),\n/* harmony export */   SolNetworkCriterionNetworksItem: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolNetworkCriterionNetworksItem),\n/* harmony export */   SolNetworkCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolNetworkCriterionOperator),\n/* harmony export */   SolNetworkCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolNetworkCriterionType),\n/* harmony export */   SolValueCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolValueCriterionOperator),\n/* harmony export */   SolValueCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SolValueCriterionType),\n/* harmony export */   SpendPermissionNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SpendPermissionNetwork),\n/* harmony export */   SplAddressCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SplAddressCriterionOperator),\n/* harmony export */   SplAddressCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SplAddressCriterionType),\n/* harmony export */   SplValueCriterionOperator: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SplValueCriterionOperator),\n/* harmony export */   SplValueCriterionType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.SplValueCriterionType),\n/* harmony export */   TransferSourceType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.TransferSourceType),\n/* harmony export */   TransferStatus: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.TransferStatus),\n/* harmony export */   TransferTargetType: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.TransferTargetType),\n/* harmony export */   X402PaymentPayloadNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.X402PaymentPayloadNetwork),\n/* harmony export */   X402PaymentPayloadScheme: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.X402PaymentPayloadScheme),\n/* harmony export */   X402PaymentRequirementsNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.X402PaymentRequirementsNetwork),\n/* harmony export */   X402PaymentRequirementsScheme: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.X402PaymentRequirementsScheme),\n/* harmony export */   X402SettleErrorReason: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.X402SettleErrorReason),\n/* harmony export */   X402SupportedPaymentKindNetwork: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.X402SupportedPaymentKindNetwork),\n/* harmony export */   X402SupportedPaymentKindScheme: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.X402SupportedPaymentKindScheme),\n/* harmony export */   X402VerifyInvalidReason: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.X402VerifyInvalidReason),\n/* harmony export */   X402Version: () => (/* reexport safe */ _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__.X402Version),\n/* harmony export */   createEvmAccount: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.createEvmAccount),\n/* harmony export */   createEvmSmartAccount: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.createEvmSmartAccount),\n/* harmony export */   createEvmSwapQuote: () => (/* reexport safe */ _generated_evm_swaps_evm_swaps_js__WEBPACK_IMPORTED_MODULE_3__.createEvmSwapQuote),\n/* harmony export */   createOnrampOrder: () => (/* reexport safe */ _generated_onramp_onramp_js__WEBPACK_IMPORTED_MODULE_10__.createOnrampOrder),\n/* harmony export */   createOnrampSession: () => (/* reexport safe */ _generated_onramp_onramp_js__WEBPACK_IMPORTED_MODULE_10__.createOnrampSession),\n/* harmony export */   createPaymentTransferQuote: () => (/* reexport safe */ _generated_payments_alpha_payments_alpha_js__WEBPACK_IMPORTED_MODULE_9__.createPaymentTransferQuote),\n/* harmony export */   createPolicy: () => (/* reexport safe */ _generated_policy_engine_policy_engine_js__WEBPACK_IMPORTED_MODULE_8__.createPolicy),\n/* harmony export */   createSolanaAccount: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.createSolanaAccount),\n/* harmony export */   createSpendPermission: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.createSpendPermission),\n/* harmony export */   deletePolicy: () => (/* reexport safe */ _generated_policy_engine_policy_engine_js__WEBPACK_IMPORTED_MODULE_8__.deletePolicy),\n/* harmony export */   executePaymentTransferQuote: () => (/* reexport safe */ _generated_payments_alpha_payments_alpha_js__WEBPACK_IMPORTED_MODULE_9__.executePaymentTransferQuote),\n/* harmony export */   exportEvmAccount: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.exportEvmAccount),\n/* harmony export */   exportEvmAccountByName: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.exportEvmAccountByName),\n/* harmony export */   exportSolanaAccount: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.exportSolanaAccount),\n/* harmony export */   exportSolanaAccountByName: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.exportSolanaAccountByName),\n/* harmony export */   getCryptoRails: () => (/* reexport safe */ _generated_payments_alpha_payments_alpha_js__WEBPACK_IMPORTED_MODULE_9__.getCryptoRails),\n/* harmony export */   getEvmAccount: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.getEvmAccount),\n/* harmony export */   getEvmAccountByName: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.getEvmAccountByName),\n/* harmony export */   getEvmSmartAccount: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.getEvmSmartAccount),\n/* harmony export */   getEvmSmartAccountByName: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.getEvmSmartAccountByName),\n/* harmony export */   getEvmSwapPrice: () => (/* reexport safe */ _generated_evm_swaps_evm_swaps_js__WEBPACK_IMPORTED_MODULE_3__.getEvmSwapPrice),\n/* harmony export */   getOnrampOrderById: () => (/* reexport safe */ _generated_onramp_onramp_js__WEBPACK_IMPORTED_MODULE_10__.getOnrampOrderById),\n/* harmony export */   getPaymentMethods: () => (/* reexport safe */ _generated_payments_alpha_payments_alpha_js__WEBPACK_IMPORTED_MODULE_9__.getPaymentMethods),\n/* harmony export */   getPaymentTransfer: () => (/* reexport safe */ _generated_payments_alpha_payments_alpha_js__WEBPACK_IMPORTED_MODULE_9__.getPaymentTransfer),\n/* harmony export */   getPolicyById: () => (/* reexport safe */ _generated_policy_engine_policy_engine_js__WEBPACK_IMPORTED_MODULE_8__.getPolicyById),\n/* harmony export */   getSolanaAccount: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.getSolanaAccount),\n/* harmony export */   getSolanaAccountByName: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.getSolanaAccountByName),\n/* harmony export */   getUserOperation: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.getUserOperation),\n/* harmony export */   importEvmAccount: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.importEvmAccount),\n/* harmony export */   importSolanaAccount: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.importSolanaAccount),\n/* harmony export */   listDataTokenBalances: () => (/* reexport safe */ _generated_onchain_data_onchain_data_js__WEBPACK_IMPORTED_MODULE_11__.listDataTokenBalances),\n/* harmony export */   listEvmAccounts: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.listEvmAccounts),\n/* harmony export */   listEvmSmartAccounts: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.listEvmSmartAccounts),\n/* harmony export */   listEvmTokenBalances: () => (/* reexport safe */ _generated_evm_token_balances_evm_token_balances_js__WEBPACK_IMPORTED_MODULE_4__.listEvmTokenBalances),\n/* harmony export */   listPolicies: () => (/* reexport safe */ _generated_policy_engine_policy_engine_js__WEBPACK_IMPORTED_MODULE_8__.listPolicies),\n/* harmony export */   listSolanaAccounts: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.listSolanaAccounts),\n/* harmony export */   listSolanaTokenBalances: () => (/* reexport safe */ _generated_solana_token_balances_solana_token_balances_js__WEBPACK_IMPORTED_MODULE_6__.listSolanaTokenBalances),\n/* harmony export */   listSpendPermissions: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.listSpendPermissions),\n/* harmony export */   listTokensForAccount: () => (/* reexport safe */ _generated_onchain_data_onchain_data_js__WEBPACK_IMPORTED_MODULE_11__.listTokensForAccount),\n/* harmony export */   prepareUserOperation: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.prepareUserOperation),\n/* harmony export */   requestEvmFaucet: () => (/* reexport safe */ _generated_faucets_faucets_js__WEBPACK_IMPORTED_MODULE_7__.requestEvmFaucet),\n/* harmony export */   requestSolanaFaucet: () => (/* reexport safe */ _generated_faucets_faucets_js__WEBPACK_IMPORTED_MODULE_7__.requestSolanaFaucet),\n/* harmony export */   revokeSpendPermission: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.revokeSpendPermission),\n/* harmony export */   runSQLQuery: () => (/* reexport safe */ _generated_sql_api_alpha_sql_api_alpha_js__WEBPACK_IMPORTED_MODULE_14__.runSQLQuery),\n/* harmony export */   sendEvmTransaction: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.sendEvmTransaction),\n/* harmony export */   sendSolanaTransaction: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.sendSolanaTransaction),\n/* harmony export */   sendUserOperation: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.sendUserOperation),\n/* harmony export */   settleX402Payment: () => (/* reexport safe */ _generated_x402_facilitator_x402_facilitator_js__WEBPACK_IMPORTED_MODULE_13__.settleX402Payment),\n/* harmony export */   signEvmHash: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.signEvmHash),\n/* harmony export */   signEvmMessage: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.signEvmMessage),\n/* harmony export */   signEvmTransaction: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.signEvmTransaction),\n/* harmony export */   signEvmTypedData: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.signEvmTypedData),\n/* harmony export */   signSolanaMessage: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.signSolanaMessage),\n/* harmony export */   signSolanaTransaction: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.signSolanaTransaction),\n/* harmony export */   supportedX402PaymentKinds: () => (/* reexport safe */ _generated_x402_facilitator_x402_facilitator_js__WEBPACK_IMPORTED_MODULE_13__.supportedX402PaymentKinds),\n/* harmony export */   updateEvmAccount: () => (/* reexport safe */ _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__.updateEvmAccount),\n/* harmony export */   updateEvmSmartAccount: () => (/* reexport safe */ _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__.updateEvmSmartAccount),\n/* harmony export */   updatePolicy: () => (/* reexport safe */ _generated_policy_engine_policy_engine_js__WEBPACK_IMPORTED_MODULE_8__.updatePolicy),\n/* harmony export */   updateSolanaAccount: () => (/* reexport safe */ _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__.updateSolanaAccount),\n/* harmony export */   validateEndUserAccessToken: () => (/* reexport safe */ _generated_end_user_accounts_end_user_accounts_js__WEBPACK_IMPORTED_MODULE_12__.validateEndUserAccessToken),\n/* harmony export */   verifyX402Payment: () => (/* reexport safe */ _generated_x402_facilitator_x402_facilitator_js__WEBPACK_IMPORTED_MODULE_13__.verifyX402Payment)\n/* harmony export */ });\n/* harmony import */ var _generated_coinbaseDeveloperPlatformAPIs_schemas_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/coinbaseDeveloperPlatformAPIs.schemas.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/coinbaseDeveloperPlatformAPIs.schemas.js\");\n/* harmony import */ var _generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generated/evm-accounts/evm-accounts.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-accounts/evm-accounts.js\");\n/* harmony import */ var _generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./generated/evm-smart-accounts/evm-smart-accounts.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-smart-accounts/evm-smart-accounts.js\");\n/* harmony import */ var _generated_evm_swaps_evm_swaps_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./generated/evm-swaps/evm-swaps.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-swaps/evm-swaps.js\");\n/* harmony import */ var _generated_evm_token_balances_evm_token_balances_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./generated/evm-token-balances/evm-token-balances.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/evm-token-balances/evm-token-balances.js\");\n/* harmony import */ var _generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./generated/solana-accounts/solana-accounts.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/solana-accounts/solana-accounts.js\");\n/* harmony import */ var _generated_solana_token_balances_solana_token_balances_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./generated/solana-token-balances/solana-token-balances.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/solana-token-balances/solana-token-balances.js\");\n/* harmony import */ var _generated_faucets_faucets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./generated/faucets/faucets.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/faucets/faucets.js\");\n/* harmony import */ var _generated_policy_engine_policy_engine_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./generated/policy-engine/policy-engine.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/policy-engine/policy-engine.js\");\n/* harmony import */ var _generated_payments_alpha_payments_alpha_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./generated/payments-alpha/payments-alpha.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/payments-alpha/payments-alpha.js\");\n/* harmony import */ var _generated_onramp_onramp_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./generated/onramp/onramp.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/onramp/onramp.js\");\n/* harmony import */ var _generated_onchain_data_onchain_data_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./generated/onchain-data/onchain-data.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/onchain-data/onchain-data.js\");\n/* harmony import */ var _generated_end_user_accounts_end_user_accounts_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./generated/end-user-accounts/end-user-accounts.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/end-user-accounts/end-user-accounts.js\");\n/* harmony import */ var _generated_x402_facilitator_x402_facilitator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./generated/x402-facilitator/x402-facilitator.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/x402-facilitator/x402-facilitator.js\");\n/* harmony import */ var _generated_sql_api_alpha_sql_api_alpha_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./generated/sql-api-alpha/sql-api-alpha.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/generated/sql-api-alpha/sql-api-alpha.js\");\n/* harmony import */ var _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./cdpApiClient.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/cdpApiClient.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst CdpOpenApiClient = {\n    ..._generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__,\n    ..._generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__,\n    ..._generated_evm_swaps_evm_swaps_js__WEBPACK_IMPORTED_MODULE_3__,\n    ..._generated_evm_token_balances_evm_token_balances_js__WEBPACK_IMPORTED_MODULE_4__,\n    ..._generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__,\n    ..._generated_solana_token_balances_solana_token_balances_js__WEBPACK_IMPORTED_MODULE_6__,\n    ..._generated_faucets_faucets_js__WEBPACK_IMPORTED_MODULE_7__,\n    ..._generated_onchain_data_onchain_data_js__WEBPACK_IMPORTED_MODULE_11__,\n    ..._generated_policy_engine_policy_engine_js__WEBPACK_IMPORTED_MODULE_8__,\n    ..._generated_payments_alpha_payments_alpha_js__WEBPACK_IMPORTED_MODULE_9__,\n    ..._generated_end_user_accounts_end_user_accounts_js__WEBPACK_IMPORTED_MODULE_12__,\n    configure: _cdpApiClient_js__WEBPACK_IMPORTED_MODULE_15__.configure,\n};\nconst OpenApiEvmMethods = {\n    ..._generated_evm_accounts_evm_accounts_js__WEBPACK_IMPORTED_MODULE_1__,\n    ..._generated_evm_smart_accounts_evm_smart_accounts_js__WEBPACK_IMPORTED_MODULE_2__,\n    ..._generated_evm_swaps_evm_swaps_js__WEBPACK_IMPORTED_MODULE_3__,\n    ..._generated_evm_token_balances_evm_token_balances_js__WEBPACK_IMPORTED_MODULE_4__,\n    requestEvmFaucet: _generated_faucets_faucets_js__WEBPACK_IMPORTED_MODULE_7__.requestEvmFaucet,\n};\nconst OpenApiSolanaMethods = {\n    ..._generated_solana_accounts_solana_accounts_js__WEBPACK_IMPORTED_MODULE_5__,\n    requestSolanaFaucet: _generated_faucets_faucets_js__WEBPACK_IMPORTED_MODULE_7__.requestSolanaFaucet,\n};\nconst OpenApiPoliciesMethods = {\n    ..._generated_policy_engine_policy_engine_js__WEBPACK_IMPORTED_MODULE_8__,\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9vcGVuYXBpLWNsaWVudC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFFO0FBQ1o7QUFDWTtBQUNsQjtBQUNrQjtBQUNOO0FBQ1k7QUFDNUI7QUFDWTtBQUNFO0FBQ2hCO0FBQ1k7QUFDVTtBQUNGO0FBQ047QUFDYjtBQUN3QztBQUN0QjtBQUN5QjtBQUMxQjtBQUMwQjtBQUMvQjtBQUNjO0FBQ0M7QUFDRjtBQUNFO0FBQ3lCO0FBQzNGO0FBQ1AsT0FBTyxvRUFBRztBQUNWLE9BQU8sZ0ZBQWdCO0FBQ3ZCLE9BQU8sOERBQVE7QUFDZixPQUFPLGdGQUFnQjtBQUN2QixPQUFPLDBFQUFNO0FBQ2IsT0FBTyxzRkFBbUI7QUFDMUIsT0FBTywwREFBTztBQUNkLE9BQU8scUVBQVc7QUFDbEIsT0FBTyxzRUFBUTtBQUNmLE9BQU8sd0VBQVE7QUFDZixPQUFPLCtFQUFlO0FBQ3RCLGFBQWE7QUFDYjtBQUNPO0FBQ1AsT0FBTyxvRUFBRztBQUNWLE9BQU8sZ0ZBQWdCO0FBQ3ZCLE9BQU8sOERBQVE7QUFDZixPQUFPLGdGQUFnQjtBQUN2QixzQkFBc0IsMkVBQXdCO0FBQzlDO0FBQ087QUFDUCxPQUFPLDBFQUFNO0FBQ2IseUJBQXlCLDhFQUEyQjtBQUNwRDtBQUNPO0FBQ1AsT0FBTyxzRUFBUTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vb3BlbmFwaS1jbGllbnQvaW5kZXguanM/NzlmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9nZW5lcmF0ZWQvY29pbmJhc2VEZXZlbG9wZXJQbGF0Zm9ybUFQSXMuc2NoZW1hcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VuZXJhdGVkL2V2bS1hY2NvdW50cy9ldm0tYWNjb3VudHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVyYXRlZC9ldm0tc21hcnQtYWNjb3VudHMvZXZtLXNtYXJ0LWFjY291bnRzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZW5lcmF0ZWQvZXZtLXN3YXBzL2V2bS1zd2Fwcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VuZXJhdGVkL2V2bS10b2tlbi1iYWxhbmNlcy9ldm0tdG9rZW4tYmFsYW5jZXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVyYXRlZC9zb2xhbmEtYWNjb3VudHMvc29sYW5hLWFjY291bnRzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZW5lcmF0ZWQvc29sYW5hLXRva2VuLWJhbGFuY2VzL3NvbGFuYS10b2tlbi1iYWxhbmNlcy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VuZXJhdGVkL2ZhdWNldHMvZmF1Y2V0cy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VuZXJhdGVkL3BvbGljeS1lbmdpbmUvcG9saWN5LWVuZ2luZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VuZXJhdGVkL3BheW1lbnRzLWFscGhhL3BheW1lbnRzLWFscGhhLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZW5lcmF0ZWQvb25yYW1wL29ucmFtcC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VuZXJhdGVkL29uY2hhaW4tZGF0YS9vbmNoYWluLWRhdGEuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVyYXRlZC9lbmQtdXNlci1hY2NvdW50cy9lbmQtdXNlci1hY2NvdW50cy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VuZXJhdGVkL3g0MDItZmFjaWxpdGF0b3IveDQwMi1mYWNpbGl0YXRvci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZ2VuZXJhdGVkL3NxbC1hcGktYWxwaGEvc3FsLWFwaS1hbHBoYS5qc1wiO1xuaW1wb3J0IHsgY29uZmlndXJlIH0gZnJvbSBcIi4vY2RwQXBpQ2xpZW50LmpzXCI7XG5pbXBvcnQgKiBhcyBlbmRVc2VyQWNjb3VudHMgZnJvbSBcIi4vZ2VuZXJhdGVkL2VuZC11c2VyLWFjY291bnRzL2VuZC11c2VyLWFjY291bnRzLmpzXCI7XG5pbXBvcnQgKiBhcyBldm0gZnJvbSBcIi4vZ2VuZXJhdGVkL2V2bS1hY2NvdW50cy9ldm0tYWNjb3VudHMuanNcIjtcbmltcG9ydCAqIGFzIGV2bVNtYXJ0QWNjb3VudHMgZnJvbSBcIi4vZ2VuZXJhdGVkL2V2bS1zbWFydC1hY2NvdW50cy9ldm0tc21hcnQtYWNjb3VudHMuanNcIjtcbmltcG9ydCAqIGFzIGV2bVN3YXBzIGZyb20gXCIuL2dlbmVyYXRlZC9ldm0tc3dhcHMvZXZtLXN3YXBzLmpzXCI7XG5pbXBvcnQgKiBhcyBldm1Ub2tlbkJhbGFuY2VzIGZyb20gXCIuL2dlbmVyYXRlZC9ldm0tdG9rZW4tYmFsYW5jZXMvZXZtLXRva2VuLWJhbGFuY2VzLmpzXCI7XG5pbXBvcnQgKiBhcyBmYXVjZXRzIGZyb20gXCIuL2dlbmVyYXRlZC9mYXVjZXRzL2ZhdWNldHMuanNcIjtcbmltcG9ydCAqIGFzIG9uY2hhaW5EYXRhIGZyb20gXCIuL2dlbmVyYXRlZC9vbmNoYWluLWRhdGEvb25jaGFpbi1kYXRhLmpzXCI7XG5pbXBvcnQgKiBhcyBwYXltZW50cyBmcm9tIFwiLi9nZW5lcmF0ZWQvcGF5bWVudHMtYWxwaGEvcGF5bWVudHMtYWxwaGEuanNcIjtcbmltcG9ydCAqIGFzIHBvbGljaWVzIGZyb20gXCIuL2dlbmVyYXRlZC9wb2xpY3ktZW5naW5lL3BvbGljeS1lbmdpbmUuanNcIjtcbmltcG9ydCAqIGFzIHNvbGFuYSBmcm9tIFwiLi9nZW5lcmF0ZWQvc29sYW5hLWFjY291bnRzL3NvbGFuYS1hY2NvdW50cy5qc1wiO1xuaW1wb3J0ICogYXMgc29sYW5hVG9rZW5CYWxhbmNlcyBmcm9tIFwiLi9nZW5lcmF0ZWQvc29sYW5hLXRva2VuLWJhbGFuY2VzL3NvbGFuYS10b2tlbi1iYWxhbmNlcy5qc1wiO1xuZXhwb3J0IGNvbnN0IENkcE9wZW5BcGlDbGllbnQgPSB7XG4gICAgLi4uZXZtLFxuICAgIC4uLmV2bVNtYXJ0QWNjb3VudHMsXG4gICAgLi4uZXZtU3dhcHMsXG4gICAgLi4uZXZtVG9rZW5CYWxhbmNlcyxcbiAgICAuLi5zb2xhbmEsXG4gICAgLi4uc29sYW5hVG9rZW5CYWxhbmNlcyxcbiAgICAuLi5mYXVjZXRzLFxuICAgIC4uLm9uY2hhaW5EYXRhLFxuICAgIC4uLnBvbGljaWVzLFxuICAgIC4uLnBheW1lbnRzLFxuICAgIC4uLmVuZFVzZXJBY2NvdW50cyxcbiAgICBjb25maWd1cmUsXG59O1xuZXhwb3J0IGNvbnN0IE9wZW5BcGlFdm1NZXRob2RzID0ge1xuICAgIC4uLmV2bSxcbiAgICAuLi5ldm1TbWFydEFjY291bnRzLFxuICAgIC4uLmV2bVN3YXBzLFxuICAgIC4uLmV2bVRva2VuQmFsYW5jZXMsXG4gICAgcmVxdWVzdEV2bUZhdWNldDogZmF1Y2V0cy5yZXF1ZXN0RXZtRmF1Y2V0LFxufTtcbmV4cG9ydCBjb25zdCBPcGVuQXBpU29sYW5hTWV0aG9kcyA9IHtcbiAgICAuLi5zb2xhbmEsXG4gICAgcmVxdWVzdFNvbGFuYUZhdWNldDogZmF1Y2V0cy5yZXF1ZXN0U29sYW5hRmF1Y2V0LFxufTtcbmV4cG9ydCBjb25zdCBPcGVuQXBpUG9saWNpZXNNZXRob2RzID0ge1xuICAgIC4uLnBvbGljaWVzLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/openapi-client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/policies/evmSchema.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/policies/evmSchema.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionEnum: () => (/* binding */ ActionEnum),\n/* harmony export */   EthValueCriterionSchema: () => (/* binding */ EthValueCriterionSchema),\n/* harmony export */   EthValueOperatorEnum: () => (/* binding */ EthValueOperatorEnum),\n/* harmony export */   EvmAddressCriterionSchema: () => (/* binding */ EvmAddressCriterionSchema),\n/* harmony export */   EvmAddressOperatorEnum: () => (/* binding */ EvmAddressOperatorEnum),\n/* harmony export */   EvmDataConditionSchema: () => (/* binding */ EvmDataConditionSchema),\n/* harmony export */   EvmDataCriterionSchema: () => (/* binding */ EvmDataCriterionSchema),\n/* harmony export */   EvmDataParameterConditionListSchema: () => (/* binding */ EvmDataParameterConditionListSchema),\n/* harmony export */   EvmDataParameterConditionSchema: () => (/* binding */ EvmDataParameterConditionSchema),\n/* harmony export */   EvmMessageCriterionSchema: () => (/* binding */ EvmMessageCriterionSchema),\n/* harmony export */   EvmNetworkCriterionSchema: () => (/* binding */ EvmNetworkCriterionSchema),\n/* harmony export */   EvmNetworkOperatorEnum: () => (/* binding */ EvmNetworkOperatorEnum),\n/* harmony export */   EvmOperationEnum: () => (/* binding */ EvmOperationEnum),\n/* harmony export */   EvmTypedAddressConditionSchema: () => (/* binding */ EvmTypedAddressConditionSchema),\n/* harmony export */   EvmTypedNumericalConditionSchema: () => (/* binding */ EvmTypedNumericalConditionSchema),\n/* harmony export */   EvmTypedStringConditionSchema: () => (/* binding */ EvmTypedStringConditionSchema),\n/* harmony export */   NetUSDChangeCriterionSchema: () => (/* binding */ NetUSDChangeCriterionSchema),\n/* harmony export */   PrepareUserOperationCriteriaSchema: () => (/* binding */ PrepareUserOperationCriteriaSchema),\n/* harmony export */   PrepareUserOperationEvmNetworkCriterionSchema: () => (/* binding */ PrepareUserOperationEvmNetworkCriterionSchema),\n/* harmony export */   PrepareUserOperationEvmNetworkEnum: () => (/* binding */ PrepareUserOperationEvmNetworkEnum),\n/* harmony export */   PrepareUserOperationRuleSchema: () => (/* binding */ PrepareUserOperationRuleSchema),\n/* harmony export */   SendEvmTransactionCriteriaSchema: () => (/* binding */ SendEvmTransactionCriteriaSchema),\n/* harmony export */   SendEvmTransactionEvmNetworkCriterionSchema: () => (/* binding */ SendEvmTransactionEvmNetworkCriterionSchema),\n/* harmony export */   SendEvmTransactionEvmNetworkEnum: () => (/* binding */ SendEvmTransactionEvmNetworkEnum),\n/* harmony export */   SendEvmTransactionRuleSchema: () => (/* binding */ SendEvmTransactionRuleSchema),\n/* harmony export */   SendUserOperationCriteriaSchema: () => (/* binding */ SendUserOperationCriteriaSchema),\n/* harmony export */   SendUserOperationRuleSchema: () => (/* binding */ SendUserOperationRuleSchema),\n/* harmony export */   SignEvmHashRuleSchema: () => (/* binding */ SignEvmHashRuleSchema),\n/* harmony export */   SignEvmMessageCriteriaSchema: () => (/* binding */ SignEvmMessageCriteriaSchema),\n/* harmony export */   SignEvmMessageRuleSchema: () => (/* binding */ SignEvmMessageRuleSchema),\n/* harmony export */   SignEvmTransactionCriteriaSchema: () => (/* binding */ SignEvmTransactionCriteriaSchema),\n/* harmony export */   SignEvmTransactionRuleSchema: () => (/* binding */ SignEvmTransactionRuleSchema),\n/* harmony export */   SignEvmTypedDataCriteriaSchema: () => (/* binding */ SignEvmTypedDataCriteriaSchema),\n/* harmony export */   SignEvmTypedDataFieldCriterionSchema: () => (/* binding */ SignEvmTypedDataFieldCriterionSchema),\n/* harmony export */   SignEvmTypedDataRuleSchema: () => (/* binding */ SignEvmTypedDataRuleSchema),\n/* harmony export */   SignEvmTypedDataVerifyingContractCriterionSchema: () => (/* binding */ SignEvmTypedDataVerifyingContractCriterionSchema)\n/* harmony export */ });\n/* harmony import */ var abitype_zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! abitype/zod */ \"(ssr)/./node_modules/abitype/dist/esm/zod.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/v3/types.js\");\n\n\n/**\n * Enum for EthValueOperator values\n */\nconst EthValueOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\">\", \">=\", \"<\", \"<=\", \"==\"]);\n/**\n * Enum for EvmAddressOperator values\n */\nconst EvmAddressOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"in\", \"not in\"]);\n/**\n * Enum for EvmNetworkOperator values\n */\nconst EvmNetworkOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"in\", \"not in\"]);\n/**\n * Schema for ETH value criterions\n */\nconst EthValueCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"ethValue\" for Ethereum value-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"ethValue\"),\n    /**\n     * The ETH value amount in wei to compare against, as a string.\n     * Must contain only digits.\n     */\n    ethValue: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[0-9]+$/),\n    /** The comparison operator to use for evaluating transaction values against the threshold. */\n    operator: EthValueOperatorEnum,\n});\n/**\n * Schema for EVM address criterions\n */\nconst EvmAddressCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"evmAddress\" for EVM address-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"evmAddress\"),\n    /**\n     * Array of EVM addresses to compare against.\n     * Each address must be a 0x-prefixed 40-character hexadecimal string.\n     * Limited to a maximum of 300 addresses per criterion.\n     */\n    addresses: zod__WEBPACK_IMPORTED_MODULE_0__.array(abitype_zod__WEBPACK_IMPORTED_MODULE_1__.Address).max(300),\n    /**\n     * The operator to use for evaluating transaction addresses.\n     * \"in\" checks if an address is in the provided list.\n     * \"not in\" checks if an address is not in the provided list.\n     */\n    operator: EvmAddressOperatorEnum,\n});\n/**\n * Enum for  PrepareUserOperation EVM Network values\n */\nconst PrepareUserOperationEvmNetworkEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"base-sepolia\",\n    \"base\",\n    \"arbitrum\",\n    \"optimism\",\n    \"zora\",\n    \"polygon\",\n    \"bnb\",\n    \"avalanche\",\n    \"ethereum\",\n    \"ethereum-sepolia\",\n]);\n/**\n * Enum for SendEvmTransaction EVM Network values\n */\nconst SendEvmTransactionEvmNetworkEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"base\",\n    \"base-sepolia\",\n    \"ethereum\",\n    \"ethereum-sepolia\",\n    \"avalanche\",\n    \"polygon\",\n    \"optimism\",\n    \"arbitrum\",\n]);\n/**\n * Schema for EVM network criterions\n */\nconst SendEvmTransactionEvmNetworkCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"evmAddress\" for EVM address-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"evmNetwork\"),\n    /**\n     * Array of EVM network identifiers to compare against.\n     * Either \"base\", \"base-sepolia\", \"ethereum\", \"ethereum-sepolia\", \"avalanche\", \"polygon\", \"optimism\", \"arbitrum\"\n     */\n    networks: zod__WEBPACK_IMPORTED_MODULE_0__.array(SendEvmTransactionEvmNetworkEnum),\n    /**\n     * The operator to use for evaluating transaction network.\n     * \"in\" checks if a network is in the provided list.\n     * \"not in\" checks if a network is not in the provided list.\n     */\n    operator: EvmNetworkOperatorEnum,\n});\nconst PrepareUserOperationEvmNetworkCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"evmAddress\" for EVM address-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"evmNetwork\"),\n    /**\n     * Array of EVM network identifiers to compare against.\n     * Either \"base-sepolia\", \"base\", \"arbitrum\", \"optimism\", \"zora\", \"polygon\", \"bnb\", \"avalanche\", \"ethereum\", \"ethereum-sepolia\"\n     */\n    networks: zod__WEBPACK_IMPORTED_MODULE_0__.array(PrepareUserOperationEvmNetworkEnum),\n    /**\n     * The operator to use for evaluating transaction network.\n     * \"in\" checks if a network is in the provided list.\n     * \"not in\" checks if a network is not in the provided list.\n     */\n    operator: EvmNetworkOperatorEnum,\n});\nconst EvmNetworkCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    SendEvmTransactionEvmNetworkCriterionSchema,\n    PrepareUserOperationEvmNetworkCriterionSchema,\n]);\n/**\n * Schema for EVM message criterions\n */\nconst EvmMessageCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"evmMessage\" for EVM message-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"evmMessage\"),\n    /**\n     * A regular expression the message is matched against.\n     * Accepts valid regular expression syntax described by [RE2](https://github.com/google/re2/wiki/Syntax).\n     */\n    match: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1),\n});\n/**\n * Schema for Net USD change criterion\n */\nconst NetUSDChangeCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"netUSDChange\" for USD denominated asset transfer rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"netUSDChange\"),\n    /**\n     * The amount of USD, in cents, that the total USD value of a transaction's asset transfer and exposure should be compared to.\n     */\n    changeCents: zod__WEBPACK_IMPORTED_MODULE_0__.number().int().nonnegative(),\n    /**\n     * The operator to use for the comparison. The total value of a transaction's asset transfer and exposure in USD will be on the left-hand side of the operator, and the `changeCents` field will be on the right-hand side.\n     */\n    operator: EthValueOperatorEnum,\n});\n/**\n * Schema for EVM typed address conditions\n */\nconst EvmTypedAddressConditionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Array of EVM addresses to compare against.\n     * Each address must be a 0x-prefixed 40-character hexadecimal string.\n     * Limited to a maximum of 300 addresses per condition.\n     */\n    addresses: zod__WEBPACK_IMPORTED_MODULE_0__.array(abitype_zod__WEBPACK_IMPORTED_MODULE_1__.Address).max(300),\n    /**\n     * The operator to use for evaluating addresses.\n     * \"in\" checks if an address is in the provided list.\n     * \"not in\" checks if an address is not in the provided list.\n     */\n    operator: EvmAddressOperatorEnum,\n    /**\n     * The path to the field to compare against this criterion.\n     * To reference deeply nested fields, use dot notation (e.g., \"order.buyer\").\n     */\n    path: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1),\n});\n/**\n * Schema for EVM typed numerical conditions\n */\nconst EvmTypedNumericalConditionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The numerical value to compare against, as a string.\n     * Must contain only digits.\n     */\n    value: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[0-9]+$/),\n    /**\n     * The comparison operator to use.\n     */\n    operator: EthValueOperatorEnum,\n    /**\n     * The path to the field to compare against this criterion.\n     * To reference deeply nested fields, use dot notation (e.g., \"order.price\").\n     */\n    path: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1),\n});\n/**\n * Schema for EVM typed string conditions\n */\nconst EvmTypedStringConditionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * A regular expression the string field is matched against.\n     * Accepts valid regular expression syntax described by [RE2](https://github.com/google/re2/wiki/Syntax).\n     */\n    match: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1),\n    /**\n     * The path to the field to compare against this criterion.\n     * To reference deeply nested fields, use dot notation (e.g., \"metadata.description\").\n     */\n    path: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1),\n});\n/**\n * Schema for SignEvmTypedData field criterion\n */\nconst SignEvmTypedDataFieldCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"evmTypedDataField\" for typed data field-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"evmTypedDataField\"),\n    /**\n     * The EIP-712 type definitions for the typed data.\n     * Must include at minimum the primary type being signed.\n     */\n    types: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * EIP-712 compliant map of model names to model definitions.\n         */\n        types: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            type: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        }))),\n        /**\n         * The name of the root EIP-712 type. This value must be included in the `types` object.\n         */\n        primaryType: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    }),\n    /**\n     * Array of conditions to apply against typed data fields.\n     * Each condition specifies how to validate a specific field within the typed data.\n     */\n    conditions: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.union([\n        EvmTypedAddressConditionSchema,\n        EvmTypedNumericalConditionSchema,\n        EvmTypedStringConditionSchema,\n    ]))\n        .min(1),\n});\n/**\n * Schema for SignEvmTypedData verifying contract criterion\n */\nconst SignEvmTypedDataVerifyingContractCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"evmTypedDataVerifyingContract\" for verifying contract-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"evmTypedDataVerifyingContract\"),\n    /**\n     * Array of EVM addresses allowed or disallowed as verifying contracts.\n     * Each address must be a 0x-prefixed 40-character hexadecimal string.\n     * Limited to a maximum of 300 addresses per criterion.\n     */\n    addresses: zod__WEBPACK_IMPORTED_MODULE_0__.array(abitype_zod__WEBPACK_IMPORTED_MODULE_1__.Address).max(300),\n    /**\n     * The operator to use for evaluating verifying contract addresses.\n     * \"in\" checks if the verifying contract is in the provided list.\n     * \"not in\" checks if the verifying contract is not in the provided list.\n     */\n    operator: EvmAddressOperatorEnum,\n});\n/**\n * Schema for criteria used in SignEvmTypedData operations\n */\nconst SignEvmTypedDataCriteriaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    SignEvmTypedDataFieldCriterionSchema,\n    SignEvmTypedDataVerifyingContractCriterionSchema,\n]))\n    .max(10)\n    .min(1);\n/**\n * A list of comparables to apply against encoded arguments in the transaction's `data` field.\n */\nconst EvmDataParameterConditionListSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The name of the parameter to check against a transaction's calldata.\n     * If name is unknown, or is not named, you may supply an array index, e.g., `0` for first parameter.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.union([zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1), zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d+$/)]),\n    /**\n     * The operator to use for the comparison. The value resolved at the `name` will be on the\n     * left-hand side of the operator, and the `values` field will be on the right-hand side.\n     */\n    operator: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"in\", \"not in\"]),\n    /**\n     * Values to compare against the resolved `name` value.\n     * All values are encoded as strings. Refer to the table in the documentation for how values\n     * should be encoded, and which operators are supported for each type.\n     */\n    values: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n});\n/**\n * A single condition to apply against encoded arguments in the transaction's `data` field.\n */\nconst EvmDataParameterConditionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The name of the parameter to check against a transaction's calldata.\n     * If name is unknown, or is not named, you may supply an array index, e.g., `0` for first parameter.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.union([zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1), zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^\\d+$/)]),\n    /**\n     * The operator to use for the comparison. The value resolved at the `name` will be on the\n     * left-hand side of the operator, and the `value` field will be on the right-hand side.\n     */\n    operator: EthValueOperatorEnum,\n    /**\n     * A single value to compare the value resolved at `name` to.\n     * All values are encoded as strings. Refer to the table in the documentation for how values\n     * should be encoded, and which operators are supported for each type.\n     */\n    value: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n});\n/**\n * A single condition to apply against the function and encoded arguments in the transaction's `data` field.\n * Each `parameter` configuration must be successfully evaluated against the corresponding function argument\n * in order for a policy to be accepted.\n */\nconst EvmDataConditionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The name of a smart contract function being called.\n     */\n    function: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1),\n    /**\n     * An optional list of parameter conditions to apply against encoded arguments in the transaction's `data` field.\n     */\n    params: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.union([EvmDataParameterConditionSchema, EvmDataParameterConditionListSchema]))\n        .min(1)\n        .optional(),\n});\n/**\n * Schema for EVM data criterion\n */\nconst EvmDataCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"evmData\" for EVM transaction rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"evmData\"),\n    /**\n     * The ABI of the smart contract being called. This can be a partial structure with only specific functions.\n     */\n    abi: zod__WEBPACK_IMPORTED_MODULE_0__.union([zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"erc20\", \"erc721\", \"erc1155\"]), abitype_zod__WEBPACK_IMPORTED_MODULE_1__.Abi]),\n    /**\n     * A list of conditions to apply against the function and encoded arguments in the transaction's `data` field.\n     * Each condition must be met in order for this policy to be accepted or rejected.\n     */\n    conditions: zod__WEBPACK_IMPORTED_MODULE_0__.array(EvmDataConditionSchema).min(1),\n});\n/**\n * Schema for criteria used in SignEvmTransaction operations\n */\nconst SignEvmTransactionCriteriaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    EthValueCriterionSchema,\n    EvmAddressCriterionSchema,\n    EvmDataCriterionSchema,\n    NetUSDChangeCriterionSchema,\n]))\n    .max(10)\n    .min(1);\n/**\n * Schema for criteria used in SignEvmMessage operations\n */\nconst SignEvmMessageCriteriaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [EvmMessageCriterionSchema]))\n    .max(10)\n    .min(1);\n/**\n * Schema for criteria used in SendEvmTransaction operations\n */\nconst SendEvmTransactionCriteriaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    EthValueCriterionSchema,\n    EvmAddressCriterionSchema,\n    SendEvmTransactionEvmNetworkCriterionSchema,\n    EvmDataCriterionSchema,\n    NetUSDChangeCriterionSchema,\n]))\n    .max(10)\n    .min(1);\n/**\n * Schema for criteria used in PrepareUserOperation operations\n */\nconst PrepareUserOperationCriteriaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    EthValueCriterionSchema,\n    EvmAddressCriterionSchema,\n    PrepareUserOperationEvmNetworkCriterionSchema,\n    EvmDataCriterionSchema,\n    NetUSDChangeCriterionSchema,\n]))\n    .max(10)\n    .min(1);\n/**\n * Schema for criteria used in SendUserOperation operations\n */\nconst SendUserOperationCriteriaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    EthValueCriterionSchema,\n    EvmAddressCriterionSchema,\n    EvmDataCriterionSchema,\n    NetUSDChangeCriterionSchema,\n]))\n    .max(10)\n    .min(1);\n/**\n * Enum for Evm Operation types\n */\nconst EvmOperationEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"signEvmTransaction\",\n    \"sendEvmTransaction\",\n    \"signEvmMessage\",\n    \"signEvmTypedData\",\n    \"signEvmHash\",\n    \"prepareUserOperation\",\n    \"sendUserOperation\",\n]);\n/**\n * Enum for Action types\n */\nconst ActionEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"reject\", \"accept\"]);\n/**\n * Type representing a 'signEvmTransaction' policy rule that can accept or reject specific operations\n * based on a set of criteria.\n */\nconst SignEvmTransactionRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Determines whether matching the rule will cause a request to be rejected or accepted.\n     * \"accept\" will allow the transaction, \"reject\" will block it.\n     */\n    action: ActionEnum,\n    /**\n     * The operation to which this rule applies.\n     * Must be \"signEvmTransaction\".\n     */\n    operation: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"signEvmTransaction\"),\n    /**\n     * The set of criteria that must be matched for this rule to apply.\n     * Must be compatible with the specified operation type.\n     */\n    criteria: SignEvmTransactionCriteriaSchema,\n});\n/**\n * Type representing a 'signEvmHash' policy rule that can accept or reject specific operations\n * based on a set of criteria.\n */\nconst SignEvmHashRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Determines whether matching the rule will cause a request to be rejected or accepted.\n     * \"accept\" will allow the signing, \"reject\" will block it.\n     */\n    action: ActionEnum,\n    /**\n     * The operation to which this rule applies.\n     * Must be \"signEvmHash\".\n     */\n    operation: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"signEvmHash\"),\n});\n/**\n * Type representing a 'signEvmMessage' policy rule that can accept or reject specific operations\n * based on a set of criteria.\n */\nconst SignEvmMessageRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Determines whether matching the rule will cause a request to be rejected or accepted.\n     * \"accept\" will allow the signing, \"reject\" will block it.\n     */\n    action: ActionEnum,\n    /**\n     * The operation to which this rule applies.\n     * Must be \"signEvmMessage\".\n     */\n    operation: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"signEvmMessage\"),\n    /**\n     * The set of criteria that must be matched for this rule to apply.\n     * Must be compatible with the specified operation type.\n     */\n    criteria: SignEvmMessageCriteriaSchema,\n});\n/**\n * Type representing a 'signEvmTypedData' policy rule that can accept or reject specific operations\n * based on a set of criteria.\n */\nconst SignEvmTypedDataRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Determines whether matching the rule will cause a request to be rejected or accepted.\n     * \"accept\" will allow the signing, \"reject\" will block it.\n     */\n    action: ActionEnum,\n    /**\n     * The operation to which this rule applies.\n     * Must be \"signEvmTypedData\".\n     */\n    operation: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"signEvmTypedData\"),\n    /**\n     * The set of criteria that must be matched for this rule to apply.\n     * Must be compatible with the specified operation type.\n     */\n    criteria: SignEvmTypedDataCriteriaSchema,\n});\n/**\n * Type representing a 'sendEvmTransaction' policy rule that can accept or reject specific operations\n * based on a set of criteria.\n */\nconst SendEvmTransactionRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Determines whether matching the rule will cause a request to be rejected or accepted.\n     * \"accept\" will allow the transaction, \"reject\" will block it.\n     */\n    action: ActionEnum,\n    /**\n     * The operation to which this rule applies.\n     * Must be \"sendEvmTransaction\".\n     */\n    operation: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"sendEvmTransaction\"),\n    /**\n     * The set of criteria that must be matched for this rule to apply.\n     * Must be compatible with the specified operation type.\n     */\n    criteria: SendEvmTransactionCriteriaSchema,\n});\n/**\n * Type representing a 'prepareUserOperation' policy rule that can accept or reject specific operations\n * based on a set of criteria.\n */\nconst PrepareUserOperationRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Determines whether matching the rule will cause a request to be rejected or accepted.\n     * \"accept\" will allow the operation, \"reject\" will block it.\n     */\n    action: ActionEnum,\n    /**\n     * The operation to which this rule applies.\n     * Must be \"prepareUserOperation\".\n     */\n    operation: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"prepareUserOperation\"),\n    /**\n     * The set of criteria that must be matched for this rule to apply.\n     * Must be compatible with the specified operation type.\n     */\n    criteria: PrepareUserOperationCriteriaSchema,\n});\n/**\n * Type representing a 'sendUserOperation' policy rule that can accept or reject specific operations\n * based on a set of criteria.\n */\nconst SendUserOperationRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Determines whether matching the rule will cause a request to be rejected or accepted.\n     * \"accept\" will allow the operation, \"reject\" will block it.\n     */\n    action: ActionEnum,\n    /**\n     * The operation to which this rule applies.\n     * Must be \"sendUserOperation\".\n     */\n    operation: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"sendUserOperation\"),\n    /**\n     * The set of criteria that must be matched for this rule to apply.\n     * Must be compatible with the specified operation type.\n     */\n    criteria: SendUserOperationCriteriaSchema,\n});\n//# sourceMappingURL=evmSchema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/policies/evmSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/policies/solanaSchema.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/policies/solanaSchema.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionEnum: () => (/* binding */ ActionEnum),\n/* harmony export */   IdlSchema: () => (/* binding */ IdlSchema),\n/* harmony export */   KnownIdlTypeEnum: () => (/* binding */ KnownIdlTypeEnum),\n/* harmony export */   MintAddressCriterionSchema: () => (/* binding */ MintAddressCriterionSchema),\n/* harmony export */   MintAddressOperatorEnum: () => (/* binding */ MintAddressOperatorEnum),\n/* harmony export */   ProgramIdCriterionSchema: () => (/* binding */ ProgramIdCriterionSchema),\n/* harmony export */   ProgramIdOperatorEnum: () => (/* binding */ ProgramIdOperatorEnum),\n/* harmony export */   SendSolTransactionCriteriaSchema: () => (/* binding */ SendSolTransactionCriteriaSchema),\n/* harmony export */   SendSolTransactionRuleSchema: () => (/* binding */ SendSolTransactionRuleSchema),\n/* harmony export */   SignSolMessageCriteriaSchema: () => (/* binding */ SignSolMessageCriteriaSchema),\n/* harmony export */   SignSolMessageRuleSchema: () => (/* binding */ SignSolMessageRuleSchema),\n/* harmony export */   SignSolTransactionCriteriaSchema: () => (/* binding */ SignSolTransactionCriteriaSchema),\n/* harmony export */   SignSolTransactionRuleSchema: () => (/* binding */ SignSolTransactionRuleSchema),\n/* harmony export */   SolAddressCriterionSchema: () => (/* binding */ SolAddressCriterionSchema),\n/* harmony export */   SolAddressOperatorEnum: () => (/* binding */ SolAddressOperatorEnum),\n/* harmony export */   SolDataConditionSchema: () => (/* binding */ SolDataConditionSchema),\n/* harmony export */   SolDataCriterionSchema: () => (/* binding */ SolDataCriterionSchema),\n/* harmony export */   SolDataParameterConditionListSchema: () => (/* binding */ SolDataParameterConditionListSchema),\n/* harmony export */   SolDataParameterConditionSchema: () => (/* binding */ SolDataParameterConditionSchema),\n/* harmony export */   SolDataParameterListOperatorEnum: () => (/* binding */ SolDataParameterListOperatorEnum),\n/* harmony export */   SolDataParameterOperatorEnum: () => (/* binding */ SolDataParameterOperatorEnum),\n/* harmony export */   SolMessageCriterionSchema: () => (/* binding */ SolMessageCriterionSchema),\n/* harmony export */   SolNetworkCriterionSchema: () => (/* binding */ SolNetworkCriterionSchema),\n/* harmony export */   SolNetworkEnum: () => (/* binding */ SolNetworkEnum),\n/* harmony export */   SolNetworkOperatorEnum: () => (/* binding */ SolNetworkOperatorEnum),\n/* harmony export */   SolOperationEnum: () => (/* binding */ SolOperationEnum),\n/* harmony export */   SolValueCriterionSchema: () => (/* binding */ SolValueCriterionSchema),\n/* harmony export */   SolValueOperatorEnum: () => (/* binding */ SolValueOperatorEnum),\n/* harmony export */   SplAddressCriterionSchema: () => (/* binding */ SplAddressCriterionSchema),\n/* harmony export */   SplAddressOperatorEnum: () => (/* binding */ SplAddressOperatorEnum),\n/* harmony export */   SplValueCriterionSchema: () => (/* binding */ SplValueCriterionSchema),\n/* harmony export */   SplValueOperatorEnum: () => (/* binding */ SplValueOperatorEnum)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/v3/types.js\");\n\n/**\n * Enum for Action types\n */\nconst ActionEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"reject\", \"accept\"]);\n/**\n * Enum for SolAddressOperator values\n */\nconst SolAddressOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"in\", \"not in\"]);\n/**\n * Enum for SolValueOperator values\n */\nconst SolValueOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\">\", \">=\", \"<\", \"<=\", \"==\"]);\n/**\n * Enum for SplAddressOperator values\n */\nconst SplAddressOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"in\", \"not in\"]);\n/**\n * Enum for SplValueOperator values\n */\nconst SplValueOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\">\", \">=\", \"<\", \"<=\", \"==\"]);\n/**\n * Enum for MintAddressOperator values\n */\nconst MintAddressOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"in\", \"not in\"]);\n/**\n * Enum for ProgramIdOperator values\n */\nconst ProgramIdOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"in\", \"not in\"]);\n/**\n * Enum for SolNetworkOperator values\n */\nconst SolNetworkOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"in\", \"not in\"]);\n/**\n * Enum for supported Solana networks\n */\nconst SolNetworkEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"solana-devnet\", \"solana\"]);\n/**\n * Enum for KnownIdlType values\n */\nconst KnownIdlTypeEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"SystemProgram\", \"TokenProgram\", \"AssociatedTokenProgram\"]);\n/**\n * Schema for IDL specifications following Anchor's IDL format v0.30+\n */\nconst IdlSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The program address */\n    address: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /** Array of instruction specifications */\n    instructions: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.any()),\n})\n    .passthrough();\n/**\n * Enum for SolDataParameterOperator values\n */\nconst SolDataParameterOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\">\", \">=\", \"<\", \"<=\", \"==\"]);\n/**\n * Enum for SolDataParameterListOperator values\n */\nconst SolDataParameterListOperatorEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"in\", \"not in\"]);\n/**\n * Schema for Solana data parameter conditions (single value)\n */\nconst SolDataParameterConditionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The parameter name */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /** The operator to use for the comparison */\n    operator: SolDataParameterOperatorEnum,\n    /** The value to compare against */\n    value: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n});\n/**\n * Schema for Solana data parameter conditions (list values)\n */\nconst SolDataParameterConditionListSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The parameter name */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /** The operator to use for the comparison */\n    operator: SolDataParameterListOperatorEnum,\n    /** The values to compare against */\n    values: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n});\n/**\n * Schema for Solana data conditions\n */\nconst SolDataConditionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The instruction name */\n    instruction: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /** Parameter conditions for the instruction */\n    params: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.union([SolDataParameterConditionSchema, SolDataParameterConditionListSchema]))\n        .optional(),\n});\n/**\n * Schema for Solana address criterions\n */\nconst SolAddressCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"solAddress\" for Solana address-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"solAddress\"),\n    /**\n     * Array of Solana addresses to compare against.\n     * Each address must be a valid Base58-encoded Solana address (32-44 characters).\n     */\n    addresses: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/)),\n    /**\n     * The operator to use for evaluating transaction addresses.\n     * \"in\" checks if an address is in the provided list.\n     * \"not in\" checks if an address is not in the provided list.\n     */\n    operator: SolAddressOperatorEnum,\n});\n/**\n * Schema for SOL value criterions\n */\nconst SolValueCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"solValue\" for SOL value-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"solValue\"),\n    /**\n     * The SOL value amount in lamports to compare against, as a string.\n     * Must contain only digits.\n     */\n    solValue: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[0-9]+$/),\n    /** The comparison operator to use for evaluating transaction SOL values against the threshold. */\n    operator: SolValueOperatorEnum,\n});\n/**\n * Schema for SPL address criterions\n */\nconst SplAddressCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"splAddress\" for SPL address-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"splAddress\"),\n    /**\n     * Array of Solana addresses to compare against for SPL token transfer recipients.\n     * Each address must be a valid Base58-encoded Solana address (32-44 characters).\n     */\n    addresses: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/)),\n    /**\n     * The operator to use for evaluating SPL token transfer recipient addresses.\n     * \"in\" checks if an address is in the provided list.\n     * \"not in\" checks if an address is not in the provided list.\n     */\n    operator: SplAddressOperatorEnum,\n});\n/**\n * Schema for SPL value criterions\n */\nconst SplValueCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"splValue\" for SPL token value-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"splValue\"),\n    /**\n     * The SPL token value amount to compare against, as a string.\n     * Must contain only digits.\n     */\n    splValue: zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[0-9]+$/),\n    /** The comparison operator to use for evaluating SPL token values against the threshold. */\n    operator: SplValueOperatorEnum,\n});\n/**\n * Schema for mint address criterions\n */\nconst MintAddressCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"mintAddress\" for token mint address-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"mintAddress\"),\n    /**\n     * Array of Solana addresses to compare against for token mint addresses.\n     * Each address must be a valid Base58-encoded Solana address (32-44 characters).\n     */\n    addresses: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/)),\n    /**\n     * The operator to use for evaluating token mint addresses.\n     * \"in\" checks if an address is in the provided list.\n     * \"not in\" checks if an address is not in the provided list.\n     */\n    operator: MintAddressOperatorEnum,\n});\n/**\n * Schema for Solana data criterions\n */\nconst SolDataCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"solData\" for Solana data-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"solData\"),\n    /**\n     * List of IDL specifications. Can contain known program names (strings) or custom IDL objects.\n     */\n    idls: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.union([KnownIdlTypeEnum, IdlSchema])),\n    /**\n     * A list of conditions to apply against the transaction instruction.\n     * Only one condition must evaluate to true for this criterion to be met.\n     */\n    conditions: zod__WEBPACK_IMPORTED_MODULE_0__.array(SolDataConditionSchema),\n});\n/**\n * Schema for program ID criterions\n */\nconst ProgramIdCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"programId\" for program ID-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"programId\"),\n    /**\n     * Array of Solana program IDs to compare against.\n     * Each program ID must be a valid Base58-encoded Solana address (32-44 characters).\n     */\n    programIds: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string().regex(/^[1-9A-HJ-NP-Za-km-z]{32,44}$/)),\n    /**\n     * The operator to use for evaluating transaction program IDs.\n     * \"in\" checks if a program ID is in the provided list.\n     * \"not in\" checks if a program ID is not in the provided list.\n     */\n    operator: ProgramIdOperatorEnum,\n});\n/**\n * Schema for Solana network criterions\n */\nconst SolNetworkCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"solNetwork\" for network-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"solNetwork\"),\n    /**\n     * Array of Solana networks to compare against.\n     */\n    networks: zod__WEBPACK_IMPORTED_MODULE_0__.array(SolNetworkEnum),\n    /**\n     * The operator to use for evaluating transaction network.\n     * \"in\" checks if the network is in the provided list.\n     * \"not in\" checks if the network is not in the provided list.\n     */\n    operator: SolNetworkOperatorEnum,\n});\n/**\n * Schema for Solana message criterions\n */\nconst SolMessageCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** The type of criterion, must be \"solMessage\" for message-based rules. */\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"solMessage\"),\n    /**\n     * A regular expression pattern to match against the message.\n     */\n    match: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n});\n/**\n * Schema for criteria used in SignSolTransaction operations\n */\nconst SignSolTransactionCriteriaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    SolAddressCriterionSchema,\n    SolValueCriterionSchema,\n    SplAddressCriterionSchema,\n    SplValueCriterionSchema,\n    MintAddressCriterionSchema,\n    SolDataCriterionSchema,\n    ProgramIdCriterionSchema,\n]))\n    .max(10)\n    .min(1);\n/**\n * Schema for criteria used in SendSolTransaction operations\n */\nconst SendSolTransactionCriteriaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    SolAddressCriterionSchema,\n    SolValueCriterionSchema,\n    SplAddressCriterionSchema,\n    SplValueCriterionSchema,\n    MintAddressCriterionSchema,\n    SolDataCriterionSchema,\n    ProgramIdCriterionSchema,\n    SolNetworkCriterionSchema,\n]))\n    .max(10)\n    .min(1);\n/**\n * Enum for Solana Operation types\n */\nconst SolOperationEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"signSolTransaction\",\n    \"sendSolTransaction\",\n    \"signSolMessage\",\n]);\n/**\n * Type representing a 'signSolTransaction' policy rule that can accept or reject specific operations\n * based on a set of criteria.\n */\nconst SignSolTransactionRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Determines whether matching the rule will cause a request to be rejected or accepted.\n     * \"accept\" will allow the transaction, \"reject\" will block it.\n     */\n    action: ActionEnum,\n    /**\n     * The operation to which this rule applies.\n     * Must be \"signSolTransaction\".\n     */\n    operation: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"signSolTransaction\"),\n    /**\n     * The set of criteria that must be matched for this rule to apply.\n     * Must be compatible with the specified operation type.\n     */\n    criteria: SignSolTransactionCriteriaSchema,\n});\n/**\n * Type representing a 'sendSolTransaction' policy rule that can accept or reject specific operations\n * based on a set of criteria.\n */\nconst SendSolTransactionRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Determines whether matching the rule will cause a request to be rejected or accepted.\n     * \"accept\" will allow the transaction, \"reject\" will block it.\n     */\n    action: ActionEnum,\n    /**\n     * The operation to which this rule applies.\n     * Must be \"sendSolTransaction\".\n     */\n    operation: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"sendSolTransaction\"),\n    /**\n     * The set of criteria that must be matched for this rule to apply.\n     * Must be compatible with the specified operation type.\n     */\n    criteria: SendSolTransactionCriteriaSchema,\n});\n/**\n * Schema for criteria used in SignSolMessage operations\n */\nconst SignSolMessageCriteriaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.array(SolMessageCriterionSchema).max(10).min(1);\n/**\n * Type representing a 'signSolMessage' policy rule that can accept or reject specific operations\n * based on a set of criteria.\n */\nconst SignSolMessageRuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Determines whether matching the rule will cause a request to be rejected or accepted.\n     * \"accept\" will allow the message signing, \"reject\" will block it.\n     */\n    action: ActionEnum,\n    /**\n     * The operation to which this rule applies.\n     * Must be \"signSolMessage\".\n     */\n    operation: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"signSolMessage\"),\n    /**\n     * The set of criteria that must be matched for this rule to apply.\n     * Must be compatible with the specified operation type.\n     */\n    criteria: SignSolMessageCriteriaSchema,\n});\n//# sourceMappingURL=solanaSchema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/policies/solanaSchema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/policies/types.js":
/*!***************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/policies/types.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CreatePolicyBodySchema: () => (/* binding */ CreatePolicyBodySchema),\n/* harmony export */   PolicyScopeEnum: () => (/* binding */ PolicyScopeEnum),\n/* harmony export */   RuleSchema: () => (/* binding */ RuleSchema),\n/* harmony export */   UpdatePolicyBodySchema: () => (/* binding */ UpdatePolicyBodySchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _evmSchema_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./evmSchema.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/policies/evmSchema.js\");\n/* harmony import */ var _solanaSchema_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./solanaSchema.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/policies/solanaSchema.js\");\n\n\n\n/**\n * Enum for policy scopes\n */\nconst PolicyScopeEnum = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"project\", \"account\"]);\n/**\n * Schema for policy rules\n */\nconst RuleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"operation\", [\n    _evmSchema_js__WEBPACK_IMPORTED_MODULE_1__.SignEvmTransactionRuleSchema,\n    _evmSchema_js__WEBPACK_IMPORTED_MODULE_1__.SignEvmHashRuleSchema,\n    _evmSchema_js__WEBPACK_IMPORTED_MODULE_1__.SignEvmMessageRuleSchema,\n    _evmSchema_js__WEBPACK_IMPORTED_MODULE_1__.SignEvmTypedDataRuleSchema,\n    _evmSchema_js__WEBPACK_IMPORTED_MODULE_1__.SendEvmTransactionRuleSchema,\n    _solanaSchema_js__WEBPACK_IMPORTED_MODULE_2__.SignSolTransactionRuleSchema,\n    _solanaSchema_js__WEBPACK_IMPORTED_MODULE_2__.SendSolTransactionRuleSchema,\n    _solanaSchema_js__WEBPACK_IMPORTED_MODULE_2__.SignSolMessageRuleSchema,\n    _evmSchema_js__WEBPACK_IMPORTED_MODULE_1__.PrepareUserOperationRuleSchema,\n    _evmSchema_js__WEBPACK_IMPORTED_MODULE_1__.SendUserOperationRuleSchema,\n]);\n/**\n * Schema for creating or updating a Policy.\n */\nconst CreatePolicyBodySchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The scope of the policy.\n     * \"project\" applies to the entire project, \"account\" applies to specific accounts.\n     */\n    scope: PolicyScopeEnum,\n    /**\n     * An optional human-readable description for the policy.\n     * Limited to 50 characters of alphanumeric characters, spaces, commas, and periods.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n        .regex(/^[A-Za-z0-9 ,.]{1,50}$/)\n        .optional(),\n    /**\n     * Array of rules that comprise the policy.\n     * Limited to a maximum of 10 rules per policy.\n     */\n    rules: zod__WEBPACK_IMPORTED_MODULE_0__.array(RuleSchema).max(10).min(1),\n});\nconst UpdatePolicyBodySchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * An optional human-readable description for the policy.\n     * Limited to 50 characters of alphanumeric characters, spaces, commas, and periods.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n        .regex(/^[A-Za-z0-9 ,.]{1,50}$/)\n        .optional(),\n    /**\n     * Array of rules that comprise the policy.\n     * Limited to a maximum of 10 rules per policy.\n     */\n    rules: zod__WEBPACK_IMPORTED_MODULE_0__.array(RuleSchema).max(10).min(1),\n});\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9wb2xpY2llcy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXdCO0FBQytNO0FBQzdHO0FBQzFIO0FBQ0E7QUFDQTtBQUNPLHdCQUF3Qix3Q0FBTTtBQUNyQztBQUNBO0FBQ0E7QUFDTyxtQkFBbUIsbURBQW9CO0FBQzlDLElBQUksdUVBQTRCO0FBQ2hDLElBQUksZ0VBQXFCO0FBQ3pCLElBQUksbUVBQXdCO0FBQzVCLElBQUkscUVBQTBCO0FBQzlCLElBQUksdUVBQTRCO0FBQ2hDLElBQUksMEVBQTRCO0FBQ2hDLElBQUksMEVBQTRCO0FBQ2hDLElBQUksc0VBQXdCO0FBQzVCLElBQUkseUVBQThCO0FBQ2xDLElBQUksc0VBQTJCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLHVDQUFRO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix1Q0FDRjtBQUNmLGdDQUFnQyxLQUFLO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNDQUFPO0FBQ2xCLENBQUM7QUFDTSwrQkFBK0IsdUNBQVE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsdUNBQ0Y7QUFDZixnQ0FBZ0MsS0FBSztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzQ0FBTztBQUNsQixDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vcG9saWNpZXMvdHlwZXMuanM/OTUzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHsgUHJlcGFyZVVzZXJPcGVyYXRpb25SdWxlU2NoZW1hLCBTZW5kRXZtVHJhbnNhY3Rpb25SdWxlU2NoZW1hLCBTaWduRXZtSGFzaFJ1bGVTY2hlbWEsIFNpZ25Fdm1NZXNzYWdlUnVsZVNjaGVtYSwgU2lnbkV2bVRyYW5zYWN0aW9uUnVsZVNjaGVtYSwgU2lnbkV2bVR5cGVkRGF0YVJ1bGVTY2hlbWEsIFNlbmRVc2VyT3BlcmF0aW9uUnVsZVNjaGVtYSwgfSBmcm9tIFwiLi9ldm1TY2hlbWEuanNcIjtcbmltcG9ydCB7IFNlbmRTb2xUcmFuc2FjdGlvblJ1bGVTY2hlbWEsIFNpZ25Tb2xUcmFuc2FjdGlvblJ1bGVTY2hlbWEsIFNpZ25Tb2xNZXNzYWdlUnVsZVNjaGVtYSwgfSBmcm9tIFwiLi9zb2xhbmFTY2hlbWEuanNcIjtcbi8qKlxuICogRW51bSBmb3IgcG9saWN5IHNjb3Blc1xuICovXG5leHBvcnQgY29uc3QgUG9saWN5U2NvcGVFbnVtID0gei5lbnVtKFtcInByb2plY3RcIiwgXCJhY2NvdW50XCJdKTtcbi8qKlxuICogU2NoZW1hIGZvciBwb2xpY3kgcnVsZXNcbiAqL1xuZXhwb3J0IGNvbnN0IFJ1bGVTY2hlbWEgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbihcIm9wZXJhdGlvblwiLCBbXG4gICAgU2lnbkV2bVRyYW5zYWN0aW9uUnVsZVNjaGVtYSxcbiAgICBTaWduRXZtSGFzaFJ1bGVTY2hlbWEsXG4gICAgU2lnbkV2bU1lc3NhZ2VSdWxlU2NoZW1hLFxuICAgIFNpZ25Fdm1UeXBlZERhdGFSdWxlU2NoZW1hLFxuICAgIFNlbmRFdm1UcmFuc2FjdGlvblJ1bGVTY2hlbWEsXG4gICAgU2lnblNvbFRyYW5zYWN0aW9uUnVsZVNjaGVtYSxcbiAgICBTZW5kU29sVHJhbnNhY3Rpb25SdWxlU2NoZW1hLFxuICAgIFNpZ25Tb2xNZXNzYWdlUnVsZVNjaGVtYSxcbiAgICBQcmVwYXJlVXNlck9wZXJhdGlvblJ1bGVTY2hlbWEsXG4gICAgU2VuZFVzZXJPcGVyYXRpb25SdWxlU2NoZW1hLFxuXSk7XG4vKipcbiAqIFNjaGVtYSBmb3IgY3JlYXRpbmcgb3IgdXBkYXRpbmcgYSBQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCBDcmVhdGVQb2xpY3lCb2R5U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIFRoZSBzY29wZSBvZiB0aGUgcG9saWN5LlxuICAgICAqIFwicHJvamVjdFwiIGFwcGxpZXMgdG8gdGhlIGVudGlyZSBwcm9qZWN0LCBcImFjY291bnRcIiBhcHBsaWVzIHRvIHNwZWNpZmljIGFjY291bnRzLlxuICAgICAqL1xuICAgIHNjb3BlOiBQb2xpY3lTY29wZUVudW0sXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gZm9yIHRoZSBwb2xpY3kuXG4gICAgICogTGltaXRlZCB0byA1MCBjaGFyYWN0ZXJzIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLCBzcGFjZXMsIGNvbW1hcywgYW5kIHBlcmlvZHMuXG4gICAgICovXG4gICAgZGVzY3JpcHRpb246IHpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5yZWdleCgvXltBLVphLXowLTkgLC5dezEsNTB9JC8pXG4gICAgICAgIC5vcHRpb25hbCgpLFxuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIHJ1bGVzIHRoYXQgY29tcHJpc2UgdGhlIHBvbGljeS5cbiAgICAgKiBMaW1pdGVkIHRvIGEgbWF4aW11bSBvZiAxMCBydWxlcyBwZXIgcG9saWN5LlxuICAgICAqL1xuICAgIHJ1bGVzOiB6LmFycmF5KFJ1bGVTY2hlbWEpLm1heCgxMCkubWluKDEpLFxufSk7XG5leHBvcnQgY29uc3QgVXBkYXRlUG9saWN5Qm9keVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBmb3IgdGhlIHBvbGljeS5cbiAgICAgKiBMaW1pdGVkIHRvIDUwIGNoYXJhY3RlcnMgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMsIHNwYWNlcywgY29tbWFzLCBhbmQgcGVyaW9kcy5cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbjogelxuICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgLnJlZ2V4KC9eW0EtWmEtejAtOSAsLl17MSw1MH0kLylcbiAgICAgICAgLm9wdGlvbmFsKCksXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgcnVsZXMgdGhhdCBjb21wcmlzZSB0aGUgcG9saWN5LlxuICAgICAqIExpbWl0ZWQgdG8gYSBtYXhpbXVtIG9mIDEwIHJ1bGVzIHBlciBwb2xpY3kuXG4gICAgICovXG4gICAgcnVsZXM6IHouYXJyYXkoUnVsZVNjaGVtYSkubWF4KDEwKS5taW4oMSksXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/policies/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/spend-permissions/constants.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/spend-permissions/constants.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPEND_PERMISSION_MANAGER_ABI: () => (/* binding */ SPEND_PERMISSION_MANAGER_ABI),\n/* harmony export */   SPEND_PERMISSION_MANAGER_ADDRESS: () => (/* binding */ SPEND_PERMISSION_MANAGER_ADDRESS)\n/* harmony export */ });\nconst SPEND_PERMISSION_MANAGER_ADDRESS = \"0xf85210B21cC50302F477BA56686d2019dC9b67Ad\";\nconst SPEND_PERMISSION_MANAGER_ABI = [\n    {\n        inputs: [\n            {\n                internalType: \"contract PublicERC6492Validator\",\n                name: \"publicERC6492Validator\",\n                type: \"address\",\n            },\n            { internalType: \"address\", name: \"magicSpend\", type: \"address\" },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint48\", name: \"currentTimestamp\", type: \"uint48\" },\n            { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n        ],\n        name: \"AfterSpendPermissionEnd\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint48\", name: \"currentTimestamp\", type: \"uint48\" },\n            { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n        ],\n        name: \"BeforeSpendPermissionStart\",\n        type: \"error\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"token\", type: \"address\" }],\n        name: \"ERC721TokenNotSupported\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"EmptySpendPermissionBatch\", type: \"error\" },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"value\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"allowance\", type: \"uint256\" },\n        ],\n        name: \"ExceededSpendPermission\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint160\", name: \"spend\", type: \"uint160\" },\n                ],\n                internalType: \"struct SpendPermissionManager.PeriodSpend\",\n                name: \"actualLastUpdatedPeriod\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint160\", name: \"spend\", type: \"uint160\" },\n                ],\n                internalType: \"struct SpendPermissionManager.PeriodSpend\",\n                name: \"expectedLastUpdatedPeriod\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"InvalidLastUpdatedPeriod\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"sender\", type: \"address\" },\n            { internalType: \"address\", name: \"expected\", type: \"address\" },\n        ],\n        name: \"InvalidSender\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"InvalidSignature\", type: \"error\" },\n    {\n        inputs: [\n            { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n            { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n        ],\n        name: \"InvalidStartEnd\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint128\", name: \"noncePostfix\", type: \"uint128\" },\n            { internalType: \"uint128\", name: \"permissionHashPostfix\", type: \"uint128\" },\n        ],\n        name: \"InvalidWithdrawRequestNonce\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"firstAccount\", type: \"address\" },\n            { internalType: \"address\", name: \"secondAccount\", type: \"address\" },\n        ],\n        name: \"MismatchedAccounts\",\n        type: \"error\",\n    },\n    {\n        inputs: [{ internalType: \"address\", name: \"token\", type: \"address\" }],\n        name: \"SafeERC20FailedOperation\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            { internalType: \"address\", name: \"spendToken\", type: \"address\" },\n            { internalType: \"address\", name: \"withdrawAsset\", type: \"address\" },\n        ],\n        name: \"SpendTokenWithdrawAssetMismatch\",\n        type: \"error\",\n    },\n    {\n        inputs: [{ internalType: \"uint256\", name: \"value\", type: \"uint256\" }],\n        name: \"SpendValueOverflow\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"spendValue\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"withdrawAmount\", type: \"uint256\" },\n        ],\n        name: \"SpendValueWithdrawAmountMismatch\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"UnauthorizedSpendPermission\", type: \"error\" },\n    {\n        inputs: [\n            { internalType: \"uint256\", name: \"received\", type: \"uint256\" },\n            { internalType: \"uint256\", name: \"expected\", type: \"uint256\" },\n        ],\n        name: \"UnexpectedReceiveAmount\",\n        type: \"error\",\n    },\n    { inputs: [], name: \"ZeroAllowance\", type: \"error\" },\n    { inputs: [], name: \"ZeroPeriod\", type: \"error\" },\n    { inputs: [], name: \"ZeroSpender\", type: \"error\" },\n    { inputs: [], name: \"ZeroToken\", type: \"error\" },\n    { inputs: [], name: \"ZeroValue\", type: \"error\" },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, internalType: \"bytes32\", name: \"hash\", type: \"bytes32\" },\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                indexed: false,\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"SpendPermissionApproved\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, internalType: \"bytes32\", name: \"hash\", type: \"bytes32\" },\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                indexed: false,\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"SpendPermissionRevoked\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, internalType: \"bytes32\", name: \"hash\", type: \"bytes32\" },\n            { indexed: true, internalType: \"address\", name: \"account\", type: \"address\" },\n            { indexed: true, internalType: \"address\", name: \"spender\", type: \"address\" },\n            { indexed: false, internalType: \"address\", name: \"token\", type: \"address\" },\n            {\n                components: [\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint160\", name: \"spend\", type: \"uint160\" },\n                ],\n                indexed: false,\n                internalType: \"struct SpendPermissionManager.PeriodSpend\",\n                name: \"periodSpend\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"SpendPermissionUsed\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"MAGIC_SPEND\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"NATIVE_TOKEN\",\n        outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PERMISSION_DETAILS_TYPEHASH\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"PUBLIC_ERC6492_VALIDATOR\",\n        outputs: [{ internalType: \"contract PublicERC6492Validator\", name: \"\", type: \"address\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SPEND_PERMISSION_BATCH_TYPEHASH\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"SPEND_PERMISSION_TYPEHASH\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    {\n                        components: [\n                            { internalType: \"address\", name: \"spender\", type: \"address\" },\n                            { internalType: \"address\", name: \"token\", type: \"address\" },\n                            { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                            { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                            { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                        ],\n                        internalType: \"struct SpendPermissionManager.PermissionDetails[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermissionBatch\",\n                name: \"spendPermissionBatch\",\n                type: \"tuple\",\n            },\n            { internalType: \"bytes\", name: \"signature\", type: \"bytes\" },\n        ],\n        name: \"approveBatchWithSignature\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"permissionToApprove\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"permissionToRevoke\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint160\", name: \"spend\", type: \"uint160\" },\n                ],\n                internalType: \"struct SpendPermissionManager.PeriodSpend\",\n                name: \"expectedLastUpdatedPeriod\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"approveWithRevoke\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n            { internalType: \"bytes\", name: \"signature\", type: \"bytes\" },\n        ],\n        name: \"approveWithSignature\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"eip712Domain\",\n        outputs: [\n            { internalType: \"bytes1\", name: \"fields\", type: \"bytes1\" },\n            { internalType: \"string\", name: \"name\", type: \"string\" },\n            { internalType: \"string\", name: \"version\", type: \"string\" },\n            { internalType: \"uint256\", name: \"chainId\", type: \"uint256\" },\n            { internalType: \"address\", name: \"verifyingContract\", type: \"address\" },\n            { internalType: \"bytes32\", name: \"salt\", type: \"bytes32\" },\n            { internalType: \"uint256[]\", name: \"extensions\", type: \"uint256[]\" },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    {\n                        components: [\n                            { internalType: \"address\", name: \"spender\", type: \"address\" },\n                            { internalType: \"address\", name: \"token\", type: \"address\" },\n                            { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                            { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                            { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                        ],\n                        internalType: \"struct SpendPermissionManager.PermissionDetails[]\",\n                        name: \"permissions\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermissionBatch\",\n                name: \"spendPermissionBatch\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"getBatchHash\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"getCurrentPeriod\",\n        outputs: [\n            {\n                components: [\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint160\", name: \"spend\", type: \"uint160\" },\n                ],\n                internalType: \"struct SpendPermissionManager.PeriodSpend\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"getHash\",\n        outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"getLastUpdatedPeriod\",\n        outputs: [\n            {\n                components: [\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint160\", name: \"spend\", type: \"uint160\" },\n                ],\n                internalType: \"struct SpendPermissionManager.PeriodSpend\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"isApproved\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"isRevoked\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"isValid\",\n        outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revokeAsSpender\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n            { internalType: \"uint160\", name: \"value\", type: \"uint160\" },\n        ],\n        name: \"spend\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: \"address\", name: \"account\", type: \"address\" },\n                    { internalType: \"address\", name: \"spender\", type: \"address\" },\n                    { internalType: \"address\", name: \"token\", type: \"address\" },\n                    { internalType: \"uint160\", name: \"allowance\", type: \"uint160\" },\n                    { internalType: \"uint48\", name: \"period\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"start\", type: \"uint48\" },\n                    { internalType: \"uint48\", name: \"end\", type: \"uint48\" },\n                    { internalType: \"uint256\", name: \"salt\", type: \"uint256\" },\n                    { internalType: \"bytes\", name: \"extraData\", type: \"bytes\" },\n                ],\n                internalType: \"struct SpendPermissionManager.SpendPermission\",\n                name: \"spendPermission\",\n                type: \"tuple\",\n            },\n            { internalType: \"uint160\", name: \"value\", type: \"uint160\" },\n            {\n                components: [\n                    { internalType: \"bytes\", name: \"signature\", type: \"bytes\" },\n                    { internalType: \"address\", name: \"asset\", type: \"address\" },\n                    { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n                    { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n                    { internalType: \"uint48\", name: \"expiry\", type: \"uint48\" },\n                ],\n                internalType: \"struct MagicSpend.WithdrawRequest\",\n                name: \"withdrawRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"spendWithWithdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    { stateMutability: \"payable\", type: \"receive\" },\n];\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/spend-permissions/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/spend-permissions/utils.js":
/*!************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/spend-permissions/utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveTokenAddress: () => (/* binding */ resolveTokenAddress)\n/* harmony export */ });\n/* harmony import */ var _actions_evm_transfer_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../actions/evm/transfer/utils.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/actions/evm/transfer/utils.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n\n\n/**\n * Resolve the address of a token for a given network.\n *\n * @param token - The token symbol or contract address.\n * @param network - The network to get the address for.\n *\n * @returns The address of the token.\n */\nfunction resolveTokenAddress(token, network) {\n    if (token === \"eth\") {\n        return \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\n    }\n    if (token === \"usdc\" && (network === \"base\" || network === \"base-sepolia\")) {\n        return (0,_actions_evm_transfer_utils_js__WEBPACK_IMPORTED_MODULE_0__.getErc20Address)(token, network);\n    }\n    if (token === \"usdc\") {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_1__.UserInputValidationError(`Automatic token address lookup for ${token} is not supported on ${network}. Please provide the token address manually.`);\n    }\n    return token;\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS9zcGVuZC1wZXJtaXNzaW9ucy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUU7QUFDWDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsK0VBQWU7QUFDOUI7QUFDQTtBQUNBLGtCQUFrQixnRUFBd0IsdUNBQXVDLE9BQU8sc0JBQXNCLFFBQVE7QUFDdEg7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vc3BlbmQtcGVybWlzc2lvbnMvdXRpbHMuanM/MzkzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRFcmMyMEFkZHJlc3MgfSBmcm9tIFwiLi4vYWN0aW9ucy9ldm0vdHJhbnNmZXIvdXRpbHMuanNcIjtcbmltcG9ydCB7IFVzZXJJbnB1dFZhbGlkYXRpb25FcnJvciB9IGZyb20gXCIuLi9lcnJvcnMuanNcIjtcbi8qKlxuICogUmVzb2x2ZSB0aGUgYWRkcmVzcyBvZiBhIHRva2VuIGZvciBhIGdpdmVuIG5ldHdvcmsuXG4gKlxuICogQHBhcmFtIHRva2VuIC0gVGhlIHRva2VuIHN5bWJvbCBvciBjb250cmFjdCBhZGRyZXNzLlxuICogQHBhcmFtIG5ldHdvcmsgLSBUaGUgbmV0d29yayB0byBnZXQgdGhlIGFkZHJlc3MgZm9yLlxuICpcbiAqIEByZXR1cm5zIFRoZSBhZGRyZXNzIG9mIHRoZSB0b2tlbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVUb2tlbkFkZHJlc3ModG9rZW4sIG5ldHdvcmspIHtcbiAgICBpZiAodG9rZW4gPT09IFwiZXRoXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiMHhFZWVlZUVlZWVFZUVlZUVlRWVFZWVFRUVlZWVlRWVlZWVlZWVFRWVFXCI7XG4gICAgfVxuICAgIGlmICh0b2tlbiA9PT0gXCJ1c2RjXCIgJiYgKG5ldHdvcmsgPT09IFwiYmFzZVwiIHx8IG5ldHdvcmsgPT09IFwiYmFzZS1zZXBvbGlhXCIpKSB7XG4gICAgICAgIHJldHVybiBnZXRFcmMyMEFkZHJlc3ModG9rZW4sIG5ldHdvcmspO1xuICAgIH1cbiAgICBpZiAodG9rZW4gPT09IFwidXNkY1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBVc2VySW5wdXRWYWxpZGF0aW9uRXJyb3IoYEF1dG9tYXRpYyB0b2tlbiBhZGRyZXNzIGxvb2t1cCBmb3IgJHt0b2tlbn0gaXMgbm90IHN1cHBvcnRlZCBvbiAke25ldHdvcmt9LiBQbGVhc2UgcHJvdmlkZSB0aGUgdG9rZW4gYWRkcmVzcyBtYW51YWxseS5gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/spend-permissions/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/bigint.js":
/*!*************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/utils/bigint.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertBigIntsToStrings: () => (/* binding */ convertBigIntsToStrings)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Converts bigint values in an object to strings for safe serialization\n *\n * @param obj - The object to convert\n * @returns A new object with bigint values converted to strings\n */\nconst convertBigIntsToStrings = (obj) => {\n    if (typeof obj === \"bigint\") {\n        return obj.toString();\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(convertBigIntsToStrings);\n    }\n    if (obj && typeof obj === \"object\") {\n        return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, convertBigIntsToStrings(v)]));\n    }\n    return obj;\n};\n//# sourceMappingURL=bigint.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS91dGlscy9iaWdpbnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vdXRpbHMvYmlnaW50LmpzP2RhMmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyoqXG4gKiBDb252ZXJ0cyBiaWdpbnQgdmFsdWVzIGluIGFuIG9iamVjdCB0byBzdHJpbmdzIGZvciBzYWZlIHNlcmlhbGl6YXRpb25cbiAqXG4gKiBAcGFyYW0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyBBIG5ldyBvYmplY3Qgd2l0aCBiaWdpbnQgdmFsdWVzIGNvbnZlcnRlZCB0byBzdHJpbmdzXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0QmlnSW50c1RvU3RyaW5ncyA9IChvYmopID0+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICByZXR1cm4gb2JqLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5tYXAoY29udmVydEJpZ0ludHNUb1N0cmluZ3MpO1xuICAgIH1cbiAgICBpZiAob2JqICYmIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhvYmopLm1hcCgoW2ssIHZdKSA9PiBbaywgY29udmVydEJpZ0ludHNUb1N0cmluZ3ModildKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmlnaW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/bigint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/export.js":
/*!*************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/utils/export.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptWithPrivateKey: () => (/* binding */ decryptWithPrivateKey),\n/* harmony export */   formatSolanaPrivateKey: () => (/* binding */ formatSolanaPrivateKey),\n/* harmony export */   generateExportEncryptionKeyPair: () => (/* binding */ generateExportEncryptionKeyPair)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/src/esm/index.js\");\n\n\n\n/**\n * Generates a new RSA key pair with 4096-bit private key.\n * - Private key in PKCS1 DER format\n * - Public key in PKIX/SPKI DER format\n *\n * @returns A promise that resolves to the generated key pair, or rejects with an error.\n */\nconst generateExportEncryptionKeyPair = async () => {\n    return await new Promise((resolve, reject) => {\n        (0,crypto__WEBPACK_IMPORTED_MODULE_0__.generateKeyPair)(\"rsa\", {\n            modulusLength: 4096,\n            publicKeyEncoding: {\n                type: \"spki\",\n                format: \"der\",\n            },\n            privateKeyEncoding: {\n                type: \"pkcs1\",\n                format: \"der\",\n            },\n        }, (err, publicKey, privateKey) => {\n            if (err) {\n                reject(err);\n            }\n            resolve({\n                publicKey: publicKey.toString(\"base64\"),\n                privateKey: privateKey.toString(\"base64\"),\n            });\n        });\n    });\n};\n/**\n * Decrypts a ciphertext using RSA-OAEP-SHA256.\n * - Parses PKCS1 private key\n * - Uses RSA-OAEP-SHA256 for decryption\n * - Returns hex-encoded result\n *\n * @param b64PrivateKey - The base64-encoded private key in PKCS1 DER format.\n * @param b64Cipher - The base64-encoded ciphertext.\n * @returns The decrypted key hex string, or throws an error if decryption fails.\n */\nconst decryptWithPrivateKey = (b64PrivateKey, b64Cipher) => {\n    try {\n        // Create a private key object from the PKCS1 DER format\n        const privateKey = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey)({\n            key: Buffer.from(b64PrivateKey, \"base64\"),\n            format: \"der\",\n            type: \"pkcs1\",\n        });\n        const decryptedBuffer = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.privateDecrypt)({\n            key: privateKey,\n            padding: crypto__WEBPACK_IMPORTED_MODULE_0__.constants.RSA_PKCS1_OAEP_PADDING,\n            oaepHash: \"sha256\",\n        }, Buffer.from(b64Cipher, \"base64\"));\n        return decryptedBuffer.toString(\"hex\");\n    }\n    catch (error) {\n        throw new Error(`Decryption failed: ${String(error)}`);\n    }\n};\n/**\n * Format a private key to a base58 string for easy import into Solana wallet apps.\n *\n * @param privateKey - The private key as a hex string\n * @returns The formatted private key as a base58 string\n */\nconst formatSolanaPrivateKey = (privateKey) => {\n    const privateKeyBytes = Buffer.from(privateKey, \"hex\");\n    const keypair = _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.Keypair.fromSeed(privateKeyBytes);\n    const fullKey = Buffer.concat([keypair.secretKey.subarray(0, 32), keypair.publicKey.toBytes()]);\n    return bs58__WEBPACK_IMPORTED_MODULE_2__[\"default\"].encode(fullKey);\n};\n//# sourceMappingURL=export.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS91dGlscy9leHBvcnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXNGO0FBQzVDO0FBQ2xCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFFBQVEsdURBQWU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsMkJBQTJCLHdEQUFnQjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsZ0NBQWdDLHNEQUFjO0FBQzlDO0FBQ0EscUJBQXFCLDZDQUFTO0FBQzlCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0JBQW9CLG9EQUFPO0FBQzNCO0FBQ0EsV0FBVyw0Q0FBSTtBQUNmO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYXBwLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL0Bjb2luYmFzZS9jZHAtc2RrL19lc20vdXRpbHMvZXhwb3J0LmpzPzk0MjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuZXJhdGVLZXlQYWlyLCBwcml2YXRlRGVjcnlwdCwgY29uc3RhbnRzLCBjcmVhdGVQcml2YXRlS2V5IH0gZnJvbSBcImNyeXB0b1wiO1xuaW1wb3J0IHsgS2V5cGFpciB9IGZyb20gXCJAc29sYW5hL3dlYjMuanNcIjtcbmltcG9ydCBiczU4IGZyb20gXCJiczU4XCI7XG4vKipcbiAqIEdlbmVyYXRlcyBhIG5ldyBSU0Ega2V5IHBhaXIgd2l0aCA0MDk2LWJpdCBwcml2YXRlIGtleS5cbiAqIC0gUHJpdmF0ZSBrZXkgaW4gUEtDUzEgREVSIGZvcm1hdFxuICogLSBQdWJsaWMga2V5IGluIFBLSVgvU1BLSSBERVIgZm9ybWF0XG4gKlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGdlbmVyYXRlZCBrZXkgcGFpciwgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICovXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVFeHBvcnRFbmNyeXB0aW9uS2V5UGFpciA9IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBnZW5lcmF0ZUtleVBhaXIoXCJyc2FcIiwge1xuICAgICAgICAgICAgbW9kdWx1c0xlbmd0aDogNDA5NixcbiAgICAgICAgICAgIHB1YmxpY0tleUVuY29kaW5nOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGtpXCIsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImRlclwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByaXZhdGVLZXlFbmNvZGluZzoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicGtjczFcIixcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiZGVyXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LCAoZXJyLCBwdWJsaWNLZXksIHByaXZhdGVLZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LnRvU3RyaW5nKFwiYmFzZTY0XCIpLFxuICAgICAgICAgICAgICAgIHByaXZhdGVLZXk6IHByaXZhdGVLZXkudG9TdHJpbmcoXCJiYXNlNjRcIiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuLyoqXG4gKiBEZWNyeXB0cyBhIGNpcGhlcnRleHQgdXNpbmcgUlNBLU9BRVAtU0hBMjU2LlxuICogLSBQYXJzZXMgUEtDUzEgcHJpdmF0ZSBrZXlcbiAqIC0gVXNlcyBSU0EtT0FFUC1TSEEyNTYgZm9yIGRlY3J5cHRpb25cbiAqIC0gUmV0dXJucyBoZXgtZW5jb2RlZCByZXN1bHRcbiAqXG4gKiBAcGFyYW0gYjY0UHJpdmF0ZUtleSAtIFRoZSBiYXNlNjQtZW5jb2RlZCBwcml2YXRlIGtleSBpbiBQS0NTMSBERVIgZm9ybWF0LlxuICogQHBhcmFtIGI2NENpcGhlciAtIFRoZSBiYXNlNjQtZW5jb2RlZCBjaXBoZXJ0ZXh0LlxuICogQHJldHVybnMgVGhlIGRlY3J5cHRlZCBrZXkgaGV4IHN0cmluZywgb3IgdGhyb3dzIGFuIGVycm9yIGlmIGRlY3J5cHRpb24gZmFpbHMuXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNyeXB0V2l0aFByaXZhdGVLZXkgPSAoYjY0UHJpdmF0ZUtleSwgYjY0Q2lwaGVyKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgcHJpdmF0ZSBrZXkgb2JqZWN0IGZyb20gdGhlIFBLQ1MxIERFUiBmb3JtYXRcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IGNyZWF0ZVByaXZhdGVLZXkoe1xuICAgICAgICAgICAga2V5OiBCdWZmZXIuZnJvbShiNjRQcml2YXRlS2V5LCBcImJhc2U2NFwiKSxcbiAgICAgICAgICAgIGZvcm1hdDogXCJkZXJcIixcbiAgICAgICAgICAgIHR5cGU6IFwicGtjczFcIixcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGRlY3J5cHRlZEJ1ZmZlciA9IHByaXZhdGVEZWNyeXB0KHtcbiAgICAgICAgICAgIGtleTogcHJpdmF0ZUtleSxcbiAgICAgICAgICAgIHBhZGRpbmc6IGNvbnN0YW50cy5SU0FfUEtDUzFfT0FFUF9QQURESU5HLFxuICAgICAgICAgICAgb2FlcEhhc2g6IFwic2hhMjU2XCIsXG4gICAgICAgIH0sIEJ1ZmZlci5mcm9tKGI2NENpcGhlciwgXCJiYXNlNjRcIikpO1xuICAgICAgICByZXR1cm4gZGVjcnlwdGVkQnVmZmVyLnRvU3RyaW5nKFwiaGV4XCIpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEZWNyeXB0aW9uIGZhaWxlZDogJHtTdHJpbmcoZXJyb3IpfWApO1xuICAgIH1cbn07XG4vKipcbiAqIEZvcm1hdCBhIHByaXZhdGUga2V5IHRvIGEgYmFzZTU4IHN0cmluZyBmb3IgZWFzeSBpbXBvcnQgaW50byBTb2xhbmEgd2FsbGV0IGFwcHMuXG4gKlxuICogQHBhcmFtIHByaXZhdGVLZXkgLSBUaGUgcHJpdmF0ZSBrZXkgYXMgYSBoZXggc3RyaW5nXG4gKiBAcmV0dXJucyBUaGUgZm9ybWF0dGVkIHByaXZhdGUga2V5IGFzIGEgYmFzZTU4IHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgZm9ybWF0U29sYW5hUHJpdmF0ZUtleSA9IChwcml2YXRlS2V5KSA9PiB7XG4gICAgY29uc3QgcHJpdmF0ZUtleUJ5dGVzID0gQnVmZmVyLmZyb20ocHJpdmF0ZUtleSwgXCJoZXhcIik7XG4gICAgY29uc3Qga2V5cGFpciA9IEtleXBhaXIuZnJvbVNlZWQocHJpdmF0ZUtleUJ5dGVzKTtcbiAgICBjb25zdCBmdWxsS2V5ID0gQnVmZmVyLmNvbmNhdChba2V5cGFpci5zZWNyZXRLZXkuc3ViYXJyYXkoMCwgMzIpLCBrZXlwYWlyLnB1YmxpY0tleS50b0J5dGVzKCldKTtcbiAgICByZXR1cm4gYnM1OC5lbmNvZGUoZnVsbEtleSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/export.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/serializeTransaction.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/utils/serializeTransaction.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializeEIP1559Transaction: () => (/* binding */ serializeEIP1559Transaction)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/transaction/serializeTransaction.js\");\n\n/**\n * Serializes a transaction for the Coinbase API.\n *\n * @param transaction - The transaction to serialize.\n * @returns The serialized transaction.\n */\nfunction serializeEIP1559Transaction(transaction) {\n    return (0,viem__WEBPACK_IMPORTED_MODULE_0__.serializeTransaction)({\n        ...transaction,\n        chainId: 1, // ignored by Coinbase API\n        type: \"eip1559\",\n    });\n}\n//# sourceMappingURL=serializeTransaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS91dGlscy9zZXJpYWxpemVUcmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsMERBQW9CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL3V0aWxzL3NlcmlhbGl6ZVRyYW5zYWN0aW9uLmpzPzc3YzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VyaWFsaXplVHJhbnNhY3Rpb24gfSBmcm9tIFwidmllbVwiO1xuLyoqXG4gKiBTZXJpYWxpemVzIGEgdHJhbnNhY3Rpb24gZm9yIHRoZSBDb2luYmFzZSBBUEkuXG4gKlxuICogQHBhcmFtIHRyYW5zYWN0aW9uIC0gVGhlIHRyYW5zYWN0aW9uIHRvIHNlcmlhbGl6ZS5cbiAqIEByZXR1cm5zIFRoZSBzZXJpYWxpemVkIHRyYW5zYWN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplRUlQMTU1OVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZVRyYW5zYWN0aW9uKHtcbiAgICAgICAgLi4udHJhbnNhY3Rpb24sXG4gICAgICAgIGNoYWluSWQ6IDEsIC8vIGlnbm9yZWQgYnkgQ29pbmJhc2UgQVBJXG4gICAgICAgIHR5cGU6IFwiZWlwMTU1OVwiLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VyaWFsaXplVHJhbnNhY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/serializeTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/sortKeys.js":
/*!***************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/utils/sortKeys.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sortKeys: () => (/* binding */ sortKeys)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Recursively sorts object keys to ensure consistent JSON stringification\n *\n * @param obj - The object to sort\n * @returns A new object with sorted keys\n */\nconst sortKeys = (obj) => {\n    if (!obj || typeof obj !== \"object\") {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(sortKeys);\n    }\n    return Object.keys(obj)\n        .sort()\n        .reduce((acc, key) => {\n        acc[key] = sortKeys(obj[key]);\n        return acc;\n    }, {});\n};\n//# sourceMappingURL=sortKeys.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS91dGlscy9zb3J0S2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL3V0aWxzL3NvcnRLZXlzLmpzPzZhMGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyoqXG4gKiBSZWN1cnNpdmVseSBzb3J0cyBvYmplY3Qga2V5cyB0byBlbnN1cmUgY29uc2lzdGVudCBKU09OIHN0cmluZ2lmaWNhdGlvblxuICpcbiAqIEBwYXJhbSBvYmogLSBUaGUgb2JqZWN0IHRvIHNvcnRcbiAqIEByZXR1cm5zIEEgbmV3IG9iamVjdCB3aXRoIHNvcnRlZCBrZXlzXG4gKi9cbmV4cG9ydCBjb25zdCBzb3J0S2V5cyA9IChvYmopID0+IHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai5tYXAoc29ydEtleXMpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKVxuICAgICAgICAuc29ydCgpXG4gICAgICAgIC5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICAgIGFjY1trZXldID0gc29ydEtleXMob2JqW2tleV0pO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0S2V5cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/sortKeys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/uuidV4.js":
/*!*************************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/utils/uuidV4.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDeterministicUuidV4: () => (/* binding */ createDeterministicUuidV4)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n\n/**\n * Deterministically generates a UUIDv4 from a given input string.\n * This is necessary when we need to generate downstream idempotency keys for operations that have multiple calls.\n *\n * @param input - The input string to derive from\n * @param salt - Optional salt to append to the input (defaults to \"salt\")\n * @returns A UUIDv4 formatted string\n */\nfunction createDeterministicUuidV4(input, salt = \"salt\") {\n    const hash = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"sha256\")\n        .update(input + \"-\" + salt)\n        .digest(\"hex\");\n    // Format as UUIDv4: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n    return [\n        hash.slice(0, 8),\n        hash.slice(8, 12),\n        \"4\" + hash.slice(13, 16), // Version 4\n        ((parseInt(hash.slice(16, 17), 16) & 0x3) | 0x8).toString(16) + hash.slice(17, 20), // Variant bits\n        hash.slice(20, 32),\n    ].join(\"-\");\n}\n//# sourceMappingURL=uuidV4.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS91dGlscy91dWlkVjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsaUJBQWlCLGtEQUFVO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS91dGlscy91dWlkVjQuanM/NGUzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSBcImNyeXB0b1wiO1xuLyoqXG4gKiBEZXRlcm1pbmlzdGljYWxseSBnZW5lcmF0ZXMgYSBVVUlEdjQgZnJvbSBhIGdpdmVuIGlucHV0IHN0cmluZy5cbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IHdoZW4gd2UgbmVlZCB0byBnZW5lcmF0ZSBkb3duc3RyZWFtIGlkZW1wb3RlbmN5IGtleXMgZm9yIG9wZXJhdGlvbnMgdGhhdCBoYXZlIG11bHRpcGxlIGNhbGxzLlxuICpcbiAqIEBwYXJhbSBpbnB1dCAtIFRoZSBpbnB1dCBzdHJpbmcgdG8gZGVyaXZlIGZyb21cbiAqIEBwYXJhbSBzYWx0IC0gT3B0aW9uYWwgc2FsdCB0byBhcHBlbmQgdG8gdGhlIGlucHV0IChkZWZhdWx0cyB0byBcInNhbHRcIilcbiAqIEByZXR1cm5zIEEgVVVJRHY0IGZvcm1hdHRlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURldGVybWluaXN0aWNVdWlkVjQoaW5wdXQsIHNhbHQgPSBcInNhbHRcIikge1xuICAgIGNvbnN0IGhhc2ggPSBjcmVhdGVIYXNoKFwic2hhMjU2XCIpXG4gICAgICAgIC51cGRhdGUoaW5wdXQgKyBcIi1cIiArIHNhbHQpXG4gICAgICAgIC5kaWdlc3QoXCJoZXhcIik7XG4gICAgLy8gRm9ybWF0IGFzIFVVSUR2NDogeHh4eHh4eHgteHh4eC14eHh4LXh4eHgteHh4eHh4eHh4eHh4XG4gICAgcmV0dXJuIFtcbiAgICAgICAgaGFzaC5zbGljZSgwLCA4KSxcbiAgICAgICAgaGFzaC5zbGljZSg4LCAxMiksXG4gICAgICAgIFwiNFwiICsgaGFzaC5zbGljZSgxMywgMTYpLCAvLyBWZXJzaW9uIDRcbiAgICAgICAgKChwYXJzZUludChoYXNoLnNsaWNlKDE2LCAxNyksIDE2KSAmIDB4MykgfCAweDgpLnRvU3RyaW5nKDE2KSArIGhhc2guc2xpY2UoMTcsIDIwKSwgLy8gVmFyaWFudCBiaXRzXG4gICAgICAgIGhhc2guc2xpY2UoMjAsIDMyKSxcbiAgICBdLmpvaW4oXCItXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXVpZFY0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/uuidV4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/wait.js":
/*!***********************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/utils/wait.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wait: () => (/* binding */ wait)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/errors.js\");\n\n/**\n * Polls a resource until a terminal condition is met or timeout occurs.\n *\n * @param reload - Function that fetches the latest state of the resource\n * @param isTerminal - Function that determines if the current state is terminal\n * @param transform - Function that transforms the resource into a new type\n * @param options - Configuration options for polling behavior\n * @returns The resource in its terminal state\n * @throws {TimeoutError} If the operation exceeds the timeout duration\n *\n * @example\n * const result = await wait(\n *   () => fetchOrderStatus(orderId),\n *   (status) => status === 'completed',\n *   (status) => status === 'completed' ? { status } : undefined,\n *   { timeoutSeconds: 30 }\n * );\n */\nasync function wait(reload, isTerminal, transform = (obj) => obj, options = {}) {\n    const { intervalSeconds = 0.2, timeoutSeconds = 10 } = options;\n    const startTime = Date.now();\n    while (Date.now() - startTime < timeoutSeconds * 1000) {\n        const updatedObject = await reload();\n        if (isTerminal(updatedObject)) {\n            return transform(updatedObject);\n        }\n        await new Promise(resolve => setTimeout(resolve, intervalSeconds * 1000));\n    }\n    throw new _errors_js__WEBPACK_IMPORTED_MODULE_0__.TimeoutError(`Operation has not reached a terminal state after ${timeoutSeconds} seconds and may still succeed. Retry with a longer timeout using the timeoutSeconds option.`);\n}\n//# sourceMappingURL=wait.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS91dGlscy93YWl0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxTQUFTO0FBQ3JELE9BQU87QUFDUDtBQUNBO0FBQ08sOEVBQThFO0FBQ3JGLFlBQVksNkNBQTZDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9EQUFZLHFEQUFxRCxnQkFBZ0I7QUFDL0Y7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhcHAtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS91dGlscy93YWl0LmpzP2NiMjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGltZW91dEVycm9yIH0gZnJvbSBcIi4uL2Vycm9ycy5qc1wiO1xuLyoqXG4gKiBQb2xscyBhIHJlc291cmNlIHVudGlsIGEgdGVybWluYWwgY29uZGl0aW9uIGlzIG1ldCBvciB0aW1lb3V0IG9jY3Vycy5cbiAqXG4gKiBAcGFyYW0gcmVsb2FkIC0gRnVuY3Rpb24gdGhhdCBmZXRjaGVzIHRoZSBsYXRlc3Qgc3RhdGUgb2YgdGhlIHJlc291cmNlXG4gKiBAcGFyYW0gaXNUZXJtaW5hbCAtIEZ1bmN0aW9uIHRoYXQgZGV0ZXJtaW5lcyBpZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB0ZXJtaW5hbFxuICogQHBhcmFtIHRyYW5zZm9ybSAtIEZ1bmN0aW9uIHRoYXQgdHJhbnNmb3JtcyB0aGUgcmVzb3VyY2UgaW50byBhIG5ldyB0eXBlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgcG9sbGluZyBiZWhhdmlvclxuICogQHJldHVybnMgVGhlIHJlc291cmNlIGluIGl0cyB0ZXJtaW5hbCBzdGF0ZVxuICogQHRocm93cyB7VGltZW91dEVycm9yfSBJZiB0aGUgb3BlcmF0aW9uIGV4Y2VlZHMgdGhlIHRpbWVvdXQgZHVyYXRpb25cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgd2FpdChcbiAqICAgKCkgPT4gZmV0Y2hPcmRlclN0YXR1cyhvcmRlcklkKSxcbiAqICAgKHN0YXR1cykgPT4gc3RhdHVzID09PSAnY29tcGxldGVkJyxcbiAqICAgKHN0YXR1cykgPT4gc3RhdHVzID09PSAnY29tcGxldGVkJyA/IHsgc3RhdHVzIH0gOiB1bmRlZmluZWQsXG4gKiAgIHsgdGltZW91dFNlY29uZHM6IDMwIH1cbiAqICk7XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0KHJlbG9hZCwgaXNUZXJtaW5hbCwgdHJhbnNmb3JtID0gKG9iaikgPT4gb2JqLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGludGVydmFsU2Vjb25kcyA9IDAuMiwgdGltZW91dFNlY29uZHMgPSAxMCB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnRUaW1lIDwgdGltZW91dFNlY29uZHMgKiAxMDAwKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRPYmplY3QgPSBhd2FpdCByZWxvYWQoKTtcbiAgICAgICAgaWYgKGlzVGVybWluYWwodXBkYXRlZE9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm0odXBkYXRlZE9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGludGVydmFsU2Vjb25kcyAqIDEwMDApKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFRpbWVvdXRFcnJvcihgT3BlcmF0aW9uIGhhcyBub3QgcmVhY2hlZCBhIHRlcm1pbmFsIHN0YXRlIGFmdGVyICR7dGltZW91dFNlY29uZHN9IHNlY29uZHMgYW5kIG1heSBzdGlsbCBzdWNjZWVkLiBSZXRyeSB3aXRoIGEgbG9uZ2VyIHRpbWVvdXQgdXNpbmcgdGhlIHRpbWVvdXRTZWNvbmRzIG9wdGlvbi5gKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhaXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/utils/wait.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/version.js":
/*!********************************************************!*\
  !*** ./node_modules/@coinbase/cdp-sdk/_esm/version.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = \"1.38.4\";\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvaW5iYXNlL2NkcC1zZGsvX2VzbS92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFwcC10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9AY29pbmJhc2UvY2RwLXNkay9fZXNtL3ZlcnNpb24uanM/ZTlkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiMS4zOC40XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@coinbase/cdp-sdk/_esm/version.js\n");

/***/ })

};
;