"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/valtio";
exports.ids = ["vendor-chunks/valtio"];
exports.modules = {

/***/ "(ssr)/./node_modules/valtio/esm/vanilla.mjs":
/*!*********************************************!*\
  !*** ./node_modules/valtio/esm/vanilla.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVersion: () => (/* binding */ getVersion),\n/* harmony export */   proxy: () => (/* binding */ proxy),\n/* harmony export */   ref: () => (/* binding */ ref),\n/* harmony export */   snapshot: () => (/* binding */ snapshot),\n/* harmony export */   subscribe: () => (/* binding */ subscribe),\n/* harmony export */   unstable_getInternalStates: () => (/* binding */ unstable_getInternalStates),\n/* harmony export */   unstable_replaceInternalFunction: () => (/* binding */ unstable_replaceInternalFunction)\n/* harmony export */ });\n/* harmony import */ var proxy_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! proxy-compare */ \"(ssr)/./node_modules/proxy-compare/dist/index.js\");\n\n\nconst isObject = (x) => typeof x === \"object\" && x !== null;\nconst canProxyDefault = (x) => isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer) && !(x instanceof Promise);\nconst createSnapshotDefault = (target, version) => {\n  const cache = snapCache.get(target);\n  if ((cache == null ? void 0 : cache[0]) === version) {\n    return cache[1];\n  }\n  const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n  (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(snap, true);\n  snapCache.set(target, [version, snap]);\n  Reflect.ownKeys(target).forEach((key) => {\n    if (Object.getOwnPropertyDescriptor(snap, key)) {\n      return;\n    }\n    const value = Reflect.get(target, key);\n    const { enumerable } = Reflect.getOwnPropertyDescriptor(\n      target,\n      key\n    );\n    const desc = {\n      value,\n      enumerable,\n      // This is intentional to avoid copying with proxy-compare.\n      // It's still non-writable, so it avoids assigning a value.\n      configurable: true\n    };\n    if (refSet.has(value)) {\n      (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(value, false);\n    } else if (proxyStateMap.has(value)) {\n      const [target2, ensureVersion] = proxyStateMap.get(\n        value\n      );\n      desc.value = createSnapshotDefault(target2, ensureVersion());\n    }\n    Object.defineProperty(snap, key, desc);\n  });\n  return Object.preventExtensions(snap);\n};\nconst createHandlerDefault = (isInitializing, addPropListener, removePropListener, notifyUpdate) => ({\n  deleteProperty(target, prop) {\n    const prevValue = Reflect.get(target, prop);\n    removePropListener(prop);\n    const deleted = Reflect.deleteProperty(target, prop);\n    if (deleted) {\n      notifyUpdate([\"delete\", [prop], prevValue]);\n    }\n    return deleted;\n  },\n  set(target, prop, value, receiver) {\n    const hasPrevValue = !isInitializing() && Reflect.has(target, prop);\n    const prevValue = Reflect.get(target, prop, receiver);\n    if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {\n      return true;\n    }\n    removePropListener(prop);\n    if (isObject(value)) {\n      value = (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.getUntracked)(value) || value;\n    }\n    const nextValue = !proxyStateMap.has(value) && canProxy(value) ? proxy(value) : value;\n    addPropListener(prop, nextValue);\n    Reflect.set(target, prop, nextValue, receiver);\n    notifyUpdate([\"set\", [prop], value, prevValue]);\n    return true;\n  }\n});\nconst proxyStateMap = /* @__PURE__ */ new WeakMap();\nconst refSet = /* @__PURE__ */ new WeakSet();\nconst snapCache = /* @__PURE__ */ new WeakMap();\nconst versionHolder = [1];\nconst proxyCache = /* @__PURE__ */ new WeakMap();\nlet objectIs = Object.is;\nlet newProxy = (target, handler) => new Proxy(target, handler);\nlet canProxy = canProxyDefault;\nlet createSnapshot = createSnapshotDefault;\nlet createHandler = createHandlerDefault;\nfunction proxy(baseObject = {}) {\n  if (!isObject(baseObject)) {\n    throw new Error(\"object required\");\n  }\n  const found = proxyCache.get(baseObject);\n  if (found) {\n    return found;\n  }\n  let version = versionHolder[0];\n  const listeners = /* @__PURE__ */ new Set();\n  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {\n    if (version !== nextVersion) {\n      checkVersion = version = nextVersion;\n      listeners.forEach((listener) => listener(op, nextVersion));\n    }\n  };\n  let checkVersion = version;\n  const ensureVersion = (nextCheckVersion = versionHolder[0]) => {\n    if (checkVersion !== nextCheckVersion) {\n      checkVersion = nextCheckVersion;\n      propProxyStates.forEach(([propProxyState]) => {\n        const propVersion = propProxyState[1](nextCheckVersion);\n        if (propVersion > version) {\n          version = propVersion;\n        }\n      });\n    }\n    return version;\n  };\n  const createPropListener = (prop) => (op, nextVersion) => {\n    const newOp = [...op];\n    newOp[1] = [prop, ...newOp[1]];\n    notifyUpdate(newOp, nextVersion);\n  };\n  const propProxyStates = /* @__PURE__ */ new Map();\n  const addPropListener = (prop, propValue) => {\n    const propProxyState = !refSet.has(propValue) && proxyStateMap.get(propValue);\n    if (propProxyState) {\n      if (( false ? 0 : void 0) !== \"production\" && propProxyStates.has(prop)) {\n        throw new Error(\"prop listener already exists\");\n      }\n      if (listeners.size) {\n        const remove = propProxyState[2](createPropListener(prop));\n        propProxyStates.set(prop, [propProxyState, remove]);\n      } else {\n        propProxyStates.set(prop, [propProxyState]);\n      }\n    }\n  };\n  const removePropListener = (prop) => {\n    var _a;\n    const entry = propProxyStates.get(prop);\n    if (entry) {\n      propProxyStates.delete(prop);\n      (_a = entry[1]) == null ? void 0 : _a.call(entry);\n    }\n  };\n  const addListener = (listener) => {\n    listeners.add(listener);\n    if (listeners.size === 1) {\n      propProxyStates.forEach(([propProxyState, prevRemove], prop) => {\n        if (( false ? 0 : void 0) !== \"production\" && prevRemove) {\n          throw new Error(\"remove already exists\");\n        }\n        const remove = propProxyState[2](createPropListener(prop));\n        propProxyStates.set(prop, [propProxyState, remove]);\n      });\n    }\n    const removeListener = () => {\n      listeners.delete(listener);\n      if (listeners.size === 0) {\n        propProxyStates.forEach(([propProxyState, remove], prop) => {\n          if (remove) {\n            remove();\n            propProxyStates.set(prop, [propProxyState]);\n          }\n        });\n      }\n    };\n    return removeListener;\n  };\n  let initializing = true;\n  const handler = createHandler(\n    () => initializing,\n    addPropListener,\n    removePropListener,\n    notifyUpdate\n  );\n  const proxyObject = newProxy(baseObject, handler);\n  proxyCache.set(baseObject, proxyObject);\n  const proxyState = [baseObject, ensureVersion, addListener];\n  proxyStateMap.set(proxyObject, proxyState);\n  Reflect.ownKeys(baseObject).forEach((key) => {\n    const desc = Object.getOwnPropertyDescriptor(\n      baseObject,\n      key\n    );\n    if (\"value\" in desc && desc.writable) {\n      proxyObject[key] = baseObject[key];\n    }\n  });\n  initializing = false;\n  return proxyObject;\n}\nfunction getVersion(proxyObject) {\n  const proxyState = proxyStateMap.get(proxyObject);\n  return proxyState == null ? void 0 : proxyState[1]();\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n  const proxyState = proxyStateMap.get(proxyObject);\n  if (( false ? 0 : void 0) !== \"production\" && !proxyState) {\n    console.warn(\"Please use proxy object\");\n  }\n  let promise;\n  const ops = [];\n  const addListener = proxyState[2];\n  let isListenerActive = false;\n  const listener = (op) => {\n    ops.push(op);\n    if (notifyInSync) {\n      callback(ops.splice(0));\n      return;\n    }\n    if (!promise) {\n      promise = Promise.resolve().then(() => {\n        promise = void 0;\n        if (isListenerActive) {\n          callback(ops.splice(0));\n        }\n      });\n    }\n  };\n  const removeListener = addListener(listener);\n  isListenerActive = true;\n  return () => {\n    isListenerActive = false;\n    removeListener();\n  };\n}\nfunction snapshot(proxyObject) {\n  const proxyState = proxyStateMap.get(proxyObject);\n  if (( false ? 0 : void 0) !== \"production\" && !proxyState) {\n    console.warn(\"Please use proxy object\");\n  }\n  const [target, ensureVersion] = proxyState;\n  return createSnapshot(target, ensureVersion());\n}\nfunction ref(obj) {\n  refSet.add(obj);\n  return obj;\n}\nfunction unstable_getInternalStates() {\n  return {\n    proxyStateMap,\n    refSet,\n    snapCache,\n    versionHolder,\n    proxyCache\n  };\n}\nfunction unstable_replaceInternalFunction(name, fn) {\n  switch (name) {\n    case \"objectIs\":\n      objectIs = fn(objectIs);\n      break;\n    case \"newProxy\":\n      newProxy = fn(newProxy);\n      break;\n    case \"canProxy\":\n      canProxy = fn(canProxy);\n      break;\n    case \"createSnapshot\":\n      createSnapshot = fn(createSnapshot);\n      break;\n    case \"createHandler\":\n      createHandler = fn(createHandler);\n      break;\n    default:\n      throw new Error(\"unknown function\");\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/valtio/esm/vanilla.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/valtio/esm/vanilla/utils.mjs":
/*!***************************************************!*\
  !*** ./node_modules/valtio/esm/vanilla/utils.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   devtools: () => (/* binding */ devtools),\n/* harmony export */   proxyMap: () => (/* binding */ proxyMap),\n/* harmony export */   proxySet: () => (/* binding */ proxySet),\n/* harmony export */   subscribeKey: () => (/* binding */ subscribeKey),\n/* harmony export */   watch: () => (/* binding */ watch)\n/* harmony export */ });\n/* harmony import */ var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! valtio/vanilla */ \"(ssr)/./node_modules/valtio/esm/vanilla.mjs\");\n\n\nfunction subscribeKey(proxyObject, key, callback, notifyInSync) {\n  let prevValue = proxyObject[key];\n  return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(\n    proxyObject,\n    () => {\n      const nextValue = proxyObject[key];\n      if (!Object.is(prevValue, nextValue)) {\n        callback(prevValue = nextValue);\n      }\n    },\n    notifyInSync\n  );\n}\n\nlet currentCleanups;\nfunction watch(callback, options) {\n  let alive = true;\n  const cleanups = /* @__PURE__ */ new Set();\n  const subscriptions = /* @__PURE__ */ new Map();\n  const cleanup = () => {\n    if (alive) {\n      alive = false;\n      cleanups.forEach((clean) => clean());\n      cleanups.clear();\n      subscriptions.forEach((unsubscribe) => unsubscribe());\n      subscriptions.clear();\n    }\n  };\n  const revalidate = async () => {\n    if (!alive) {\n      return;\n    }\n    cleanups.forEach((clean) => clean());\n    cleanups.clear();\n    const proxiesToSubscribe = /* @__PURE__ */ new Set();\n    const parent = currentCleanups;\n    currentCleanups = cleanups;\n    try {\n      const promiseOrPossibleCleanup = callback((proxyObject) => {\n        proxiesToSubscribe.add(proxyObject);\n        if (alive && !subscriptions.has(proxyObject)) {\n          const unsubscribe = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(proxyObject, revalidate, options == null ? void 0 : options.sync);\n          subscriptions.set(proxyObject, unsubscribe);\n        }\n        return proxyObject;\n      });\n      const couldBeCleanup = promiseOrPossibleCleanup && promiseOrPossibleCleanup instanceof Promise ? await promiseOrPossibleCleanup : promiseOrPossibleCleanup;\n      if (couldBeCleanup) {\n        if (alive) {\n          cleanups.add(couldBeCleanup);\n        } else {\n          cleanup();\n        }\n      }\n    } finally {\n      currentCleanups = parent;\n    }\n    subscriptions.forEach((unsubscribe, proxyObject) => {\n      if (!proxiesToSubscribe.has(proxyObject)) {\n        subscriptions.delete(proxyObject);\n        unsubscribe();\n      }\n    });\n  };\n  if (currentCleanups) {\n    currentCleanups.add(cleanup);\n  }\n  revalidate();\n  return cleanup;\n}\n\nconst DEVTOOLS = Symbol();\nfunction devtools(proxyObject, options) {\n  const { enabled, name = \"\", ...rest } = options || {};\n  let extension;\n  try {\n    extension = (enabled != null ? enabled : ( false ? 0 : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n  } catch (e) {\n  }\n  if (!extension) {\n    if (( false ? 0 : void 0) !== \"production\" && enabled) {\n      console.warn(\"[Warning] Please install/enable Redux devtools extension\");\n    }\n    return;\n  }\n  let isTimeTraveling = false;\n  const devtools2 = extension.connect({ name, ...rest });\n  const unsub1 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(proxyObject, (ops) => {\n    const action = ops.filter(([_, path]) => path[0] !== DEVTOOLS).map(([op, path]) => `${op}:${path.map(String).join(\".\")}`).join(\", \");\n    if (!action) {\n      return;\n    }\n    if (isTimeTraveling) {\n      isTimeTraveling = false;\n    } else {\n      const snapWithoutDevtools = Object.assign({}, (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n      delete snapWithoutDevtools[DEVTOOLS];\n      devtools2.send(\n        {\n          type: action,\n          updatedAt: (/* @__PURE__ */ new Date()).toLocaleString()\n        },\n        snapWithoutDevtools\n      );\n    }\n  });\n  const unsub2 = devtools2.subscribe((message) => {\n    var _a, _b, _c, _d, _e, _f;\n    if (message.type === \"ACTION\" && message.payload) {\n      try {\n        Object.assign(proxyObject, JSON.parse(message.payload));\n      } catch (e) {\n        console.error(\n          \"please dispatch a serializable value that JSON.parse() and proxy() support\\n\",\n          e\n        );\n      }\n    }\n    if (message.type === \"DISPATCH\" && message.state) {\n      if (((_a = message.payload) == null ? void 0 : _a.type) === \"JUMP_TO_ACTION\" || ((_b = message.payload) == null ? void 0 : _b.type) === \"JUMP_TO_STATE\") {\n        isTimeTraveling = true;\n        const state = JSON.parse(message.state);\n        Object.assign(proxyObject, state);\n      }\n      proxyObject[DEVTOOLS] = message;\n    } else if (message.type === \"DISPATCH\" && ((_c = message.payload) == null ? void 0 : _c.type) === \"COMMIT\") {\n      devtools2.init((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n    } else if (message.type === \"DISPATCH\" && ((_d = message.payload) == null ? void 0 : _d.type) === \"IMPORT_STATE\") {\n      const actions = (_e = message.payload.nextLiftedState) == null ? void 0 : _e.actionsById;\n      const computedStates = ((_f = message.payload.nextLiftedState) == null ? void 0 : _f.computedStates) || [];\n      isTimeTraveling = true;\n      computedStates.forEach(({ state }, index) => {\n        const action = actions[index] || \"No action found\";\n        Object.assign(proxyObject, state);\n        if (index === 0) {\n          devtools2.init((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n        } else {\n          devtools2.send(action, (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n        }\n      });\n    }\n  });\n  devtools2.init((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n  return () => {\n    unsub1();\n    unsub2 == null ? void 0 : unsub2();\n  };\n}\n\nconst { proxyStateMap: proxyStateMap$1, snapCache: snapCache$1 } = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.unstable_getInternalStates)();\nconst isProxy$1 = (x) => proxyStateMap$1.has(x);\nconst isProxyMap = (obj) => {\n  return Symbol.toStringTag in obj && obj[Symbol.toStringTag] === \"Map\" && proxyStateMap$1.has(obj);\n};\nfunction proxyMap(entries) {\n  const initialData = [];\n  let initialIndex = 0;\n  const indexMap = /* @__PURE__ */ new Map();\n  const snapMapCache = /* @__PURE__ */ new WeakMap();\n  const registerSnapMap = () => {\n    const cache = snapCache$1.get(vObject);\n    const latestSnap = cache == null ? void 0 : cache[1];\n    if (latestSnap && !snapMapCache.has(latestSnap)) {\n      const clonedMap = new Map(indexMap);\n      snapMapCache.set(latestSnap, clonedMap);\n    }\n  };\n  const getMapForThis = (x) => snapMapCache.get(x) || indexMap;\n  if (entries) {\n    if (typeof entries[Symbol.iterator] !== \"function\") {\n      throw new TypeError(\n        \"proxyMap:\\n\tinitial state must be iterable\\n\t\ttip: structure should be [[key, value]]\"\n      );\n    }\n    for (const [key, value] of entries) {\n      indexMap.set(key, initialIndex);\n      initialData[initialIndex++] = value;\n    }\n  }\n  const vObject = {\n    data: initialData,\n    index: initialIndex,\n    epoch: 0,\n    get size() {\n      if (!isProxy$1(this)) {\n        registerSnapMap();\n      }\n      const map = getMapForThis(this);\n      return map.size;\n    },\n    get(key) {\n      const map = getMapForThis(this);\n      const index = map.get(key);\n      if (index === void 0) {\n        this.epoch;\n        return void 0;\n      }\n      return this.data[index];\n    },\n    has(key) {\n      const map = getMapForThis(this);\n      this.epoch;\n      return map.has(key);\n    },\n    set(key, value) {\n      if (!isProxy$1(this)) {\n        throw new Error(\"Cannot perform mutations on a snapshot\");\n      }\n      const index = indexMap.get(key);\n      if (index === void 0) {\n        indexMap.set(key, this.index);\n        this.data[this.index++] = value;\n      } else {\n        this.data[index] = value;\n      }\n      this.epoch++;\n      return this;\n    },\n    delete(key) {\n      if (!isProxy$1(this)) {\n        throw new Error(\"Cannot perform mutations on a snapshot\");\n      }\n      const index = indexMap.get(key);\n      if (index === void 0) {\n        return false;\n      }\n      delete this.data[index];\n      indexMap.delete(key);\n      this.epoch++;\n      return true;\n    },\n    clear() {\n      if (!isProxy$1(this)) {\n        throw new Error(\"Cannot perform mutations on a snapshot\");\n      }\n      this.data.length = 0;\n      this.index = 0;\n      this.epoch++;\n      indexMap.clear();\n    },\n    forEach(cb) {\n      this.epoch;\n      const map = getMapForThis(this);\n      map.forEach((index, key) => {\n        cb(this.data[index], key, this);\n      });\n    },\n    *entries() {\n      this.epoch;\n      const map = getMapForThis(this);\n      for (const [key, index] of map) {\n        yield [key, this.data[index]];\n      }\n    },\n    *keys() {\n      this.epoch;\n      const map = getMapForThis(this);\n      for (const key of map.keys()) {\n        yield key;\n      }\n    },\n    *values() {\n      this.epoch;\n      const map = getMapForThis(this);\n      for (const index of map.values()) {\n        yield this.data[index];\n      }\n    },\n    [Symbol.iterator]() {\n      return this.entries();\n    },\n    get [Symbol.toStringTag]() {\n      return \"Map\";\n    },\n    toJSON() {\n      return new Map(this.entries());\n    }\n  };\n  const proxiedObject = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)(vObject);\n  Object.defineProperties(proxiedObject, {\n    size: { enumerable: false },\n    index: { enumerable: false },\n    epoch: { enumerable: false },\n    data: { enumerable: false },\n    toJSON: { enumerable: false }\n  });\n  Object.seal(proxiedObject);\n  return proxiedObject;\n}\n\nconst { proxyStateMap, snapCache } = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.unstable_getInternalStates)();\nconst maybeProxify = (x) => typeof x === \"object\" ? (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({ x }).x : x;\nconst isProxy = (x) => proxyStateMap.has(x);\nconst isProxySet = (obj) => {\n  return Symbol.toStringTag in obj && obj[Symbol.toStringTag] === \"Set\" && proxyStateMap.has(obj);\n};\nfunction proxySet(initialValues) {\n  const initialData = [];\n  const indexMap = /* @__PURE__ */ new Map();\n  let initialIndex = 0;\n  const snapMapCache = /* @__PURE__ */ new WeakMap();\n  const registerSnapMap = () => {\n    const cache = snapCache.get(vObject);\n    const latestSnap = cache == null ? void 0 : cache[1];\n    if (latestSnap && !snapMapCache.has(latestSnap)) {\n      const clonedMap = new Map(indexMap);\n      snapMapCache.set(latestSnap, clonedMap);\n    }\n  };\n  const getMapForThis = (x) => snapMapCache.get(x) || indexMap;\n  if (initialValues) {\n    if (typeof initialValues[Symbol.iterator] !== \"function\") {\n      throw new TypeError(\"not iterable\");\n    }\n    for (const value of initialValues) {\n      if (!indexMap.has(value)) {\n        const v = maybeProxify(value);\n        indexMap.set(v, initialIndex);\n        initialData[initialIndex++] = v;\n      }\n    }\n  }\n  const vObject = {\n    data: initialData,\n    index: initialIndex,\n    epoch: 0,\n    get size() {\n      if (!isProxy(this)) {\n        registerSnapMap();\n      }\n      return indexMap.size;\n    },\n    has(value) {\n      const map = getMapForThis(this);\n      const v = maybeProxify(value);\n      this.epoch;\n      return map.has(v);\n    },\n    add(value) {\n      if (!isProxy(this)) {\n        throw new Error(\"Cannot perform mutations on a snapshot\");\n      }\n      const v = maybeProxify(value);\n      if (!indexMap.has(v)) {\n        indexMap.set(v, this.index);\n        this.data[this.index++] = v;\n        this.epoch++;\n      }\n      return this;\n    },\n    delete(value) {\n      if (!isProxy(this)) {\n        throw new Error(\"Cannot perform mutations on a snapshot\");\n      }\n      const v = maybeProxify(value);\n      const index = indexMap.get(v);\n      if (index === void 0) {\n        return false;\n      }\n      delete this.data[index];\n      indexMap.delete(v);\n      this.epoch++;\n      return true;\n    },\n    clear() {\n      if (!isProxy(this)) {\n        throw new Error(\"Cannot perform mutations on a snapshot\");\n      }\n      this.data.length = 0;\n      this.index = 0;\n      this.epoch++;\n      indexMap.clear();\n    },\n    forEach(cb) {\n      this.epoch;\n      const map = getMapForThis(this);\n      map.forEach((index) => {\n        cb(this.data[index], this.data[index], this);\n      });\n    },\n    *values() {\n      this.epoch;\n      const map = getMapForThis(this);\n      for (const index of map.values()) {\n        yield this.data[index];\n      }\n    },\n    keys() {\n      this.epoch;\n      return this.values();\n    },\n    *entries() {\n      this.epoch;\n      const map = getMapForThis(this);\n      for (const index of map.values()) {\n        const value = this.data[index];\n        yield [value, value];\n      }\n    },\n    toJSON() {\n      return new Set(this.values());\n    },\n    [Symbol.iterator]() {\n      return this.values();\n    },\n    get [Symbol.toStringTag]() {\n      return \"Set\";\n    },\n    intersection(other) {\n      this.epoch;\n      const otherSet = proxySet(other);\n      const resultSet = proxySet();\n      for (const value of this.values()) {\n        if (otherSet.has(value)) {\n          resultSet.add(value);\n        }\n      }\n      return proxySet(resultSet);\n    },\n    union(other) {\n      this.epoch;\n      const resultSet = proxySet();\n      const otherSet = proxySet(other);\n      for (const value of this.values()) {\n        resultSet.add(value);\n      }\n      for (const value of otherSet) {\n        resultSet.add(value);\n      }\n      return proxySet(resultSet);\n    },\n    difference(other) {\n      this.epoch;\n      const resultSet = proxySet();\n      const otherSet = proxySet(other);\n      for (const value of this.values()) {\n        if (!otherSet.has(value)) {\n          resultSet.add(value);\n        }\n      }\n      return proxySet(resultSet);\n    },\n    symmetricDifference(other) {\n      this.epoch;\n      const resultSet = proxySet();\n      const otherSet = proxySet(other);\n      for (const value of this.values()) {\n        if (!otherSet.has(value)) {\n          resultSet.add(value);\n        }\n      }\n      for (const value of otherSet.values()) {\n        if (!this.has(value)) {\n          resultSet.add(value);\n        }\n      }\n      return proxySet(resultSet);\n    },\n    isSubsetOf(other) {\n      this.epoch;\n      const otherSet = proxySet(other);\n      return this.size <= other.size && [...this.values()].every((value) => otherSet.has(value));\n    },\n    isSupersetOf(other) {\n      this.epoch;\n      const otherSet = proxySet(other);\n      return this.size >= other.size && [...otherSet].every((value) => this.has(value));\n    },\n    isDisjointFrom(other) {\n      this.epoch;\n      const otherSet = proxySet(other);\n      return [...this.values()].every((value) => !otherSet.has(value));\n    }\n  };\n  const proxiedObject = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)(vObject);\n  Object.defineProperties(proxiedObject, {\n    size: { enumerable: false },\n    data: { enumerable: false },\n    index: { enumerable: false },\n    epoch: { enumerable: false },\n    toJSON: { enumerable: false }\n  });\n  Object.seal(proxiedObject);\n  return proxiedObject;\n}\n\nconst isObject = (x) => typeof x === \"object\" && x !== null;\nlet defaultRefSet;\nconst getDefaultRefSet = () => {\n  if (!defaultRefSet) {\n    defaultRefSet = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.unstable_getInternalStates)().refSet;\n  }\n  return defaultRefSet;\n};\nfunction deepClone(obj, getRefSet = getDefaultRefSet) {\n  if (!isObject(obj) || getRefSet().has(obj)) {\n    return obj;\n  }\n  if (isProxySet(obj)) {\n    return proxySet([...obj]);\n  }\n  if (isProxyMap(obj)) {\n    return proxyMap([\n      ...obj.entries()\n    ]);\n  }\n  const baseObject = Array.isArray(obj) ? [] : Object.create(Object.getPrototypeOf(obj));\n  Reflect.ownKeys(obj).forEach((key) => {\n    baseObject[key] = deepClone(obj[key], getRefSet);\n  });\n  return baseObject;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/valtio/esm/vanilla/utils.mjs\n");

/***/ })

};
;